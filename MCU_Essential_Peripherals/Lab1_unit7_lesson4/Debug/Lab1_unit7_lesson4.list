
Lab1_unit7_lesson4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000c44  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08000d74  08000d74  00010d74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000d9c  08000d9c  00010da4  2**0
                  CONTENTS
  4 .ARM          00000000  08000d9c  08000d9c  00010da4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000d9c  08000da4  00010da4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000d9c  08000d9c  00010d9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000da0  08000da0  00010da0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010da4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000005c  20000000  08000da4  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000005c  08000da4  0002005c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010da4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003443  00000000  00000000  00010dcd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000884  00000000  00000000  00014210  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000a38  00000000  00000000  00014a94  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000001a8  00000000  00000000  000154d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000160  00000000  00000000  00015678  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00002387  00000000  00000000  000157d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00001b8f  00000000  00000000  00017b5f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000094c2  00000000  00000000  000196ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00022bb0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000554  00000000  00000000  00022c2c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000d5c 	.word	0x08000d5c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000d5c 	.word	0x08000d5c

08000170 <Enable_NVIC>:
* Note			- none
*
*/

void Enable_NVIC(uint16_t IRQ)
{
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	80fb      	strh	r3, [r7, #6]
	switch(IRQ)
 800017a:	88fb      	ldrh	r3, [r7, #6]
 800017c:	2b0f      	cmp	r3, #15
 800017e:	d854      	bhi.n	800022a <Enable_NVIC+0xba>
 8000180:	a201      	add	r2, pc, #4	; (adr r2, 8000188 <Enable_NVIC+0x18>)
 8000182:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000186:	bf00      	nop
 8000188:	080001c9 	.word	0x080001c9
 800018c:	080001d7 	.word	0x080001d7
 8000190:	080001e5 	.word	0x080001e5
 8000194:	080001f3 	.word	0x080001f3
 8000198:	08000201 	.word	0x08000201
 800019c:	0800020f 	.word	0x0800020f
 80001a0:	0800020f 	.word	0x0800020f
 80001a4:	0800020f 	.word	0x0800020f
 80001a8:	0800020f 	.word	0x0800020f
 80001ac:	0800020f 	.word	0x0800020f
 80001b0:	0800021d 	.word	0x0800021d
 80001b4:	0800021d 	.word	0x0800021d
 80001b8:	0800021d 	.word	0x0800021d
 80001bc:	0800021d 	.word	0x0800021d
 80001c0:	0800021d 	.word	0x0800021d
 80001c4:	0800021d 	.word	0x0800021d
	{
		case 0: 	NVIC_IRQ6_EXTI0_Enable;			break;
 80001c8:	4b1a      	ldr	r3, [pc, #104]	; (8000234 <Enable_NVIC+0xc4>)
 80001ca:	681b      	ldr	r3, [r3, #0]
 80001cc:	4a19      	ldr	r2, [pc, #100]	; (8000234 <Enable_NVIC+0xc4>)
 80001ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80001d2:	6013      	str	r3, [r2, #0]
 80001d4:	e029      	b.n	800022a <Enable_NVIC+0xba>
		case 1: 	NVIC_IRQ7_EXTI1_Enable;			break;
 80001d6:	4b17      	ldr	r3, [pc, #92]	; (8000234 <Enable_NVIC+0xc4>)
 80001d8:	681b      	ldr	r3, [r3, #0]
 80001da:	4a16      	ldr	r2, [pc, #88]	; (8000234 <Enable_NVIC+0xc4>)
 80001dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80001e0:	6013      	str	r3, [r2, #0]
 80001e2:	e022      	b.n	800022a <Enable_NVIC+0xba>
		case 2: 	NVIC_IRQ8_EXTI2_Enable;			break;
 80001e4:	4b13      	ldr	r3, [pc, #76]	; (8000234 <Enable_NVIC+0xc4>)
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	4a12      	ldr	r2, [pc, #72]	; (8000234 <Enable_NVIC+0xc4>)
 80001ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80001ee:	6013      	str	r3, [r2, #0]
 80001f0:	e01b      	b.n	800022a <Enable_NVIC+0xba>
		case 3: 	NVIC_IRQ9_EXTI3_Enable;			break;
 80001f2:	4b10      	ldr	r3, [pc, #64]	; (8000234 <Enable_NVIC+0xc4>)
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	4a0f      	ldr	r2, [pc, #60]	; (8000234 <Enable_NVIC+0xc4>)
 80001f8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80001fc:	6013      	str	r3, [r2, #0]
 80001fe:	e014      	b.n	800022a <Enable_NVIC+0xba>
		case 4: 	NVIC_IRQ10_EXTI4_Enable;		break;
 8000200:	4b0c      	ldr	r3, [pc, #48]	; (8000234 <Enable_NVIC+0xc4>)
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	4a0b      	ldr	r2, [pc, #44]	; (8000234 <Enable_NVIC+0xc4>)
 8000206:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800020a:	6013      	str	r3, [r2, #0]
 800020c:	e00d      	b.n	800022a <Enable_NVIC+0xba>
		case 5:
		case 6:
		case 7:
		case 8:
		case 9:		NVIC_IRQ23_EXTI5_9_Enable;		break;
 800020e:	4b09      	ldr	r3, [pc, #36]	; (8000234 <Enable_NVIC+0xc4>)
 8000210:	681b      	ldr	r3, [r3, #0]
 8000212:	4a08      	ldr	r2, [pc, #32]	; (8000234 <Enable_NVIC+0xc4>)
 8000214:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000218:	6013      	str	r3, [r2, #0]
 800021a:	e006      	b.n	800022a <Enable_NVIC+0xba>
		case 10:
		case 11:
		case 12:
		case 13:
		case 14:
		case 15:	NVIC_IRQ40_EXTI10_15_Enable;	break;
 800021c:	4b06      	ldr	r3, [pc, #24]	; (8000238 <Enable_NVIC+0xc8>)
 800021e:	681b      	ldr	r3, [r3, #0]
 8000220:	4a05      	ldr	r2, [pc, #20]	; (8000238 <Enable_NVIC+0xc8>)
 8000222:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000226:	6013      	str	r3, [r2, #0]
 8000228:	bf00      	nop

	}
}
 800022a:	bf00      	nop
 800022c:	370c      	adds	r7, #12
 800022e:	46bd      	mov	sp, r7
 8000230:	bc80      	pop	{r7}
 8000232:	4770      	bx	lr
 8000234:	e000e100 	.word	0xe000e100
 8000238:	e000e104 	.word	0xe000e104

0800023c <Disable_NVIC>:
* Note			- none
*
*/

void Disable_NVIC(uint16_t IRQ)
{
 800023c:	b480      	push	{r7}
 800023e:	b083      	sub	sp, #12
 8000240:	af00      	add	r7, sp, #0
 8000242:	4603      	mov	r3, r0
 8000244:	80fb      	strh	r3, [r7, #6]
	switch(IRQ)
 8000246:	88fb      	ldrh	r3, [r7, #6]
 8000248:	2b0f      	cmp	r3, #15
 800024a:	d854      	bhi.n	80002f6 <Disable_NVIC+0xba>
 800024c:	a201      	add	r2, pc, #4	; (adr r2, 8000254 <Disable_NVIC+0x18>)
 800024e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000252:	bf00      	nop
 8000254:	08000295 	.word	0x08000295
 8000258:	080002a3 	.word	0x080002a3
 800025c:	080002b1 	.word	0x080002b1
 8000260:	080002bf 	.word	0x080002bf
 8000264:	080002cd 	.word	0x080002cd
 8000268:	080002db 	.word	0x080002db
 800026c:	080002db 	.word	0x080002db
 8000270:	080002db 	.word	0x080002db
 8000274:	080002db 	.word	0x080002db
 8000278:	080002db 	.word	0x080002db
 800027c:	080002e9 	.word	0x080002e9
 8000280:	080002e9 	.word	0x080002e9
 8000284:	080002e9 	.word	0x080002e9
 8000288:	080002e9 	.word	0x080002e9
 800028c:	080002e9 	.word	0x080002e9
 8000290:	080002e9 	.word	0x080002e9
	{
		case 0: 	NVIC_IRQ6_EXTI0_Disable;			break;
 8000294:	4b1a      	ldr	r3, [pc, #104]	; (8000300 <Disable_NVIC+0xc4>)
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	4a19      	ldr	r2, [pc, #100]	; (8000300 <Disable_NVIC+0xc4>)
 800029a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800029e:	6013      	str	r3, [r2, #0]
 80002a0:	e029      	b.n	80002f6 <Disable_NVIC+0xba>
		case 1: 	NVIC_IRQ7_EXTI1_Disable;			break;
 80002a2:	4b17      	ldr	r3, [pc, #92]	; (8000300 <Disable_NVIC+0xc4>)
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	4a16      	ldr	r2, [pc, #88]	; (8000300 <Disable_NVIC+0xc4>)
 80002a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002ac:	6013      	str	r3, [r2, #0]
 80002ae:	e022      	b.n	80002f6 <Disable_NVIC+0xba>
		case 2: 	NVIC_IRQ8_EXTI2_Disable;			break;
 80002b0:	4b13      	ldr	r3, [pc, #76]	; (8000300 <Disable_NVIC+0xc4>)
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	4a12      	ldr	r2, [pc, #72]	; (8000300 <Disable_NVIC+0xc4>)
 80002b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002ba:	6013      	str	r3, [r2, #0]
 80002bc:	e01b      	b.n	80002f6 <Disable_NVIC+0xba>
		case 3: 	NVIC_IRQ9_EXTI3_Disable;			break;
 80002be:	4b10      	ldr	r3, [pc, #64]	; (8000300 <Disable_NVIC+0xc4>)
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	4a0f      	ldr	r2, [pc, #60]	; (8000300 <Disable_NVIC+0xc4>)
 80002c4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80002c8:	6013      	str	r3, [r2, #0]
 80002ca:	e014      	b.n	80002f6 <Disable_NVIC+0xba>
		case 4: 	NVIC_IRQ10_EXTI4_Disable;			break;
 80002cc:	4b0c      	ldr	r3, [pc, #48]	; (8000300 <Disable_NVIC+0xc4>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	4a0b      	ldr	r2, [pc, #44]	; (8000300 <Disable_NVIC+0xc4>)
 80002d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002d6:	6013      	str	r3, [r2, #0]
 80002d8:	e00d      	b.n	80002f6 <Disable_NVIC+0xba>
		case 5:
		case 6:
		case 7:
		case 8:
		case 9:		NVIC_IRQ23_EXTI5_9_Disable;			break;
 80002da:	4b09      	ldr	r3, [pc, #36]	; (8000300 <Disable_NVIC+0xc4>)
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	4a08      	ldr	r2, [pc, #32]	; (8000300 <Disable_NVIC+0xc4>)
 80002e0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80002e4:	6013      	str	r3, [r2, #0]
 80002e6:	e006      	b.n	80002f6 <Disable_NVIC+0xba>
		case 10:
		case 11:
		case 12:
		case 13:
		case 14:
		case 15:	NVIC_IRQ40_EXTI10_15_Disable;		break;
 80002e8:	4b06      	ldr	r3, [pc, #24]	; (8000304 <Disable_NVIC+0xc8>)
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	4a05      	ldr	r2, [pc, #20]	; (8000304 <Disable_NVIC+0xc8>)
 80002ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002f2:	6013      	str	r3, [r2, #0]
 80002f4:	bf00      	nop

	}
}
 80002f6:	bf00      	nop
 80002f8:	370c      	adds	r7, #12
 80002fa:	46bd      	mov	sp, r7
 80002fc:	bc80      	pop	{r7}
 80002fe:	4770      	bx	lr
 8000300:	e000e180 	.word	0xe000e180
 8000304:	e000e184 	.word	0xe000e184

08000308 <Update_EXTI>:
* Note			- none
*
*/

void Update_EXTI(EXTI_PinConfig_t* EXTI_Config)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	b084      	sub	sp, #16
 800030c:	af00      	add	r7, sp, #0
 800030e:	6078      	str	r0, [r7, #4]
	//1- Configure pin as AF input -> Floating input
	GPIO_PinConfig_t pincfg;
	pincfg.GPIO_PinNumber = EXTI_Config->EXTI_PIN.GPIO_PIN;
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	891b      	ldrh	r3, [r3, #8]
 8000314:	813b      	strh	r3, [r7, #8]
	pincfg.GPIO_PinMode = GPIO_MODE_INPUT_FLO;
 8000316:	2301      	movs	r3, #1
 8000318:	72bb      	strb	r3, [r7, #10]
	MCAL_GPIO_Init(EXTI_Config->EXTI_PIN.GPIO_Port, &pincfg);
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	685b      	ldr	r3, [r3, #4]
 800031e:	f107 0208 	add.w	r2, r7, #8
 8000322:	4611      	mov	r1, r2
 8000324:	4618      	mov	r0, r3
 8000326:	f000 fa5b 	bl	80007e0 <MCAL_GPIO_Init>

	//==================================================================================================

	//2- UPDATE AFIO to Route between EXTI Line with PORT A,B,C,D
	uint8_t AFIO_EXTICR_Index = 	(EXTI_Config->EXTI_PIN.EXTI_InputLineNumber) / 4;
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	881b      	ldrh	r3, [r3, #0]
 800032e:	089b      	lsrs	r3, r3, #2
 8000330:	b29b      	uxth	r3, r3
 8000332:	73fb      	strb	r3, [r7, #15]
	uint8_t AFIO_EXTICR_Position =  ((EXTI_Config->EXTI_PIN.EXTI_InputLineNumber) % 4) * 4;
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	881b      	ldrh	r3, [r3, #0]
 8000338:	b2db      	uxtb	r3, r3
 800033a:	f003 0303 	and.w	r3, r3, #3
 800033e:	b2db      	uxtb	r3, r3
 8000340:	009b      	lsls	r3, r3, #2
 8000342:	73bb      	strb	r3, [r7, #14]
	// Clear the four bit
	AFIO->EXTICR[AFIO_EXTICR_Index] &= ~(0xF << AFIO_EXTICR_Position) ;
 8000344:	4a5f      	ldr	r2, [pc, #380]	; (80004c4 <Update_EXTI+0x1bc>)
 8000346:	7bfb      	ldrb	r3, [r7, #15]
 8000348:	3302      	adds	r3, #2
 800034a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800034e:	7bbb      	ldrb	r3, [r7, #14]
 8000350:	210f      	movs	r1, #15
 8000352:	fa01 f303 	lsl.w	r3, r1, r3
 8000356:	43db      	mvns	r3, r3
 8000358:	4618      	mov	r0, r3
 800035a:	495a      	ldr	r1, [pc, #360]	; (80004c4 <Update_EXTI+0x1bc>)
 800035c:	7bfb      	ldrb	r3, [r7, #15]
 800035e:	4002      	ands	r2, r0
 8000360:	3302      	adds	r3, #2
 8000362:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	// Set
	AFIO->EXTICR[AFIO_EXTICR_Index] |=  (AFIO_GPIO_EXTI_Mapping(EXTI_Config->EXTI_PIN.GPIO_Port) & 0xF) << AFIO_EXTICR_Position ;
 8000366:	4a57      	ldr	r2, [pc, #348]	; (80004c4 <Update_EXTI+0x1bc>)
 8000368:	7bfb      	ldrb	r3, [r7, #15]
 800036a:	3302      	adds	r3, #2
 800036c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	685b      	ldr	r3, [r3, #4]
 8000374:	4954      	ldr	r1, [pc, #336]	; (80004c8 <Update_EXTI+0x1c0>)
 8000376:	428b      	cmp	r3, r1
 8000378:	d016      	beq.n	80003a8 <Update_EXTI+0xa0>
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	685b      	ldr	r3, [r3, #4]
 800037e:	4953      	ldr	r1, [pc, #332]	; (80004cc <Update_EXTI+0x1c4>)
 8000380:	428b      	cmp	r3, r1
 8000382:	d00f      	beq.n	80003a4 <Update_EXTI+0x9c>
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	685b      	ldr	r3, [r3, #4]
 8000388:	4951      	ldr	r1, [pc, #324]	; (80004d0 <Update_EXTI+0x1c8>)
 800038a:	428b      	cmp	r3, r1
 800038c:	d008      	beq.n	80003a0 <Update_EXTI+0x98>
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	685b      	ldr	r3, [r3, #4]
 8000392:	4950      	ldr	r1, [pc, #320]	; (80004d4 <Update_EXTI+0x1cc>)
 8000394:	428b      	cmp	r3, r1
 8000396:	d101      	bne.n	800039c <Update_EXTI+0x94>
 8000398:	2303      	movs	r3, #3
 800039a:	e006      	b.n	80003aa <Update_EXTI+0xa2>
 800039c:	2300      	movs	r3, #0
 800039e:	e004      	b.n	80003aa <Update_EXTI+0xa2>
 80003a0:	2302      	movs	r3, #2
 80003a2:	e002      	b.n	80003aa <Update_EXTI+0xa2>
 80003a4:	2301      	movs	r3, #1
 80003a6:	e000      	b.n	80003aa <Update_EXTI+0xa2>
 80003a8:	2300      	movs	r3, #0
 80003aa:	7bb9      	ldrb	r1, [r7, #14]
 80003ac:	408b      	lsls	r3, r1
 80003ae:	4618      	mov	r0, r3
 80003b0:	4944      	ldr	r1, [pc, #272]	; (80004c4 <Update_EXTI+0x1bc>)
 80003b2:	7bfb      	ldrb	r3, [r7, #15]
 80003b4:	4302      	orrs	r2, r0
 80003b6:	3302      	adds	r3, #2
 80003b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	//==================================================================================================

	// 3- UPDATE Rising and falling Edge
	EXTI->RTSR &= ~(1 << EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 80003bc:	4b46      	ldr	r3, [pc, #280]	; (80004d8 <Update_EXTI+0x1d0>)
 80003be:	689b      	ldr	r3, [r3, #8]
 80003c0:	687a      	ldr	r2, [r7, #4]
 80003c2:	8812      	ldrh	r2, [r2, #0]
 80003c4:	4611      	mov	r1, r2
 80003c6:	2201      	movs	r2, #1
 80003c8:	408a      	lsls	r2, r1
 80003ca:	43d2      	mvns	r2, r2
 80003cc:	4611      	mov	r1, r2
 80003ce:	4a42      	ldr	r2, [pc, #264]	; (80004d8 <Update_EXTI+0x1d0>)
 80003d0:	400b      	ands	r3, r1
 80003d2:	6093      	str	r3, [r2, #8]
	EXTI->FTSR &= ~(1 << EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 80003d4:	4b40      	ldr	r3, [pc, #256]	; (80004d8 <Update_EXTI+0x1d0>)
 80003d6:	68db      	ldr	r3, [r3, #12]
 80003d8:	687a      	ldr	r2, [r7, #4]
 80003da:	8812      	ldrh	r2, [r2, #0]
 80003dc:	4611      	mov	r1, r2
 80003de:	2201      	movs	r2, #1
 80003e0:	408a      	lsls	r2, r1
 80003e2:	43d2      	mvns	r2, r2
 80003e4:	4611      	mov	r1, r2
 80003e6:	4a3c      	ldr	r2, [pc, #240]	; (80004d8 <Update_EXTI+0x1d0>)
 80003e8:	400b      	ands	r3, r1
 80003ea:	60d3      	str	r3, [r2, #12]

	if(EXTI_Config->Trigger_Case == EXTI_Trigger_RISING)
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	7b1b      	ldrb	r3, [r3, #12]
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d10b      	bne.n	800040c <Update_EXTI+0x104>
	{
		EXTI->RTSR |= (1 << EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 80003f4:	4b38      	ldr	r3, [pc, #224]	; (80004d8 <Update_EXTI+0x1d0>)
 80003f6:	689b      	ldr	r3, [r3, #8]
 80003f8:	687a      	ldr	r2, [r7, #4]
 80003fa:	8812      	ldrh	r2, [r2, #0]
 80003fc:	4611      	mov	r1, r2
 80003fe:	2201      	movs	r2, #1
 8000400:	408a      	lsls	r2, r1
 8000402:	4611      	mov	r1, r2
 8000404:	4a34      	ldr	r2, [pc, #208]	; (80004d8 <Update_EXTI+0x1d0>)
 8000406:	430b      	orrs	r3, r1
 8000408:	6093      	str	r3, [r2, #8]
 800040a:	e029      	b.n	8000460 <Update_EXTI+0x158>
	}
	else if(EXTI_Config->Trigger_Case == EXTI_Trigger_FALLING)
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	7b1b      	ldrb	r3, [r3, #12]
 8000410:	2b01      	cmp	r3, #1
 8000412:	d10b      	bne.n	800042c <Update_EXTI+0x124>
	{
		EXTI->FTSR |= (1 << EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 8000414:	4b30      	ldr	r3, [pc, #192]	; (80004d8 <Update_EXTI+0x1d0>)
 8000416:	68db      	ldr	r3, [r3, #12]
 8000418:	687a      	ldr	r2, [r7, #4]
 800041a:	8812      	ldrh	r2, [r2, #0]
 800041c:	4611      	mov	r1, r2
 800041e:	2201      	movs	r2, #1
 8000420:	408a      	lsls	r2, r1
 8000422:	4611      	mov	r1, r2
 8000424:	4a2c      	ldr	r2, [pc, #176]	; (80004d8 <Update_EXTI+0x1d0>)
 8000426:	430b      	orrs	r3, r1
 8000428:	60d3      	str	r3, [r2, #12]
 800042a:	e019      	b.n	8000460 <Update_EXTI+0x158>
	}
	else if(EXTI_Config->Trigger_Case == EXTI_Trigger_RisingAndFalling)
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	7b1b      	ldrb	r3, [r3, #12]
 8000430:	2b02      	cmp	r3, #2
 8000432:	d115      	bne.n	8000460 <Update_EXTI+0x158>
	{
		EXTI->RTSR |= (1 << EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 8000434:	4b28      	ldr	r3, [pc, #160]	; (80004d8 <Update_EXTI+0x1d0>)
 8000436:	689b      	ldr	r3, [r3, #8]
 8000438:	687a      	ldr	r2, [r7, #4]
 800043a:	8812      	ldrh	r2, [r2, #0]
 800043c:	4611      	mov	r1, r2
 800043e:	2201      	movs	r2, #1
 8000440:	408a      	lsls	r2, r1
 8000442:	4611      	mov	r1, r2
 8000444:	4a24      	ldr	r2, [pc, #144]	; (80004d8 <Update_EXTI+0x1d0>)
 8000446:	430b      	orrs	r3, r1
 8000448:	6093      	str	r3, [r2, #8]
		EXTI->FTSR |= (1 << EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 800044a:	4b23      	ldr	r3, [pc, #140]	; (80004d8 <Update_EXTI+0x1d0>)
 800044c:	68db      	ldr	r3, [r3, #12]
 800044e:	687a      	ldr	r2, [r7, #4]
 8000450:	8812      	ldrh	r2, [r2, #0]
 8000452:	4611      	mov	r1, r2
 8000454:	2201      	movs	r2, #1
 8000456:	408a      	lsls	r2, r1
 8000458:	4611      	mov	r1, r2
 800045a:	4a1f      	ldr	r2, [pc, #124]	; (80004d8 <Update_EXTI+0x1d0>)
 800045c:	430b      	orrs	r3, r1
 800045e:	60d3      	str	r3, [r2, #12]
	}

	//==================================================================================================

	// 4- Update IRQ Handling Callback
	GP_ISR_CallBack[EXTI_Config->EXTI_PIN.EXTI_InputLineNumber] = EXTI_Config->P_ISR_CallBack;
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	881b      	ldrh	r3, [r3, #0]
 8000464:	4619      	mov	r1, r3
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	691b      	ldr	r3, [r3, #16]
 800046a:	4a1c      	ldr	r2, [pc, #112]	; (80004dc <Update_EXTI+0x1d4>)
 800046c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

	// 5- Enable & Disable IRQ & NVIC
	if(EXTI_Config->ISR_EN == EXTI_ISR_Enable)
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	7b5b      	ldrb	r3, [r3, #13]
 8000474:	2b01      	cmp	r3, #1
 8000476:	d110      	bne.n	800049a <Update_EXTI+0x192>
	{
		EXTI->IMR |= (1<<EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 8000478:	4b17      	ldr	r3, [pc, #92]	; (80004d8 <Update_EXTI+0x1d0>)
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	687a      	ldr	r2, [r7, #4]
 800047e:	8812      	ldrh	r2, [r2, #0]
 8000480:	4611      	mov	r1, r2
 8000482:	2201      	movs	r2, #1
 8000484:	408a      	lsls	r2, r1
 8000486:	4611      	mov	r1, r2
 8000488:	4a13      	ldr	r2, [pc, #76]	; (80004d8 <Update_EXTI+0x1d0>)
 800048a:	430b      	orrs	r3, r1
 800048c:	6013      	str	r3, [r2, #0]
		Enable_NVIC(EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	881b      	ldrh	r3, [r3, #0]
 8000492:	4618      	mov	r0, r3
 8000494:	f7ff fe6c 	bl	8000170 <Enable_NVIC>
		EXTI->IMR &= ~ (1<<EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
		Disable_NVIC(EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
	}


}
 8000498:	e010      	b.n	80004bc <Update_EXTI+0x1b4>
		EXTI->IMR &= ~ (1<<EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 800049a:	4b0f      	ldr	r3, [pc, #60]	; (80004d8 <Update_EXTI+0x1d0>)
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	687a      	ldr	r2, [r7, #4]
 80004a0:	8812      	ldrh	r2, [r2, #0]
 80004a2:	4611      	mov	r1, r2
 80004a4:	2201      	movs	r2, #1
 80004a6:	408a      	lsls	r2, r1
 80004a8:	43d2      	mvns	r2, r2
 80004aa:	4611      	mov	r1, r2
 80004ac:	4a0a      	ldr	r2, [pc, #40]	; (80004d8 <Update_EXTI+0x1d0>)
 80004ae:	400b      	ands	r3, r1
 80004b0:	6013      	str	r3, [r2, #0]
		Disable_NVIC(EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	881b      	ldrh	r3, [r3, #0]
 80004b6:	4618      	mov	r0, r3
 80004b8:	f7ff fec0 	bl	800023c <Disable_NVIC>
}
 80004bc:	bf00      	nop
 80004be:	3710      	adds	r7, #16
 80004c0:	46bd      	mov	sp, r7
 80004c2:	bd80      	pop	{r7, pc}
 80004c4:	40010000 	.word	0x40010000
 80004c8:	40010800 	.word	0x40010800
 80004cc:	40010c00 	.word	0x40010c00
 80004d0:	40011000 	.word	0x40011000
 80004d4:	40011400 	.word	0x40011400
 80004d8:	40010400 	.word	0x40010400
 80004dc:	2000001c 	.word	0x2000001c

080004e0 <MCAL_EXTI_GPIO_Init>:
* Note			- none
*
*/

void MCAL_EXTI_GPIO_Init(EXTI_PinConfig_t* EXTI_Config)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b082      	sub	sp, #8
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
	Update_EXTI(EXTI_Config);
 80004e8:	6878      	ldr	r0, [r7, #4]
 80004ea:	f7ff ff0d 	bl	8000308 <Update_EXTI>
}
 80004ee:	bf00      	nop
 80004f0:	3708      	adds	r7, #8
 80004f2:	46bd      	mov	sp, r7
 80004f4:	bd80      	pop	{r7, pc}
	...

080004f8 <EXTI0_IRQHandler>:
/************************ ISR Handler Functions ***********************
 *
 **********************************************************************/

void EXTI0_IRQHandler()
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0
	EXTI->PR |= 1<<0;
 80004fc:	4b05      	ldr	r3, [pc, #20]	; (8000514 <EXTI0_IRQHandler+0x1c>)
 80004fe:	695b      	ldr	r3, [r3, #20]
 8000500:	4a04      	ldr	r2, [pc, #16]	; (8000514 <EXTI0_IRQHandler+0x1c>)
 8000502:	f043 0301 	orr.w	r3, r3, #1
 8000506:	6153      	str	r3, [r2, #20]

	GP_ISR_CallBack[0]();
 8000508:	4b03      	ldr	r3, [pc, #12]	; (8000518 <EXTI0_IRQHandler+0x20>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	4798      	blx	r3
}
 800050e:	bf00      	nop
 8000510:	bd80      	pop	{r7, pc}
 8000512:	bf00      	nop
 8000514:	40010400 	.word	0x40010400
 8000518:	2000001c 	.word	0x2000001c

0800051c <EXTI1_IRQHandler>:

void EXTI1_IRQHandler()
{
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
	EXTI->PR |= 1<<1;
 8000520:	4b05      	ldr	r3, [pc, #20]	; (8000538 <EXTI1_IRQHandler+0x1c>)
 8000522:	695b      	ldr	r3, [r3, #20]
 8000524:	4a04      	ldr	r2, [pc, #16]	; (8000538 <EXTI1_IRQHandler+0x1c>)
 8000526:	f043 0302 	orr.w	r3, r3, #2
 800052a:	6153      	str	r3, [r2, #20]

	GP_ISR_CallBack[1]();
 800052c:	4b03      	ldr	r3, [pc, #12]	; (800053c <EXTI1_IRQHandler+0x20>)
 800052e:	685b      	ldr	r3, [r3, #4]
 8000530:	4798      	blx	r3
}
 8000532:	bf00      	nop
 8000534:	bd80      	pop	{r7, pc}
 8000536:	bf00      	nop
 8000538:	40010400 	.word	0x40010400
 800053c:	2000001c 	.word	0x2000001c

08000540 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler()
{
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0
	EXTI->PR |= 1<<2;
 8000544:	4b05      	ldr	r3, [pc, #20]	; (800055c <EXTI2_IRQHandler+0x1c>)
 8000546:	695b      	ldr	r3, [r3, #20]
 8000548:	4a04      	ldr	r2, [pc, #16]	; (800055c <EXTI2_IRQHandler+0x1c>)
 800054a:	f043 0304 	orr.w	r3, r3, #4
 800054e:	6153      	str	r3, [r2, #20]

	GP_ISR_CallBack[2]();
 8000550:	4b03      	ldr	r3, [pc, #12]	; (8000560 <EXTI2_IRQHandler+0x20>)
 8000552:	689b      	ldr	r3, [r3, #8]
 8000554:	4798      	blx	r3
}
 8000556:	bf00      	nop
 8000558:	bd80      	pop	{r7, pc}
 800055a:	bf00      	nop
 800055c:	40010400 	.word	0x40010400
 8000560:	2000001c 	.word	0x2000001c

08000564 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler()
{
 8000564:	b580      	push	{r7, lr}
 8000566:	af00      	add	r7, sp, #0
	EXTI->PR |= 1<<3;
 8000568:	4b05      	ldr	r3, [pc, #20]	; (8000580 <EXTI3_IRQHandler+0x1c>)
 800056a:	695b      	ldr	r3, [r3, #20]
 800056c:	4a04      	ldr	r2, [pc, #16]	; (8000580 <EXTI3_IRQHandler+0x1c>)
 800056e:	f043 0308 	orr.w	r3, r3, #8
 8000572:	6153      	str	r3, [r2, #20]

	GP_ISR_CallBack[3]();
 8000574:	4b03      	ldr	r3, [pc, #12]	; (8000584 <EXTI3_IRQHandler+0x20>)
 8000576:	68db      	ldr	r3, [r3, #12]
 8000578:	4798      	blx	r3
}
 800057a:	bf00      	nop
 800057c:	bd80      	pop	{r7, pc}
 800057e:	bf00      	nop
 8000580:	40010400 	.word	0x40010400
 8000584:	2000001c 	.word	0x2000001c

08000588 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler()
{
 8000588:	b580      	push	{r7, lr}
 800058a:	af00      	add	r7, sp, #0
	EXTI->PR |= 1<<4;
 800058c:	4b05      	ldr	r3, [pc, #20]	; (80005a4 <EXTI4_IRQHandler+0x1c>)
 800058e:	695b      	ldr	r3, [r3, #20]
 8000590:	4a04      	ldr	r2, [pc, #16]	; (80005a4 <EXTI4_IRQHandler+0x1c>)
 8000592:	f043 0310 	orr.w	r3, r3, #16
 8000596:	6153      	str	r3, [r2, #20]

	GP_ISR_CallBack[4]();
 8000598:	4b03      	ldr	r3, [pc, #12]	; (80005a8 <EXTI4_IRQHandler+0x20>)
 800059a:	691b      	ldr	r3, [r3, #16]
 800059c:	4798      	blx	r3
}
 800059e:	bf00      	nop
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	40010400 	.word	0x40010400
 80005a8:	2000001c 	.word	0x2000001c

080005ac <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler()
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
	if(EXTI->PR  & 1<<5)	{ EXTI->PR |= 1<<5;	GP_ISR_CallBack[5](); }
 80005b0:	4b26      	ldr	r3, [pc, #152]	; (800064c <EXTI9_5_IRQHandler+0xa0>)
 80005b2:	695b      	ldr	r3, [r3, #20]
 80005b4:	f003 0320 	and.w	r3, r3, #32
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d008      	beq.n	80005ce <EXTI9_5_IRQHandler+0x22>
 80005bc:	4b23      	ldr	r3, [pc, #140]	; (800064c <EXTI9_5_IRQHandler+0xa0>)
 80005be:	695b      	ldr	r3, [r3, #20]
 80005c0:	4a22      	ldr	r2, [pc, #136]	; (800064c <EXTI9_5_IRQHandler+0xa0>)
 80005c2:	f043 0320 	orr.w	r3, r3, #32
 80005c6:	6153      	str	r3, [r2, #20]
 80005c8:	4b21      	ldr	r3, [pc, #132]	; (8000650 <EXTI9_5_IRQHandler+0xa4>)
 80005ca:	695b      	ldr	r3, [r3, #20]
 80005cc:	4798      	blx	r3
	if(EXTI->PR  & 1<<6)	{ EXTI->PR |= 1<<6;	GP_ISR_CallBack[6](); }
 80005ce:	4b1f      	ldr	r3, [pc, #124]	; (800064c <EXTI9_5_IRQHandler+0xa0>)
 80005d0:	695b      	ldr	r3, [r3, #20]
 80005d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d008      	beq.n	80005ec <EXTI9_5_IRQHandler+0x40>
 80005da:	4b1c      	ldr	r3, [pc, #112]	; (800064c <EXTI9_5_IRQHandler+0xa0>)
 80005dc:	695b      	ldr	r3, [r3, #20]
 80005de:	4a1b      	ldr	r2, [pc, #108]	; (800064c <EXTI9_5_IRQHandler+0xa0>)
 80005e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80005e4:	6153      	str	r3, [r2, #20]
 80005e6:	4b1a      	ldr	r3, [pc, #104]	; (8000650 <EXTI9_5_IRQHandler+0xa4>)
 80005e8:	699b      	ldr	r3, [r3, #24]
 80005ea:	4798      	blx	r3
	if(EXTI->PR  & 1<<7)	{ EXTI->PR |= 1<<7;	GP_ISR_CallBack[7](); }
 80005ec:	4b17      	ldr	r3, [pc, #92]	; (800064c <EXTI9_5_IRQHandler+0xa0>)
 80005ee:	695b      	ldr	r3, [r3, #20]
 80005f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d008      	beq.n	800060a <EXTI9_5_IRQHandler+0x5e>
 80005f8:	4b14      	ldr	r3, [pc, #80]	; (800064c <EXTI9_5_IRQHandler+0xa0>)
 80005fa:	695b      	ldr	r3, [r3, #20]
 80005fc:	4a13      	ldr	r2, [pc, #76]	; (800064c <EXTI9_5_IRQHandler+0xa0>)
 80005fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000602:	6153      	str	r3, [r2, #20]
 8000604:	4b12      	ldr	r3, [pc, #72]	; (8000650 <EXTI9_5_IRQHandler+0xa4>)
 8000606:	69db      	ldr	r3, [r3, #28]
 8000608:	4798      	blx	r3
	if(EXTI->PR  & 1<<8)	{ EXTI->PR |= 1<<8;	GP_ISR_CallBack[8](); }
 800060a:	4b10      	ldr	r3, [pc, #64]	; (800064c <EXTI9_5_IRQHandler+0xa0>)
 800060c:	695b      	ldr	r3, [r3, #20]
 800060e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000612:	2b00      	cmp	r3, #0
 8000614:	d008      	beq.n	8000628 <EXTI9_5_IRQHandler+0x7c>
 8000616:	4b0d      	ldr	r3, [pc, #52]	; (800064c <EXTI9_5_IRQHandler+0xa0>)
 8000618:	695b      	ldr	r3, [r3, #20]
 800061a:	4a0c      	ldr	r2, [pc, #48]	; (800064c <EXTI9_5_IRQHandler+0xa0>)
 800061c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000620:	6153      	str	r3, [r2, #20]
 8000622:	4b0b      	ldr	r3, [pc, #44]	; (8000650 <EXTI9_5_IRQHandler+0xa4>)
 8000624:	6a1b      	ldr	r3, [r3, #32]
 8000626:	4798      	blx	r3
	if(EXTI->PR  & 1<<9)	{ EXTI->PR |= 1<<9;	GP_ISR_CallBack[9](); }
 8000628:	4b08      	ldr	r3, [pc, #32]	; (800064c <EXTI9_5_IRQHandler+0xa0>)
 800062a:	695b      	ldr	r3, [r3, #20]
 800062c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000630:	2b00      	cmp	r3, #0
 8000632:	d008      	beq.n	8000646 <EXTI9_5_IRQHandler+0x9a>
 8000634:	4b05      	ldr	r3, [pc, #20]	; (800064c <EXTI9_5_IRQHandler+0xa0>)
 8000636:	695b      	ldr	r3, [r3, #20]
 8000638:	4a04      	ldr	r2, [pc, #16]	; (800064c <EXTI9_5_IRQHandler+0xa0>)
 800063a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800063e:	6153      	str	r3, [r2, #20]
 8000640:	4b03      	ldr	r3, [pc, #12]	; (8000650 <EXTI9_5_IRQHandler+0xa4>)
 8000642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000644:	4798      	blx	r3
}
 8000646:	bf00      	nop
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	40010400 	.word	0x40010400
 8000650:	2000001c 	.word	0x2000001c

08000654 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler()
{
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
	if(EXTI->PR  & 1<<10)	{ EXTI->PR |= 1<<10;	GP_ISR_CallBack[10](); }
 8000658:	4b2d      	ldr	r3, [pc, #180]	; (8000710 <EXTI15_10_IRQHandler+0xbc>)
 800065a:	695b      	ldr	r3, [r3, #20]
 800065c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000660:	2b00      	cmp	r3, #0
 8000662:	d008      	beq.n	8000676 <EXTI15_10_IRQHandler+0x22>
 8000664:	4b2a      	ldr	r3, [pc, #168]	; (8000710 <EXTI15_10_IRQHandler+0xbc>)
 8000666:	695b      	ldr	r3, [r3, #20]
 8000668:	4a29      	ldr	r2, [pc, #164]	; (8000710 <EXTI15_10_IRQHandler+0xbc>)
 800066a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800066e:	6153      	str	r3, [r2, #20]
 8000670:	4b28      	ldr	r3, [pc, #160]	; (8000714 <EXTI15_10_IRQHandler+0xc0>)
 8000672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000674:	4798      	blx	r3
	if(EXTI->PR  & 1<<11)	{ EXTI->PR |= 1<<11;	GP_ISR_CallBack[11](); }
 8000676:	4b26      	ldr	r3, [pc, #152]	; (8000710 <EXTI15_10_IRQHandler+0xbc>)
 8000678:	695b      	ldr	r3, [r3, #20]
 800067a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800067e:	2b00      	cmp	r3, #0
 8000680:	d008      	beq.n	8000694 <EXTI15_10_IRQHandler+0x40>
 8000682:	4b23      	ldr	r3, [pc, #140]	; (8000710 <EXTI15_10_IRQHandler+0xbc>)
 8000684:	695b      	ldr	r3, [r3, #20]
 8000686:	4a22      	ldr	r2, [pc, #136]	; (8000710 <EXTI15_10_IRQHandler+0xbc>)
 8000688:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800068c:	6153      	str	r3, [r2, #20]
 800068e:	4b21      	ldr	r3, [pc, #132]	; (8000714 <EXTI15_10_IRQHandler+0xc0>)
 8000690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000692:	4798      	blx	r3
	if(EXTI->PR  & 1<<12)	{ EXTI->PR |= 1<<12;	GP_ISR_CallBack[12](); }
 8000694:	4b1e      	ldr	r3, [pc, #120]	; (8000710 <EXTI15_10_IRQHandler+0xbc>)
 8000696:	695b      	ldr	r3, [r3, #20]
 8000698:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800069c:	2b00      	cmp	r3, #0
 800069e:	d008      	beq.n	80006b2 <EXTI15_10_IRQHandler+0x5e>
 80006a0:	4b1b      	ldr	r3, [pc, #108]	; (8000710 <EXTI15_10_IRQHandler+0xbc>)
 80006a2:	695b      	ldr	r3, [r3, #20]
 80006a4:	4a1a      	ldr	r2, [pc, #104]	; (8000710 <EXTI15_10_IRQHandler+0xbc>)
 80006a6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80006aa:	6153      	str	r3, [r2, #20]
 80006ac:	4b19      	ldr	r3, [pc, #100]	; (8000714 <EXTI15_10_IRQHandler+0xc0>)
 80006ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b0:	4798      	blx	r3
	if(EXTI->PR  & 1<<13)	{ EXTI->PR |= 1<<13;	GP_ISR_CallBack[13](); }
 80006b2:	4b17      	ldr	r3, [pc, #92]	; (8000710 <EXTI15_10_IRQHandler+0xbc>)
 80006b4:	695b      	ldr	r3, [r3, #20]
 80006b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d008      	beq.n	80006d0 <EXTI15_10_IRQHandler+0x7c>
 80006be:	4b14      	ldr	r3, [pc, #80]	; (8000710 <EXTI15_10_IRQHandler+0xbc>)
 80006c0:	695b      	ldr	r3, [r3, #20]
 80006c2:	4a13      	ldr	r2, [pc, #76]	; (8000710 <EXTI15_10_IRQHandler+0xbc>)
 80006c4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80006c8:	6153      	str	r3, [r2, #20]
 80006ca:	4b12      	ldr	r3, [pc, #72]	; (8000714 <EXTI15_10_IRQHandler+0xc0>)
 80006cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80006ce:	4798      	blx	r3
	if(EXTI->PR  & 1<<14)	{ EXTI->PR |= 1<<14;	GP_ISR_CallBack[14](); }
 80006d0:	4b0f      	ldr	r3, [pc, #60]	; (8000710 <EXTI15_10_IRQHandler+0xbc>)
 80006d2:	695b      	ldr	r3, [r3, #20]
 80006d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d008      	beq.n	80006ee <EXTI15_10_IRQHandler+0x9a>
 80006dc:	4b0c      	ldr	r3, [pc, #48]	; (8000710 <EXTI15_10_IRQHandler+0xbc>)
 80006de:	695b      	ldr	r3, [r3, #20]
 80006e0:	4a0b      	ldr	r2, [pc, #44]	; (8000710 <EXTI15_10_IRQHandler+0xbc>)
 80006e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006e6:	6153      	str	r3, [r2, #20]
 80006e8:	4b0a      	ldr	r3, [pc, #40]	; (8000714 <EXTI15_10_IRQHandler+0xc0>)
 80006ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80006ec:	4798      	blx	r3
	if(EXTI->PR  & 1<<15)	{ EXTI->PR |= 1<<15;	GP_ISR_CallBack[15](); }
 80006ee:	4b08      	ldr	r3, [pc, #32]	; (8000710 <EXTI15_10_IRQHandler+0xbc>)
 80006f0:	695b      	ldr	r3, [r3, #20]
 80006f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d008      	beq.n	800070c <EXTI15_10_IRQHandler+0xb8>
 80006fa:	4b05      	ldr	r3, [pc, #20]	; (8000710 <EXTI15_10_IRQHandler+0xbc>)
 80006fc:	695b      	ldr	r3, [r3, #20]
 80006fe:	4a04      	ldr	r2, [pc, #16]	; (8000710 <EXTI15_10_IRQHandler+0xbc>)
 8000700:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000704:	6153      	str	r3, [r2, #20]
 8000706:	4b03      	ldr	r3, [pc, #12]	; (8000714 <EXTI15_10_IRQHandler+0xc0>)
 8000708:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800070a:	4798      	blx	r3
}
 800070c:	bf00      	nop
 800070e:	bd80      	pop	{r7, pc}
 8000710:	40010400 	.word	0x40010400
 8000714:	2000001c 	.word	0x2000001c

08000718 <Get_CRLH_Position>:
* Note			- none
*
*/

uint16_t Get_CRLH_Position(uint16_t PinNumber)
{
 8000718:	b480      	push	{r7}
 800071a:	b083      	sub	sp, #12
 800071c:	af00      	add	r7, sp, #0
 800071e:	4603      	mov	r3, r0
 8000720:	80fb      	strh	r3, [r7, #6]
	switch(PinNumber)
 8000722:	88fb      	ldrh	r3, [r7, #6]
 8000724:	2b80      	cmp	r3, #128	; 0x80
 8000726:	d042      	beq.n	80007ae <Get_CRLH_Position+0x96>
 8000728:	2b80      	cmp	r3, #128	; 0x80
 800072a:	dc11      	bgt.n	8000750 <Get_CRLH_Position+0x38>
 800072c:	2b08      	cmp	r3, #8
 800072e:	d036      	beq.n	800079e <Get_CRLH_Position+0x86>
 8000730:	2b08      	cmp	r3, #8
 8000732:	dc06      	bgt.n	8000742 <Get_CRLH_Position+0x2a>
 8000734:	2b02      	cmp	r3, #2
 8000736:	d02e      	beq.n	8000796 <Get_CRLH_Position+0x7e>
 8000738:	2b04      	cmp	r3, #4
 800073a:	d02e      	beq.n	800079a <Get_CRLH_Position+0x82>
 800073c:	2b01      	cmp	r3, #1
 800073e:	d028      	beq.n	8000792 <Get_CRLH_Position+0x7a>
 8000740:	e047      	b.n	80007d2 <Get_CRLH_Position+0xba>
 8000742:	2b20      	cmp	r3, #32
 8000744:	d02f      	beq.n	80007a6 <Get_CRLH_Position+0x8e>
 8000746:	2b40      	cmp	r3, #64	; 0x40
 8000748:	d02f      	beq.n	80007aa <Get_CRLH_Position+0x92>
 800074a:	2b10      	cmp	r3, #16
 800074c:	d029      	beq.n	80007a2 <Get_CRLH_Position+0x8a>
 800074e:	e040      	b.n	80007d2 <Get_CRLH_Position+0xba>
 8000750:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000754:	d033      	beq.n	80007be <Get_CRLH_Position+0xa6>
 8000756:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800075a:	dc09      	bgt.n	8000770 <Get_CRLH_Position+0x58>
 800075c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000760:	d029      	beq.n	80007b6 <Get_CRLH_Position+0x9e>
 8000762:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000766:	d028      	beq.n	80007ba <Get_CRLH_Position+0xa2>
 8000768:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800076c:	d021      	beq.n	80007b2 <Get_CRLH_Position+0x9a>
 800076e:	e030      	b.n	80007d2 <Get_CRLH_Position+0xba>
 8000770:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000774:	d027      	beq.n	80007c6 <Get_CRLH_Position+0xae>
 8000776:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800077a:	dc03      	bgt.n	8000784 <Get_CRLH_Position+0x6c>
 800077c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000780:	d01f      	beq.n	80007c2 <Get_CRLH_Position+0xaa>
 8000782:	e026      	b.n	80007d2 <Get_CRLH_Position+0xba>
 8000784:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000788:	d01f      	beq.n	80007ca <Get_CRLH_Position+0xb2>
 800078a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800078e:	d01e      	beq.n	80007ce <Get_CRLH_Position+0xb6>
 8000790:	e01f      	b.n	80007d2 <Get_CRLH_Position+0xba>
	{
	case GPIO_PIN_0:	return 0;
 8000792:	2300      	movs	r3, #0
 8000794:	e01f      	b.n	80007d6 <Get_CRLH_Position+0xbe>
	break;

	case GPIO_PIN_1:	return 4;
 8000796:	2304      	movs	r3, #4
 8000798:	e01d      	b.n	80007d6 <Get_CRLH_Position+0xbe>
	break;

	case GPIO_PIN_2:	return 8;
 800079a:	2308      	movs	r3, #8
 800079c:	e01b      	b.n	80007d6 <Get_CRLH_Position+0xbe>
	break;

	case GPIO_PIN_3:	return 12;
 800079e:	230c      	movs	r3, #12
 80007a0:	e019      	b.n	80007d6 <Get_CRLH_Position+0xbe>
	break;

	case GPIO_PIN_4:	return 16;
 80007a2:	2310      	movs	r3, #16
 80007a4:	e017      	b.n	80007d6 <Get_CRLH_Position+0xbe>
	break;

	case GPIO_PIN_5:	return 20;
 80007a6:	2314      	movs	r3, #20
 80007a8:	e015      	b.n	80007d6 <Get_CRLH_Position+0xbe>
	break;

	case GPIO_PIN_6:	return 24;
 80007aa:	2318      	movs	r3, #24
 80007ac:	e013      	b.n	80007d6 <Get_CRLH_Position+0xbe>
	break;

	case GPIO_PIN_7:	return 28;
 80007ae:	231c      	movs	r3, #28
 80007b0:	e011      	b.n	80007d6 <Get_CRLH_Position+0xbe>
	break;

	case GPIO_PIN_8:	return 0;
 80007b2:	2300      	movs	r3, #0
 80007b4:	e00f      	b.n	80007d6 <Get_CRLH_Position+0xbe>
	break;

	case GPIO_PIN_9:	return 4;
 80007b6:	2304      	movs	r3, #4
 80007b8:	e00d      	b.n	80007d6 <Get_CRLH_Position+0xbe>
	break;

	case GPIO_PIN_10:	return 8;
 80007ba:	2308      	movs	r3, #8
 80007bc:	e00b      	b.n	80007d6 <Get_CRLH_Position+0xbe>
	break;

	case GPIO_PIN_11:	return 12;
 80007be:	230c      	movs	r3, #12
 80007c0:	e009      	b.n	80007d6 <Get_CRLH_Position+0xbe>
	break;

	case GPIO_PIN_12:	return 16;
 80007c2:	2310      	movs	r3, #16
 80007c4:	e007      	b.n	80007d6 <Get_CRLH_Position+0xbe>
	break;

	case GPIO_PIN_13:	return 20;
 80007c6:	2314      	movs	r3, #20
 80007c8:	e005      	b.n	80007d6 <Get_CRLH_Position+0xbe>
	break;

	case GPIO_PIN_14:	return 24;
 80007ca:	2318      	movs	r3, #24
 80007cc:	e003      	b.n	80007d6 <Get_CRLH_Position+0xbe>
	break;

	case GPIO_PIN_15:	return 28;
 80007ce:	231c      	movs	r3, #28
 80007d0:	e001      	b.n	80007d6 <Get_CRLH_Position+0xbe>
	break;

	default:  return -1;
 80007d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
	break;

	}


}
 80007d6:	4618      	mov	r0, r3
 80007d8:	370c      	adds	r7, #12
 80007da:	46bd      	mov	sp, r7
 80007dc:	bc80      	pop	{r7}
 80007de:	4770      	bx	lr

080007e0 <MCAL_GPIO_Init>:
* Note			- stm32F103C6 MCU has GPIO A...E Modules
* 				  but LQFP48 Package has only GPIO A,B part of C,D exported as external pins from the MCU
*/

void MCAL_GPIO_Init(GPIO_TypeDef *GPIOx , GPIO_PinConfig_t *PinConfig)
{
 80007e0:	b590      	push	{r4, r7, lr}
 80007e2:	b085      	sub	sp, #20
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
 80007e8:	6039      	str	r1, [r7, #0]
	// Check Pin is CRL (GPIO_PIN_0...GPIO_PIN_7) OR CRH (GPIO_PIN_8...GPIO_PIN_15)
	volatile uint32_t *configregister = NULL;
 80007ea:	2300      	movs	r3, #0
 80007ec:	60fb      	str	r3, [r7, #12]
	uint8_t pin_config =0;
 80007ee:	2300      	movs	r3, #0
 80007f0:	72fb      	strb	r3, [r7, #11]

	if(PinConfig->GPIO_PinNumber < GPIO_PIN_8)
 80007f2:	683b      	ldr	r3, [r7, #0]
 80007f4:	881b      	ldrh	r3, [r3, #0]
 80007f6:	2bff      	cmp	r3, #255	; 0xff
 80007f8:	d802      	bhi.n	8000800 <MCAL_GPIO_Init+0x20>
		configregister = &GPIOx->CRL;
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	60fb      	str	r3, [r7, #12]
 80007fe:	e002      	b.n	8000806 <MCAL_GPIO_Init+0x26>
	else
		configregister = &GPIOx->CRH;
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	3304      	adds	r3, #4
 8000804:	60fb      	str	r3, [r7, #12]

	// Clear CRL OR CRH for Pin used
	(*configregister) &=  ~(0xF << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 8000806:	683b      	ldr	r3, [r7, #0]
 8000808:	881b      	ldrh	r3, [r3, #0]
 800080a:	4618      	mov	r0, r3
 800080c:	f7ff ff84 	bl	8000718 <Get_CRLH_Position>
 8000810:	4603      	mov	r3, r0
 8000812:	461a      	mov	r2, r3
 8000814:	230f      	movs	r3, #15
 8000816:	4093      	lsls	r3, r2
 8000818:	43da      	mvns	r2, r3
 800081a:	68fb      	ldr	r3, [r7, #12]
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	401a      	ands	r2, r3
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	601a      	str	r2, [r3, #0]

	// IF Pin is Output
	if((PinConfig->GPIO_PinMode == GPIO_MODE_OUTPUT_PP) || (PinConfig->GPIO_PinMode == GPIO_MODE_OUTPUT_OD) ||(PinConfig->GPIO_PinMode == GPIO_MODE_OUTPUT_AF_PP) ||(PinConfig->GPIO_PinMode == GPIO_MODE_OUTPUT_AF_OD))
 8000824:	683b      	ldr	r3, [r7, #0]
 8000826:	789b      	ldrb	r3, [r3, #2]
 8000828:	2b04      	cmp	r3, #4
 800082a:	d00b      	beq.n	8000844 <MCAL_GPIO_Init+0x64>
 800082c:	683b      	ldr	r3, [r7, #0]
 800082e:	789b      	ldrb	r3, [r3, #2]
 8000830:	2b05      	cmp	r3, #5
 8000832:	d007      	beq.n	8000844 <MCAL_GPIO_Init+0x64>
 8000834:	683b      	ldr	r3, [r7, #0]
 8000836:	789b      	ldrb	r3, [r3, #2]
 8000838:	2b06      	cmp	r3, #6
 800083a:	d003      	beq.n	8000844 <MCAL_GPIO_Init+0x64>
 800083c:	683b      	ldr	r3, [r7, #0]
 800083e:	789b      	ldrb	r3, [r3, #2]
 8000840:	2b07      	cmp	r3, #7
 8000842:	d10e      	bne.n	8000862 <MCAL_GPIO_Init+0x82>
	{
		// pin_config: carry 4-bit for bin MODE[0,1] , CNF[0,1]
		pin_config = ( (((PinConfig->GPIO_PinMode - 4) << 2) | (PinConfig->GPIO_Output_Speed)) & 0x0F);
 8000844:	683b      	ldr	r3, [r7, #0]
 8000846:	789b      	ldrb	r3, [r3, #2]
 8000848:	3b04      	subs	r3, #4
 800084a:	009b      	lsls	r3, r3, #2
 800084c:	b25a      	sxtb	r2, r3
 800084e:	683b      	ldr	r3, [r7, #0]
 8000850:	78db      	ldrb	r3, [r3, #3]
 8000852:	b25b      	sxtb	r3, r3
 8000854:	4313      	orrs	r3, r2
 8000856:	b25b      	sxtb	r3, r3
 8000858:	b2db      	uxtb	r3, r3
 800085a:	f003 030f 	and.w	r3, r3, #15
 800085e:	72fb      	strb	r3, [r7, #11]
 8000860:	e02a      	b.n	80008b8 <MCAL_GPIO_Init+0xd8>

	// If Pin is Input
	else
	{

		if((PinConfig->GPIO_PinMode == GPIO_MODE_INPUT_FLO) ||  (PinConfig->GPIO_PinMode == GPIO_MODE_Analog))
 8000862:	683b      	ldr	r3, [r7, #0]
 8000864:	789b      	ldrb	r3, [r3, #2]
 8000866:	2b01      	cmp	r3, #1
 8000868:	d003      	beq.n	8000872 <MCAL_GPIO_Init+0x92>
 800086a:	683b      	ldr	r3, [r7, #0]
 800086c:	789b      	ldrb	r3, [r3, #2]
 800086e:	2b00      	cmp	r3, #0
 8000870:	d107      	bne.n	8000882 <MCAL_GPIO_Init+0xa2>
		{
			pin_config = ( (((PinConfig->GPIO_PinMode) << 2) | (0x0)) & 0x0F);
 8000872:	683b      	ldr	r3, [r7, #0]
 8000874:	789b      	ldrb	r3, [r3, #2]
 8000876:	009b      	lsls	r3, r3, #2
 8000878:	b2db      	uxtb	r3, r3
 800087a:	f003 030f 	and.w	r3, r3, #15
 800087e:	72fb      	strb	r3, [r7, #11]
 8000880:	e01a      	b.n	80008b8 <MCAL_GPIO_Init+0xd8>

		}

		else if((PinConfig->GPIO_PinMode == GPIO_MODE_AF_INPUT))
 8000882:	683b      	ldr	r3, [r7, #0]
 8000884:	789b      	ldrb	r3, [r3, #2]
 8000886:	2b08      	cmp	r3, #8
 8000888:	d102      	bne.n	8000890 <MCAL_GPIO_Init+0xb0>
		{
			pin_config = ( (((GPIO_MODE_INPUT_FLO) << 2) | (0x0)) & 0x0F);
 800088a:	2304      	movs	r3, #4
 800088c:	72fb      	strb	r3, [r7, #11]
 800088e:	e013      	b.n	80008b8 <MCAL_GPIO_Init+0xd8>
		}

		else
		{
			if((PinConfig->GPIO_PinMode == GPIO_MODE_INPUT_PU))
 8000890:	683b      	ldr	r3, [r7, #0]
 8000892:	789b      	ldrb	r3, [r3, #2]
 8000894:	2b02      	cmp	r3, #2
 8000896:	d107      	bne.n	80008a8 <MCAL_GPIO_Init+0xc8>
			{
				// PxODR = 1 ->  Input Pull-up
				GPIOx->ODR |= PinConfig->GPIO_PinNumber;
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	68db      	ldr	r3, [r3, #12]
 800089c:	683a      	ldr	r2, [r7, #0]
 800089e:	8812      	ldrh	r2, [r2, #0]
 80008a0:	431a      	orrs	r2, r3
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	60da      	str	r2, [r3, #12]
 80008a6:	e007      	b.n	80008b8 <MCAL_GPIO_Init+0xd8>

			}
			else
			{
				// PxODR = 0 -> Input Pull-down
				GPIOx->ODR &= ~(PinConfig->GPIO_PinNumber);
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	68db      	ldr	r3, [r3, #12]
 80008ac:	683a      	ldr	r2, [r7, #0]
 80008ae:	8812      	ldrh	r2, [r2, #0]
 80008b0:	43d2      	mvns	r2, r2
 80008b2:	401a      	ands	r2, r3
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	60da      	str	r2, [r3, #12]
		}

	}

	// write on CRL OR CRH
	(*configregister) |=  (	(pin_config) << Get_CRLH_Position(PinConfig->GPIO_PinNumber)	);
 80008b8:	7afc      	ldrb	r4, [r7, #11]
 80008ba:	683b      	ldr	r3, [r7, #0]
 80008bc:	881b      	ldrh	r3, [r3, #0]
 80008be:	4618      	mov	r0, r3
 80008c0:	f7ff ff2a 	bl	8000718 <Get_CRLH_Position>
 80008c4:	4603      	mov	r3, r0
 80008c6:	fa04 f203 	lsl.w	r2, r4, r3
 80008ca:	68fb      	ldr	r3, [r7, #12]
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	431a      	orrs	r2, r3
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	601a      	str	r2, [r3, #0]

}
 80008d4:	bf00      	nop
 80008d6:	3714      	adds	r7, #20
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd90      	pop	{r4, r7, pc}

080008dc <MCAL_GPIO_WritePin>:
* Note			- none
*
*/

void MCAL_GPIO_WritePin(GPIO_TypeDef *GPIOx , uint16_t PinNum, uint8_t Value)
{
 80008dc:	b480      	push	{r7}
 80008de:	b083      	sub	sp, #12
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
 80008e4:	460b      	mov	r3, r1
 80008e6:	807b      	strh	r3, [r7, #2]
 80008e8:	4613      	mov	r3, r2
 80008ea:	707b      	strb	r3, [r7, #1]
	if(Value != GPIO_PIN_RESET)
 80008ec:	787b      	ldrb	r3, [r7, #1]
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d003      	beq.n	80008fa <MCAL_GPIO_WritePin+0x1e>
	{
		//GPIOx->ODR |= PinNum;
		// OR
		GPIOx->BSRR = (uint32_t)PinNum;
 80008f2:	887a      	ldrh	r2, [r7, #2]
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	611a      	str	r2, [r3, #16]
		// OR
		GPIOx->BRR = (uint32_t)PinNum;
	}


}
 80008f8:	e002      	b.n	8000900 <MCAL_GPIO_WritePin+0x24>
		GPIOx->BRR = (uint32_t)PinNum;
 80008fa:	887a      	ldrh	r2, [r7, #2]
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	615a      	str	r2, [r3, #20]
}
 8000900:	bf00      	nop
 8000902:	370c      	adds	r7, #12
 8000904:	46bd      	mov	sp, r7
 8000906:	bc80      	pop	{r7}
 8000908:	4770      	bx	lr

0800090a <MCAL_GPIO_WritePort>:
* Note			- none
*
*/

void MCAL_GPIO_WritePort(GPIO_TypeDef *GPIOx, uint16_t Value)
{
 800090a:	b480      	push	{r7}
 800090c:	b083      	sub	sp, #12
 800090e:	af00      	add	r7, sp, #0
 8000910:	6078      	str	r0, [r7, #4]
 8000912:	460b      	mov	r3, r1
 8000914:	807b      	strh	r3, [r7, #2]
	GPIOx->ODR = (uint32_t)Value;
 8000916:	887a      	ldrh	r2, [r7, #2]
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	60da      	str	r2, [r3, #12]
}
 800091c:	bf00      	nop
 800091e:	370c      	adds	r7, #12
 8000920:	46bd      	mov	sp, r7
 8000922:	bc80      	pop	{r7}
 8000924:	4770      	bx	lr

08000926 <delay_ms>:
#include "MCAL_GPIO.h"
#include "HAL_LCD.h"
#include "HAL_LCD_Private.h"


void delay_ms(uint32_t time) {
 8000926:	b480      	push	{r7}
 8000928:	b085      	sub	sp, #20
 800092a:	af00      	add	r7, sp, #0
 800092c:	6078      	str	r0, [r7, #4]
	uint32_t i, j;
	for (i = 0; i < time; i++)
 800092e:	2300      	movs	r3, #0
 8000930:	60fb      	str	r3, [r7, #12]
 8000932:	e00b      	b.n	800094c <delay_ms+0x26>
		for (j = 0; j < 255; j++);
 8000934:	2300      	movs	r3, #0
 8000936:	60bb      	str	r3, [r7, #8]
 8000938:	e002      	b.n	8000940 <delay_ms+0x1a>
 800093a:	68bb      	ldr	r3, [r7, #8]
 800093c:	3301      	adds	r3, #1
 800093e:	60bb      	str	r3, [r7, #8]
 8000940:	68bb      	ldr	r3, [r7, #8]
 8000942:	2bfe      	cmp	r3, #254	; 0xfe
 8000944:	d9f9      	bls.n	800093a <delay_ms+0x14>
	for (i = 0; i < time; i++)
 8000946:	68fb      	ldr	r3, [r7, #12]
 8000948:	3301      	adds	r3, #1
 800094a:	60fb      	str	r3, [r7, #12]
 800094c:	68fa      	ldr	r2, [r7, #12]
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	429a      	cmp	r2, r3
 8000952:	d3ef      	bcc.n	8000934 <delay_ms+0xe>

}
 8000954:	bf00      	nop
 8000956:	3714      	adds	r7, #20
 8000958:	46bd      	mov	sp, r7
 800095a:	bc80      	pop	{r7}
 800095c:	4770      	bx	lr
	...

08000960 <GPIO_LCD_init>:
* Note			- none
*
*/

void GPIO_LCD_init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0
	GPIO_PinConfig_t pinConfig;

	// Control pins
	pinConfig.GPIO_PinNumber = LCD_RS_PIN;
 8000966:	f44f 7380 	mov.w	r3, #256	; 0x100
 800096a:	80bb      	strh	r3, [r7, #4]
	pinConfig.GPIO_PinMode = GPIO_MODE_OUTPUT_PP;
 800096c:	2304      	movs	r3, #4
 800096e:	71bb      	strb	r3, [r7, #6]
	pinConfig.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000970:	2301      	movs	r3, #1
 8000972:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(LCD_CONTROL_PORT, &pinConfig);
 8000974:	1d3b      	adds	r3, r7, #4
 8000976:	4619      	mov	r1, r3
 8000978:	483b      	ldr	r0, [pc, #236]	; (8000a68 <GPIO_LCD_init+0x108>)
 800097a:	f7ff ff31 	bl	80007e0 <MCAL_GPIO_Init>

	pinConfig.GPIO_PinNumber = LCD_RW_PIN;
 800097e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000982:	80bb      	strh	r3, [r7, #4]
	pinConfig.GPIO_PinMode = GPIO_MODE_OUTPUT_PP;
 8000984:	2304      	movs	r3, #4
 8000986:	71bb      	strb	r3, [r7, #6]
	pinConfig.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000988:	2301      	movs	r3, #1
 800098a:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(LCD_CONTROL_PORT, &pinConfig);
 800098c:	1d3b      	adds	r3, r7, #4
 800098e:	4619      	mov	r1, r3
 8000990:	4835      	ldr	r0, [pc, #212]	; (8000a68 <GPIO_LCD_init+0x108>)
 8000992:	f7ff ff25 	bl	80007e0 <MCAL_GPIO_Init>

	pinConfig.GPIO_PinNumber = LCD_E_PIN;
 8000996:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800099a:	80bb      	strh	r3, [r7, #4]
	pinConfig.GPIO_PinMode = GPIO_MODE_OUTPUT_PP;
 800099c:	2304      	movs	r3, #4
 800099e:	71bb      	strb	r3, [r7, #6]
	pinConfig.GPIO_Output_Speed = GPIO_SPEED_10M;
 80009a0:	2301      	movs	r3, #1
 80009a2:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(LCD_CONTROL_PORT, &pinConfig);
 80009a4:	1d3b      	adds	r3, r7, #4
 80009a6:	4619      	mov	r1, r3
 80009a8:	482f      	ldr	r0, [pc, #188]	; (8000a68 <GPIO_LCD_init+0x108>)
 80009aa:	f7ff ff19 	bl	80007e0 <MCAL_GPIO_Init>

	// Data	pins
	pinConfig.GPIO_PinNumber = GPIO_PIN_0;
 80009ae:	2301      	movs	r3, #1
 80009b0:	80bb      	strh	r3, [r7, #4]
	pinConfig.GPIO_PinMode = GPIO_MODE_OUTPUT_PP;
 80009b2:	2304      	movs	r3, #4
 80009b4:	71bb      	strb	r3, [r7, #6]
	pinConfig.GPIO_Output_Speed = GPIO_SPEED_10M;
 80009b6:	2301      	movs	r3, #1
 80009b8:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(LCD_DATA_PORT, &pinConfig);
 80009ba:	1d3b      	adds	r3, r7, #4
 80009bc:	4619      	mov	r1, r3
 80009be:	482a      	ldr	r0, [pc, #168]	; (8000a68 <GPIO_LCD_init+0x108>)
 80009c0:	f7ff ff0e 	bl	80007e0 <MCAL_GPIO_Init>

	pinConfig.GPIO_PinNumber = GPIO_PIN_1;
 80009c4:	2302      	movs	r3, #2
 80009c6:	80bb      	strh	r3, [r7, #4]
	pinConfig.GPIO_PinMode = GPIO_MODE_OUTPUT_PP;
 80009c8:	2304      	movs	r3, #4
 80009ca:	71bb      	strb	r3, [r7, #6]
	pinConfig.GPIO_Output_Speed = GPIO_SPEED_10M;
 80009cc:	2301      	movs	r3, #1
 80009ce:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(LCD_DATA_PORT, &pinConfig);
 80009d0:	1d3b      	adds	r3, r7, #4
 80009d2:	4619      	mov	r1, r3
 80009d4:	4824      	ldr	r0, [pc, #144]	; (8000a68 <GPIO_LCD_init+0x108>)
 80009d6:	f7ff ff03 	bl	80007e0 <MCAL_GPIO_Init>

	pinConfig.GPIO_PinNumber = GPIO_PIN_2;
 80009da:	2304      	movs	r3, #4
 80009dc:	80bb      	strh	r3, [r7, #4]
	pinConfig.GPIO_PinMode = GPIO_MODE_OUTPUT_PP;
 80009de:	2304      	movs	r3, #4
 80009e0:	71bb      	strb	r3, [r7, #6]
	pinConfig.GPIO_Output_Speed = GPIO_SPEED_10M;
 80009e2:	2301      	movs	r3, #1
 80009e4:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(LCD_DATA_PORT, &pinConfig);
 80009e6:	1d3b      	adds	r3, r7, #4
 80009e8:	4619      	mov	r1, r3
 80009ea:	481f      	ldr	r0, [pc, #124]	; (8000a68 <GPIO_LCD_init+0x108>)
 80009ec:	f7ff fef8 	bl	80007e0 <MCAL_GPIO_Init>

	pinConfig.GPIO_PinNumber = GPIO_PIN_3;
 80009f0:	2308      	movs	r3, #8
 80009f2:	80bb      	strh	r3, [r7, #4]
	pinConfig.GPIO_PinMode = GPIO_MODE_OUTPUT_PP;
 80009f4:	2304      	movs	r3, #4
 80009f6:	71bb      	strb	r3, [r7, #6]
	pinConfig.GPIO_Output_Speed = GPIO_SPEED_10M;
 80009f8:	2301      	movs	r3, #1
 80009fa:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(LCD_DATA_PORT, &pinConfig);
 80009fc:	1d3b      	adds	r3, r7, #4
 80009fe:	4619      	mov	r1, r3
 8000a00:	4819      	ldr	r0, [pc, #100]	; (8000a68 <GPIO_LCD_init+0x108>)
 8000a02:	f7ff feed 	bl	80007e0 <MCAL_GPIO_Init>

	pinConfig.GPIO_PinNumber = GPIO_PIN_4;
 8000a06:	2310      	movs	r3, #16
 8000a08:	80bb      	strh	r3, [r7, #4]
	pinConfig.GPIO_PinMode = GPIO_MODE_OUTPUT_PP;
 8000a0a:	2304      	movs	r3, #4
 8000a0c:	71bb      	strb	r3, [r7, #6]
	pinConfig.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000a0e:	2301      	movs	r3, #1
 8000a10:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(LCD_DATA_PORT, &pinConfig);
 8000a12:	1d3b      	adds	r3, r7, #4
 8000a14:	4619      	mov	r1, r3
 8000a16:	4814      	ldr	r0, [pc, #80]	; (8000a68 <GPIO_LCD_init+0x108>)
 8000a18:	f7ff fee2 	bl	80007e0 <MCAL_GPIO_Init>

	pinConfig.GPIO_PinNumber = GPIO_PIN_5;
 8000a1c:	2320      	movs	r3, #32
 8000a1e:	80bb      	strh	r3, [r7, #4]
	pinConfig.GPIO_PinMode = GPIO_MODE_OUTPUT_PP;
 8000a20:	2304      	movs	r3, #4
 8000a22:	71bb      	strb	r3, [r7, #6]
	pinConfig.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000a24:	2301      	movs	r3, #1
 8000a26:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(LCD_DATA_PORT, &pinConfig);
 8000a28:	1d3b      	adds	r3, r7, #4
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	480e      	ldr	r0, [pc, #56]	; (8000a68 <GPIO_LCD_init+0x108>)
 8000a2e:	f7ff fed7 	bl	80007e0 <MCAL_GPIO_Init>

	pinConfig.GPIO_PinNumber = GPIO_PIN_6;
 8000a32:	2340      	movs	r3, #64	; 0x40
 8000a34:	80bb      	strh	r3, [r7, #4]
	pinConfig.GPIO_PinMode = GPIO_MODE_OUTPUT_PP;
 8000a36:	2304      	movs	r3, #4
 8000a38:	71bb      	strb	r3, [r7, #6]
	pinConfig.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(LCD_DATA_PORT, &pinConfig);
 8000a3e:	1d3b      	adds	r3, r7, #4
 8000a40:	4619      	mov	r1, r3
 8000a42:	4809      	ldr	r0, [pc, #36]	; (8000a68 <GPIO_LCD_init+0x108>)
 8000a44:	f7ff fecc 	bl	80007e0 <MCAL_GPIO_Init>

	pinConfig.GPIO_PinNumber = GPIO_PIN_7;
 8000a48:	2380      	movs	r3, #128	; 0x80
 8000a4a:	80bb      	strh	r3, [r7, #4]
	pinConfig.GPIO_PinMode = GPIO_MODE_OUTPUT_PP;
 8000a4c:	2304      	movs	r3, #4
 8000a4e:	71bb      	strb	r3, [r7, #6]
	pinConfig.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000a50:	2301      	movs	r3, #1
 8000a52:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(LCD_DATA_PORT, &pinConfig);
 8000a54:	1d3b      	adds	r3, r7, #4
 8000a56:	4619      	mov	r1, r3
 8000a58:	4803      	ldr	r0, [pc, #12]	; (8000a68 <GPIO_LCD_init+0x108>)
 8000a5a:	f7ff fec1 	bl	80007e0 <MCAL_GPIO_Init>

}
 8000a5e:	bf00      	nop
 8000a60:	3708      	adds	r7, #8
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	40010800 	.word	0x40010800

08000a6c <HAL_LCD_Init>:
* Note			- none
*
*/

void HAL_LCD_Init(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
	delay_ms(40);
 8000a70:	2028      	movs	r0, #40	; 0x28
 8000a72:	f7ff ff58 	bl	8000926 <delay_ms>
	GPIO_LCD_init();
 8000a76:	f7ff ff73 	bl	8000960 <GPIO_LCD_init>

#if LCD_Mode == LCD_MODE_8_BIT

	/*Function Set*/
	HAL_LCD_Send_Cmnd(LCD_8_BIT_2_LINE_DOT_5_7);
 8000a7a:	2038      	movs	r0, #56	; 0x38
 8000a7c:	f000 f814 	bl	8000aa8 <HAL_LCD_Send_Cmnd>
	delay_ms(5);
 8000a80:	2005      	movs	r0, #5
 8000a82:	f7ff ff50 	bl	8000926 <delay_ms>
	delay_ms(2);


#endif

	HAL_LCD_Send_Cmnd(Display_ON_Cursor_BLINKING);
 8000a86:	200f      	movs	r0, #15
 8000a88:	f000 f80e 	bl	8000aa8 <HAL_LCD_Send_Cmnd>
	delay_ms(2);
 8000a8c:	2002      	movs	r0, #2
 8000a8e:	f7ff ff4a 	bl	8000926 <delay_ms>
	HAL_LCD_Send_Cmnd(Clear_Display);
 8000a92:	2001      	movs	r0, #1
 8000a94:	f000 f808 	bl	8000aa8 <HAL_LCD_Send_Cmnd>
	delay_ms(2);
 8000a98:	2002      	movs	r0, #2
 8000a9a:	f7ff ff44 	bl	8000926 <delay_ms>
	HAL_LCD_Send_Cmnd(Entry_Mode);
 8000a9e:	2006      	movs	r0, #6
 8000aa0:	f000 f802 	bl	8000aa8 <HAL_LCD_Send_Cmnd>

}
 8000aa4:	bf00      	nop
 8000aa6:	bd80      	pop	{r7, pc}

08000aa8 <HAL_LCD_Send_Cmnd>:
* Note			- none
*
*/

void HAL_LCD_Send_Cmnd(uint8_t Copy_Cmnd)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	4603      	mov	r3, r0
 8000ab0:	71fb      	strb	r3, [r7, #7]

#if LCD_Mode == LCD_MODE_8_BIT

	/*Send Commend*/
	MCAL_GPIO_WritePort(LCD_DATA_PORT, Copy_Cmnd);
 8000ab2:	79fb      	ldrb	r3, [r7, #7]
 8000ab4:	b29b      	uxth	r3, r3
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	4810      	ldr	r0, [pc, #64]	; (8000afc <HAL_LCD_Send_Cmnd+0x54>)
 8000aba:	f7ff ff26 	bl	800090a <MCAL_GPIO_WritePort>

	/*RS = 0 -> Instruction set*/
	MCAL_GPIO_WritePin(LCD_CONTROL_PORT, LCD_RS_PIN, GPIO_PIN_RESET);
 8000abe:	2200      	movs	r2, #0
 8000ac0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ac4:	480d      	ldr	r0, [pc, #52]	; (8000afc <HAL_LCD_Send_Cmnd+0x54>)
 8000ac6:	f7ff ff09 	bl	80008dc <MCAL_GPIO_WritePin>

	/*RW = 0 -> Write operation*/
	MCAL_GPIO_WritePin(LCD_CONTROL_PORT, LCD_RW_PIN, GPIO_PIN_RESET);
 8000aca:	2200      	movs	r2, #0
 8000acc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ad0:	480a      	ldr	r0, [pc, #40]	; (8000afc <HAL_LCD_Send_Cmnd+0x54>)
 8000ad2:	f7ff ff03 	bl	80008dc <MCAL_GPIO_WritePin>

	/*E = 1*/
	MCAL_GPIO_WritePin(LCD_CONTROL_PORT, LCD_E_PIN,GPIO_PIN_SET);
 8000ad6:	2201      	movs	r2, #1
 8000ad8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000adc:	4807      	ldr	r0, [pc, #28]	; (8000afc <HAL_LCD_Send_Cmnd+0x54>)
 8000ade:	f7ff fefd 	bl	80008dc <MCAL_GPIO_WritePin>
	delay_ms(1);
 8000ae2:	2001      	movs	r0, #1
 8000ae4:	f7ff ff1f 	bl	8000926 <delay_ms>
	/*E = 0*/
	MCAL_GPIO_WritePin(LCD_CONTROL_PORT, LCD_E_PIN,GPIO_PIN_RESET);
 8000ae8:	2200      	movs	r2, #0
 8000aea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000aee:	4803      	ldr	r0, [pc, #12]	; (8000afc <HAL_LCD_Send_Cmnd+0x54>)
 8000af0:	f7ff fef4 	bl	80008dc <MCAL_GPIO_WritePin>
    /*E = 0 */
    MCAL_GPIO_WritePin(LCD_CONTROL_PORT, LCD_E_PIN, GPIO_PIN_RESET);

#endif

}
 8000af4:	bf00      	nop
 8000af6:	3708      	adds	r7, #8
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	40010800 	.word	0x40010800

08000b00 <HAL_LCD_Send_Char>:
* Note			- none
*
*/

void HAL_LCD_Send_Char (uint8_t Copy_Char)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b082      	sub	sp, #8
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	4603      	mov	r3, r0
 8000b08:	71fb      	strb	r3, [r7, #7]

#if LCD_Mode == LCD_MODE_8_BIT

	/*Write Commend*/
	MCAL_GPIO_WritePort(LCD_DATA_PORT, Copy_Char);
 8000b0a:	79fb      	ldrb	r3, [r7, #7]
 8000b0c:	b29b      	uxth	r3, r3
 8000b0e:	4619      	mov	r1, r3
 8000b10:	4810      	ldr	r0, [pc, #64]	; (8000b54 <HAL_LCD_Send_Char+0x54>)
 8000b12:	f7ff fefa 	bl	800090a <MCAL_GPIO_WritePort>

	/*RS = 1 -> Data set*/
	MCAL_GPIO_WritePin(LCD_CONTROL_PORT, LCD_RS_PIN, GPIO_PIN_SET);
 8000b16:	2201      	movs	r2, #1
 8000b18:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b1c:	480d      	ldr	r0, [pc, #52]	; (8000b54 <HAL_LCD_Send_Char+0x54>)
 8000b1e:	f7ff fedd 	bl	80008dc <MCAL_GPIO_WritePin>

	/*RW = 0 -> Write operation*/
	MCAL_GPIO_WritePin(LCD_CONTROL_PORT, LCD_RW_PIN, GPIO_PIN_RESET);
 8000b22:	2200      	movs	r2, #0
 8000b24:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b28:	480a      	ldr	r0, [pc, #40]	; (8000b54 <HAL_LCD_Send_Char+0x54>)
 8000b2a:	f7ff fed7 	bl	80008dc <MCAL_GPIO_WritePin>

	/*E = 1*/
	MCAL_GPIO_WritePin(LCD_CONTROL_PORT, LCD_E_PIN,GPIO_PIN_SET);
 8000b2e:	2201      	movs	r2, #1
 8000b30:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b34:	4807      	ldr	r0, [pc, #28]	; (8000b54 <HAL_LCD_Send_Char+0x54>)
 8000b36:	f7ff fed1 	bl	80008dc <MCAL_GPIO_WritePin>
	delay_ms(1);
 8000b3a:	2001      	movs	r0, #1
 8000b3c:	f7ff fef3 	bl	8000926 <delay_ms>
	/*E = 0*/
	MCAL_GPIO_WritePin(LCD_CONTROL_PORT, LCD_E_PIN,GPIO_PIN_RESET);
 8000b40:	2200      	movs	r2, #0
 8000b42:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b46:	4803      	ldr	r0, [pc, #12]	; (8000b54 <HAL_LCD_Send_Char+0x54>)
 8000b48:	f7ff fec8 	bl	80008dc <MCAL_GPIO_WritePin>
    /* E = 0 */
    MCAL_GPIO_WritePin(LCD_CONTROL_PORT, LCD_E_PIN, GPIO_PIN_RESET);

#endif

}
 8000b4c:	bf00      	nop
 8000b4e:	3708      	adds	r7, #8
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	40010800 	.word	0x40010800

08000b58 <HAL_LCD_Send_String>:
* Note			- none
*
*/

void HAL_LCD_Send_String (char* Copy_String)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b084      	sub	sp, #16
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
	uint8_t string_counter =0;
 8000b60:	2300      	movs	r3, #0
 8000b62:	73fb      	strb	r3, [r7, #15]

	while( (Copy_String[string_counter]) != '\0' )
 8000b64:	e013      	b.n	8000b8e <HAL_LCD_Send_String+0x36>
	{
		if(string_counter == 16 )
 8000b66:	7bfb      	ldrb	r3, [r7, #15]
 8000b68:	2b10      	cmp	r3, #16
 8000b6a:	d103      	bne.n	8000b74 <HAL_LCD_Send_String+0x1c>
		{
			HAL_LCD_GOTO_XY(2,0);
 8000b6c:	2100      	movs	r1, #0
 8000b6e:	2002      	movs	r0, #2
 8000b70:	f000 f817 	bl	8000ba2 <HAL_LCD_GOTO_XY>
		}

		HAL_LCD_Send_Char(Copy_String[string_counter]);
 8000b74:	7bfb      	ldrb	r3, [r7, #15]
 8000b76:	687a      	ldr	r2, [r7, #4]
 8000b78:	4413      	add	r3, r2
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f7ff ffbf 	bl	8000b00 <HAL_LCD_Send_Char>
		delay_ms(15);
 8000b82:	200f      	movs	r0, #15
 8000b84:	f7ff fecf 	bl	8000926 <delay_ms>

		string_counter++;
 8000b88:	7bfb      	ldrb	r3, [r7, #15]
 8000b8a:	3301      	adds	r3, #1
 8000b8c:	73fb      	strb	r3, [r7, #15]
	while( (Copy_String[string_counter]) != '\0' )
 8000b8e:	7bfb      	ldrb	r3, [r7, #15]
 8000b90:	687a      	ldr	r2, [r7, #4]
 8000b92:	4413      	add	r3, r2
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d1e5      	bne.n	8000b66 <HAL_LCD_Send_String+0xe>

	}
}
 8000b9a:	bf00      	nop
 8000b9c:	3710      	adds	r7, #16
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}

08000ba2 <HAL_LCD_GOTO_XY>:
* Note			- none
*
*/

void HAL_LCD_GOTO_XY (uint8_t Copy_LineNumber , uint8_t Copy_Position)
{
 8000ba2:	b580      	push	{r7, lr}
 8000ba4:	b082      	sub	sp, #8
 8000ba6:	af00      	add	r7, sp, #0
 8000ba8:	4603      	mov	r3, r0
 8000baa:	460a      	mov	r2, r1
 8000bac:	71fb      	strb	r3, [r7, #7]
 8000bae:	4613      	mov	r3, r2
 8000bb0:	71bb      	strb	r3, [r7, #6]
	if(Copy_Position < 16 && Copy_Position>=0)
 8000bb2:	79bb      	ldrb	r3, [r7, #6]
 8000bb4:	2b0f      	cmp	r3, #15
 8000bb6:	d813      	bhi.n	8000be0 <HAL_LCD_GOTO_XY+0x3e>
	{
		switch(Copy_LineNumber)
 8000bb8:	79fb      	ldrb	r3, [r7, #7]
 8000bba:	2b01      	cmp	r3, #1
 8000bbc:	d002      	beq.n	8000bc4 <HAL_LCD_GOTO_XY+0x22>
 8000bbe:	2b02      	cmp	r3, #2
 8000bc0:	d007      	beq.n	8000bd2 <HAL_LCD_GOTO_XY+0x30>
		{
			case 1:	HAL_LCD_Send_Cmnd(LCD_BEGIN_AT_Line_1 + Copy_Position); 	break;
			case 2:	HAL_LCD_Send_Cmnd(LCD_BEGIN_AT_Line_2 + Copy_Position); 	break;
			default: 	break;
 8000bc2:	e00e      	b.n	8000be2 <HAL_LCD_GOTO_XY+0x40>
			case 1:	HAL_LCD_Send_Cmnd(LCD_BEGIN_AT_Line_1 + Copy_Position); 	break;
 8000bc4:	79bb      	ldrb	r3, [r7, #6]
 8000bc6:	3b80      	subs	r3, #128	; 0x80
 8000bc8:	b2db      	uxtb	r3, r3
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f7ff ff6c 	bl	8000aa8 <HAL_LCD_Send_Cmnd>
 8000bd0:	e007      	b.n	8000be2 <HAL_LCD_GOTO_XY+0x40>
			case 2:	HAL_LCD_Send_Cmnd(LCD_BEGIN_AT_Line_2 + Copy_Position); 	break;
 8000bd2:	79bb      	ldrb	r3, [r7, #6]
 8000bd4:	3b40      	subs	r3, #64	; 0x40
 8000bd6:	b2db      	uxtb	r3, r3
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f7ff ff65 	bl	8000aa8 <HAL_LCD_Send_Cmnd>
 8000bde:	e000      	b.n	8000be2 <HAL_LCD_GOTO_XY+0x40>
		}
	}
	else
		return;
 8000be0:	bf00      	nop

}
 8000be2:	3708      	adds	r7, #8
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}

08000be8 <HAL_LCD_Clean_Screen>:
* Note			- none
*
*/

void HAL_LCD_Clean_Screen(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
	HAL_LCD_Send_Cmnd(Clear_Display);
 8000bec:	2001      	movs	r0, #1
 8000bee:	f7ff ff5b 	bl	8000aa8 <HAL_LCD_Send_Cmnd>
	delay_ms(20);
 8000bf2:	2014      	movs	r0, #20
 8000bf4:	f7ff fe97 	bl	8000926 <delay_ms>
}
 8000bf8:	bf00      	nop
 8000bfa:	bd80      	pop	{r7, pc}

08000bfc <delay>:
#include "MCAL_GPIO.h"
#include "MCAL_EXTI.h"
#include "HAL_LCD.h"

void delay(uint32_t time)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b085      	sub	sp, #20
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
	uint32_t i,j;
	for(i= 0; i< time; i++)
 8000c04:	2300      	movs	r3, #0
 8000c06:	60fb      	str	r3, [r7, #12]
 8000c08:	e00b      	b.n	8000c22 <delay+0x26>
		for(j= 0; j< 255; j++);
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	60bb      	str	r3, [r7, #8]
 8000c0e:	e002      	b.n	8000c16 <delay+0x1a>
 8000c10:	68bb      	ldr	r3, [r7, #8]
 8000c12:	3301      	adds	r3, #1
 8000c14:	60bb      	str	r3, [r7, #8]
 8000c16:	68bb      	ldr	r3, [r7, #8]
 8000c18:	2bfe      	cmp	r3, #254	; 0xfe
 8000c1a:	d9f9      	bls.n	8000c10 <delay+0x14>
	for(i= 0; i< time; i++)
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	3301      	adds	r3, #1
 8000c20:	60fb      	str	r3, [r7, #12]
 8000c22:	68fa      	ldr	r2, [r7, #12]
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	429a      	cmp	r2, r3
 8000c28:	d3ef      	bcc.n	8000c0a <delay+0xe>
}
 8000c2a:	bf00      	nop
 8000c2c:	3714      	adds	r7, #20
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bc80      	pop	{r7}
 8000c32:	4770      	bx	lr

08000c34 <clock_Init>:

void clock_Init(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
	RCC_GPIOA_CLK_EN();
 8000c38:	4b0a      	ldr	r3, [pc, #40]	; (8000c64 <clock_Init+0x30>)
 8000c3a:	699b      	ldr	r3, [r3, #24]
 8000c3c:	4a09      	ldr	r2, [pc, #36]	; (8000c64 <clock_Init+0x30>)
 8000c3e:	f043 0304 	orr.w	r3, r3, #4
 8000c42:	6193      	str	r3, [r2, #24]
	RCC_GPIOB_CLK_EN();
 8000c44:	4b07      	ldr	r3, [pc, #28]	; (8000c64 <clock_Init+0x30>)
 8000c46:	699b      	ldr	r3, [r3, #24]
 8000c48:	4a06      	ldr	r2, [pc, #24]	; (8000c64 <clock_Init+0x30>)
 8000c4a:	f043 0308 	orr.w	r3, r3, #8
 8000c4e:	6193      	str	r3, [r2, #24]
	RCC_AFIO_CLK_EN();
 8000c50:	4b04      	ldr	r3, [pc, #16]	; (8000c64 <clock_Init+0x30>)
 8000c52:	699b      	ldr	r3, [r3, #24]
 8000c54:	4a03      	ldr	r2, [pc, #12]	; (8000c64 <clock_Init+0x30>)
 8000c56:	f043 0301 	orr.w	r3, r3, #1
 8000c5a:	6193      	str	r3, [r2, #24]
}
 8000c5c:	bf00      	nop
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bc80      	pop	{r7}
 8000c62:	4770      	bx	lr
 8000c64:	40021000 	.word	0x40021000

08000c68 <EXTI9_Callback>:

void EXTI9_Callback(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
	HAL_LCD_Send_String("IRQ EXTI9 is Happened _|-");
 8000c6c:	4804      	ldr	r0, [pc, #16]	; (8000c80 <EXTI9_Callback+0x18>)
 8000c6e:	f7ff ff73 	bl	8000b58 <HAL_LCD_Send_String>
	delay(1000);
 8000c72:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c76:	f7ff ffc1 	bl	8000bfc <delay>
}
 8000c7a:	bf00      	nop
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	08000d74 	.word	0x08000d74

08000c84 <main>:

int main(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b086      	sub	sp, #24
 8000c88:	af00      	add	r7, sp, #0
	clock_Init();
 8000c8a:	f7ff ffd3 	bl	8000c34 <clock_Init>
	HAL_LCD_Init();
 8000c8e:	f7ff feed 	bl	8000a6c <HAL_LCD_Init>

	EXTI_PinConfig_t PINCFG;
	PINCFG.EXTI_PIN = EXTI9PB9;
 8000c92:	4a09      	ldr	r2, [pc, #36]	; (8000cb8 <main+0x34>)
 8000c94:	1d3b      	adds	r3, r7, #4
 8000c96:	ca07      	ldmia	r2, {r0, r1, r2}
 8000c98:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	PINCFG.Trigger_Case = EXTI_Trigger_RISING;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	743b      	strb	r3, [r7, #16]
	PINCFG.ISR_EN = EXTI_ISR_Enable;
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	747b      	strb	r3, [r7, #17]
	PINCFG.P_ISR_CallBack = EXTI9_Callback;
 8000ca4:	4b05      	ldr	r3, [pc, #20]	; (8000cbc <main+0x38>)
 8000ca6:	617b      	str	r3, [r7, #20]
	MCAL_EXTI_GPIO_Init(&PINCFG);
 8000ca8:	1d3b      	adds	r3, r7, #4
 8000caa:	4618      	mov	r0, r3
 8000cac:	f7ff fc18 	bl	80004e0 <MCAL_EXTI_GPIO_Init>


	while(1)
	{
		HAL_LCD_Clean_Screen();
 8000cb0:	f7ff ff9a 	bl	8000be8 <HAL_LCD_Clean_Screen>
 8000cb4:	e7fc      	b.n	8000cb0 <main+0x2c>
 8000cb6:	bf00      	nop
 8000cb8:	08000d90 	.word	0x08000d90
 8000cbc:	08000c69 	.word	0x08000c69

08000cc0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000cc0:	480d      	ldr	r0, [pc, #52]	; (8000cf8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000cc2:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000cc4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cc8:	480c      	ldr	r0, [pc, #48]	; (8000cfc <LoopForever+0x6>)
  ldr r1, =_edata
 8000cca:	490d      	ldr	r1, [pc, #52]	; (8000d00 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ccc:	4a0d      	ldr	r2, [pc, #52]	; (8000d04 <LoopForever+0xe>)
  movs r3, #0
 8000cce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cd0:	e002      	b.n	8000cd8 <LoopCopyDataInit>

08000cd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cd6:	3304      	adds	r3, #4

08000cd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cdc:	d3f9      	bcc.n	8000cd2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cde:	4a0a      	ldr	r2, [pc, #40]	; (8000d08 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ce0:	4c0a      	ldr	r4, [pc, #40]	; (8000d0c <LoopForever+0x16>)
  movs r3, #0
 8000ce2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ce4:	e001      	b.n	8000cea <LoopFillZerobss>

08000ce6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ce6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ce8:	3204      	adds	r2, #4

08000cea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cec:	d3fb      	bcc.n	8000ce6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000cee:	f000 f811 	bl	8000d14 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000cf2:	f7ff ffc7 	bl	8000c84 <main>

08000cf6 <LoopForever>:

LoopForever:
    b LoopForever
 8000cf6:	e7fe      	b.n	8000cf6 <LoopForever>
  ldr   r0, =_estack
 8000cf8:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000cfc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d00:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000d04:	08000da4 	.word	0x08000da4
  ldr r2, =_sbss
 8000d08:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000d0c:	2000005c 	.word	0x2000005c

08000d10 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d10:	e7fe      	b.n	8000d10 <ADC1_2_IRQHandler>
	...

08000d14 <__libc_init_array>:
 8000d14:	b570      	push	{r4, r5, r6, lr}
 8000d16:	2500      	movs	r5, #0
 8000d18:	4e0c      	ldr	r6, [pc, #48]	; (8000d4c <__libc_init_array+0x38>)
 8000d1a:	4c0d      	ldr	r4, [pc, #52]	; (8000d50 <__libc_init_array+0x3c>)
 8000d1c:	1ba4      	subs	r4, r4, r6
 8000d1e:	10a4      	asrs	r4, r4, #2
 8000d20:	42a5      	cmp	r5, r4
 8000d22:	d109      	bne.n	8000d38 <__libc_init_array+0x24>
 8000d24:	f000 f81a 	bl	8000d5c <_init>
 8000d28:	2500      	movs	r5, #0
 8000d2a:	4e0a      	ldr	r6, [pc, #40]	; (8000d54 <__libc_init_array+0x40>)
 8000d2c:	4c0a      	ldr	r4, [pc, #40]	; (8000d58 <__libc_init_array+0x44>)
 8000d2e:	1ba4      	subs	r4, r4, r6
 8000d30:	10a4      	asrs	r4, r4, #2
 8000d32:	42a5      	cmp	r5, r4
 8000d34:	d105      	bne.n	8000d42 <__libc_init_array+0x2e>
 8000d36:	bd70      	pop	{r4, r5, r6, pc}
 8000d38:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000d3c:	4798      	blx	r3
 8000d3e:	3501      	adds	r5, #1
 8000d40:	e7ee      	b.n	8000d20 <__libc_init_array+0xc>
 8000d42:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000d46:	4798      	blx	r3
 8000d48:	3501      	adds	r5, #1
 8000d4a:	e7f2      	b.n	8000d32 <__libc_init_array+0x1e>
 8000d4c:	08000d9c 	.word	0x08000d9c
 8000d50:	08000d9c 	.word	0x08000d9c
 8000d54:	08000d9c 	.word	0x08000d9c
 8000d58:	08000da0 	.word	0x08000da0

08000d5c <_init>:
 8000d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d5e:	bf00      	nop
 8000d60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d62:	bc08      	pop	{r3}
 8000d64:	469e      	mov	lr, r3
 8000d66:	4770      	bx	lr

08000d68 <_fini>:
 8000d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d6a:	bf00      	nop
 8000d6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d6e:	bc08      	pop	{r3}
 8000d70:	469e      	mov	lr, r3
 8000d72:	4770      	bx	lr
