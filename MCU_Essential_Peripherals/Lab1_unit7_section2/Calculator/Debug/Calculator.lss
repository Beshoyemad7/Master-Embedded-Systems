
Calculator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000013f2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000032  00800060  000013f2  00001486  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000043  00800092  00800092  000014b8  2**0
                  ALLOC
  3 .stab         00001aa0  00000000  00000000  000014b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000f8a  00000000  00000000  00002f58  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 ef       	ldi	r30, 0xF2	; 242
      68:	f3 e1       	ldi	r31, 0x13	; 19
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 39       	cpi	r26, 0x92	; 146
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a2 e9       	ldi	r26, 0x92	; 146
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 3d       	cpi	r26, 0xD5	; 213
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 49 09 	call	0x1292	; 0x1292 <main>
      8a:	0c 94 f7 09 	jmp	0x13ee	; 0x13ee <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <delay_ms>:
#include "MCAL_DIO.h"
#include "HAL_LCD.h"
#include "HAL_LCD_Private.h"


void delay_ms(uint32_t time) {
      92:	df 93       	push	r29
      94:	cf 93       	push	r28
      96:	cd b7       	in	r28, 0x3d	; 61
      98:	de b7       	in	r29, 0x3e	; 62
      9a:	2c 97       	sbiw	r28, 0x0c	; 12
      9c:	0f b6       	in	r0, 0x3f	; 63
      9e:	f8 94       	cli
      a0:	de bf       	out	0x3e, r29	; 62
      a2:	0f be       	out	0x3f, r0	; 63
      a4:	cd bf       	out	0x3d, r28	; 61
      a6:	69 87       	std	Y+9, r22	; 0x09
      a8:	7a 87       	std	Y+10, r23	; 0x0a
      aa:	8b 87       	std	Y+11, r24	; 0x0b
      ac:	9c 87       	std	Y+12, r25	; 0x0c
	uint32_t i, j;
	for (i = 0; i < time; i++)
      ae:	1d 82       	std	Y+5, r1	; 0x05
      b0:	1e 82       	std	Y+6, r1	; 0x06
      b2:	1f 82       	std	Y+7, r1	; 0x07
      b4:	18 86       	std	Y+8, r1	; 0x08
      b6:	24 c0       	rjmp	.+72     	; 0x100 <delay_ms+0x6e>
		for (j = 0; j < 255; j++);
      b8:	19 82       	std	Y+1, r1	; 0x01
      ba:	1a 82       	std	Y+2, r1	; 0x02
      bc:	1b 82       	std	Y+3, r1	; 0x03
      be:	1c 82       	std	Y+4, r1	; 0x04
      c0:	0b c0       	rjmp	.+22     	; 0xd8 <delay_ms+0x46>
      c2:	89 81       	ldd	r24, Y+1	; 0x01
      c4:	9a 81       	ldd	r25, Y+2	; 0x02
      c6:	ab 81       	ldd	r26, Y+3	; 0x03
      c8:	bc 81       	ldd	r27, Y+4	; 0x04
      ca:	01 96       	adiw	r24, 0x01	; 1
      cc:	a1 1d       	adc	r26, r1
      ce:	b1 1d       	adc	r27, r1
      d0:	89 83       	std	Y+1, r24	; 0x01
      d2:	9a 83       	std	Y+2, r25	; 0x02
      d4:	ab 83       	std	Y+3, r26	; 0x03
      d6:	bc 83       	std	Y+4, r27	; 0x04
      d8:	89 81       	ldd	r24, Y+1	; 0x01
      da:	9a 81       	ldd	r25, Y+2	; 0x02
      dc:	ab 81       	ldd	r26, Y+3	; 0x03
      de:	bc 81       	ldd	r27, Y+4	; 0x04
      e0:	8f 3f       	cpi	r24, 0xFF	; 255
      e2:	91 05       	cpc	r25, r1
      e4:	a1 05       	cpc	r26, r1
      e6:	b1 05       	cpc	r27, r1
      e8:	60 f3       	brcs	.-40     	; 0xc2 <delay_ms+0x30>
#include "HAL_LCD_Private.h"


void delay_ms(uint32_t time) {
	uint32_t i, j;
	for (i = 0; i < time; i++)
      ea:	8d 81       	ldd	r24, Y+5	; 0x05
      ec:	9e 81       	ldd	r25, Y+6	; 0x06
      ee:	af 81       	ldd	r26, Y+7	; 0x07
      f0:	b8 85       	ldd	r27, Y+8	; 0x08
      f2:	01 96       	adiw	r24, 0x01	; 1
      f4:	a1 1d       	adc	r26, r1
      f6:	b1 1d       	adc	r27, r1
      f8:	8d 83       	std	Y+5, r24	; 0x05
      fa:	9e 83       	std	Y+6, r25	; 0x06
      fc:	af 83       	std	Y+7, r26	; 0x07
      fe:	b8 87       	std	Y+8, r27	; 0x08
     100:	2d 81       	ldd	r18, Y+5	; 0x05
     102:	3e 81       	ldd	r19, Y+6	; 0x06
     104:	4f 81       	ldd	r20, Y+7	; 0x07
     106:	58 85       	ldd	r21, Y+8	; 0x08
     108:	89 85       	ldd	r24, Y+9	; 0x09
     10a:	9a 85       	ldd	r25, Y+10	; 0x0a
     10c:	ab 85       	ldd	r26, Y+11	; 0x0b
     10e:	bc 85       	ldd	r27, Y+12	; 0x0c
     110:	28 17       	cp	r18, r24
     112:	39 07       	cpc	r19, r25
     114:	4a 07       	cpc	r20, r26
     116:	5b 07       	cpc	r21, r27
     118:	78 f2       	brcs	.-98     	; 0xb8 <delay_ms+0x26>
		for (j = 0; j < 255; j++);
}
     11a:	2c 96       	adiw	r28, 0x0c	; 12
     11c:	0f b6       	in	r0, 0x3f	; 63
     11e:	f8 94       	cli
     120:	de bf       	out	0x3e, r29	; 62
     122:	0f be       	out	0x3f, r0	; 63
     124:	cd bf       	out	0x3d, r28	; 61
     126:	cf 91       	pop	r28
     128:	df 91       	pop	r29
     12a:	08 95       	ret

0000012c <GPIO_LCD_init>:
* Note			- none
*
*/

void GPIO_LCD_init(void)
{
     12c:	df 93       	push	r29
     12e:	cf 93       	push	r28
     130:	00 d0       	rcall	.+0      	; 0x132 <GPIO_LCD_init+0x6>
     132:	cd b7       	in	r28, 0x3d	; 61
     134:	de b7       	in	r29, 0x3e	; 62
	DIO_PinConfig_t pinConfig;

	// Control pins
	pinConfig.DIO_PinNumber = LCD_RS_PIN;
     136:	81 e0       	ldi	r24, 0x01	; 1
     138:	89 83       	std	Y+1, r24	; 0x01
	pinConfig.DIO_PinMode = DIO_MODE_OUTPUT;
     13a:	82 e0       	ldi	r24, 0x02	; 2
     13c:	8a 83       	std	Y+2, r24	; 0x02
	MCAL_DIO_Init(LCD_CONTROL_PORT, &pinConfig);
     13e:	82 e0       	ldi	r24, 0x02	; 2
     140:	9e 01       	movw	r18, r28
     142:	2f 5f       	subi	r18, 0xFF	; 255
     144:	3f 4f       	sbci	r19, 0xFF	; 255
     146:	b9 01       	movw	r22, r18
     148:	0e 94 c7 03 	call	0x78e	; 0x78e <MCAL_DIO_Init>

	pinConfig.DIO_PinNumber = LCD_RW_PIN;
     14c:	82 e0       	ldi	r24, 0x02	; 2
     14e:	89 83       	std	Y+1, r24	; 0x01
	pinConfig.DIO_PinMode = DIO_MODE_OUTPUT;
     150:	82 e0       	ldi	r24, 0x02	; 2
     152:	8a 83       	std	Y+2, r24	; 0x02
	MCAL_DIO_Init(LCD_CONTROL_PORT, &pinConfig);
     154:	82 e0       	ldi	r24, 0x02	; 2
     156:	9e 01       	movw	r18, r28
     158:	2f 5f       	subi	r18, 0xFF	; 255
     15a:	3f 4f       	sbci	r19, 0xFF	; 255
     15c:	b9 01       	movw	r22, r18
     15e:	0e 94 c7 03 	call	0x78e	; 0x78e <MCAL_DIO_Init>

	pinConfig.DIO_PinNumber = LCD_E_PIN;
     162:	84 e0       	ldi	r24, 0x04	; 4
     164:	89 83       	std	Y+1, r24	; 0x01
	pinConfig.DIO_PinMode = DIO_MODE_OUTPUT;
     166:	82 e0       	ldi	r24, 0x02	; 2
     168:	8a 83       	std	Y+2, r24	; 0x02
	MCAL_DIO_Init(LCD_CONTROL_PORT, &pinConfig);
     16a:	82 e0       	ldi	r24, 0x02	; 2
     16c:	9e 01       	movw	r18, r28
     16e:	2f 5f       	subi	r18, 0xFF	; 255
     170:	3f 4f       	sbci	r19, 0xFF	; 255
     172:	b9 01       	movw	r22, r18
     174:	0e 94 c7 03 	call	0x78e	; 0x78e <MCAL_DIO_Init>

	// Data	pins
	pinConfig.DIO_PinNumber = DIO_PIN_0;
     178:	81 e0       	ldi	r24, 0x01	; 1
     17a:	89 83       	std	Y+1, r24	; 0x01
	pinConfig.DIO_PinMode = DIO_MODE_OUTPUT;
     17c:	82 e0       	ldi	r24, 0x02	; 2
     17e:	8a 83       	std	Y+2, r24	; 0x02
	MCAL_DIO_Init(LCD_DATA_PORT, &pinConfig);
     180:	80 e0       	ldi	r24, 0x00	; 0
     182:	9e 01       	movw	r18, r28
     184:	2f 5f       	subi	r18, 0xFF	; 255
     186:	3f 4f       	sbci	r19, 0xFF	; 255
     188:	b9 01       	movw	r22, r18
     18a:	0e 94 c7 03 	call	0x78e	; 0x78e <MCAL_DIO_Init>

	pinConfig.DIO_PinNumber = DIO_PIN_1;
     18e:	82 e0       	ldi	r24, 0x02	; 2
     190:	89 83       	std	Y+1, r24	; 0x01
	pinConfig.DIO_PinMode = DIO_MODE_OUTPUT;
     192:	82 e0       	ldi	r24, 0x02	; 2
     194:	8a 83       	std	Y+2, r24	; 0x02
	MCAL_DIO_Init(LCD_DATA_PORT, &pinConfig);
     196:	80 e0       	ldi	r24, 0x00	; 0
     198:	9e 01       	movw	r18, r28
     19a:	2f 5f       	subi	r18, 0xFF	; 255
     19c:	3f 4f       	sbci	r19, 0xFF	; 255
     19e:	b9 01       	movw	r22, r18
     1a0:	0e 94 c7 03 	call	0x78e	; 0x78e <MCAL_DIO_Init>

	pinConfig.DIO_PinNumber = DIO_PIN_2;
     1a4:	84 e0       	ldi	r24, 0x04	; 4
     1a6:	89 83       	std	Y+1, r24	; 0x01
	pinConfig.DIO_PinMode = DIO_MODE_OUTPUT;
     1a8:	82 e0       	ldi	r24, 0x02	; 2
     1aa:	8a 83       	std	Y+2, r24	; 0x02
	MCAL_DIO_Init(LCD_DATA_PORT, &pinConfig);
     1ac:	80 e0       	ldi	r24, 0x00	; 0
     1ae:	9e 01       	movw	r18, r28
     1b0:	2f 5f       	subi	r18, 0xFF	; 255
     1b2:	3f 4f       	sbci	r19, 0xFF	; 255
     1b4:	b9 01       	movw	r22, r18
     1b6:	0e 94 c7 03 	call	0x78e	; 0x78e <MCAL_DIO_Init>

	pinConfig.DIO_PinNumber = DIO_PIN_3;
     1ba:	88 e0       	ldi	r24, 0x08	; 8
     1bc:	89 83       	std	Y+1, r24	; 0x01
	pinConfig.DIO_PinMode = DIO_MODE_OUTPUT;
     1be:	82 e0       	ldi	r24, 0x02	; 2
     1c0:	8a 83       	std	Y+2, r24	; 0x02
	MCAL_DIO_Init(LCD_DATA_PORT, &pinConfig);
     1c2:	80 e0       	ldi	r24, 0x00	; 0
     1c4:	9e 01       	movw	r18, r28
     1c6:	2f 5f       	subi	r18, 0xFF	; 255
     1c8:	3f 4f       	sbci	r19, 0xFF	; 255
     1ca:	b9 01       	movw	r22, r18
     1cc:	0e 94 c7 03 	call	0x78e	; 0x78e <MCAL_DIO_Init>

	pinConfig.DIO_PinNumber = DIO_PIN_4;
     1d0:	80 e1       	ldi	r24, 0x10	; 16
     1d2:	89 83       	std	Y+1, r24	; 0x01
	pinConfig.DIO_PinMode = DIO_MODE_OUTPUT;
     1d4:	82 e0       	ldi	r24, 0x02	; 2
     1d6:	8a 83       	std	Y+2, r24	; 0x02
	MCAL_DIO_Init(LCD_DATA_PORT, &pinConfig);
     1d8:	80 e0       	ldi	r24, 0x00	; 0
     1da:	9e 01       	movw	r18, r28
     1dc:	2f 5f       	subi	r18, 0xFF	; 255
     1de:	3f 4f       	sbci	r19, 0xFF	; 255
     1e0:	b9 01       	movw	r22, r18
     1e2:	0e 94 c7 03 	call	0x78e	; 0x78e <MCAL_DIO_Init>

	pinConfig.DIO_PinNumber = DIO_PIN_5;
     1e6:	80 e2       	ldi	r24, 0x20	; 32
     1e8:	89 83       	std	Y+1, r24	; 0x01
	pinConfig.DIO_PinMode = DIO_MODE_OUTPUT;
     1ea:	82 e0       	ldi	r24, 0x02	; 2
     1ec:	8a 83       	std	Y+2, r24	; 0x02
	MCAL_DIO_Init(LCD_DATA_PORT, &pinConfig);
     1ee:	80 e0       	ldi	r24, 0x00	; 0
     1f0:	9e 01       	movw	r18, r28
     1f2:	2f 5f       	subi	r18, 0xFF	; 255
     1f4:	3f 4f       	sbci	r19, 0xFF	; 255
     1f6:	b9 01       	movw	r22, r18
     1f8:	0e 94 c7 03 	call	0x78e	; 0x78e <MCAL_DIO_Init>

	pinConfig.DIO_PinNumber = DIO_PIN_6;
     1fc:	80 e4       	ldi	r24, 0x40	; 64
     1fe:	89 83       	std	Y+1, r24	; 0x01
	pinConfig.DIO_PinMode = DIO_MODE_OUTPUT;
     200:	82 e0       	ldi	r24, 0x02	; 2
     202:	8a 83       	std	Y+2, r24	; 0x02
	MCAL_DIO_Init(LCD_DATA_PORT, &pinConfig);
     204:	80 e0       	ldi	r24, 0x00	; 0
     206:	9e 01       	movw	r18, r28
     208:	2f 5f       	subi	r18, 0xFF	; 255
     20a:	3f 4f       	sbci	r19, 0xFF	; 255
     20c:	b9 01       	movw	r22, r18
     20e:	0e 94 c7 03 	call	0x78e	; 0x78e <MCAL_DIO_Init>

	pinConfig.DIO_PinNumber = DIO_PIN_7;
     212:	80 e8       	ldi	r24, 0x80	; 128
     214:	89 83       	std	Y+1, r24	; 0x01
	pinConfig.DIO_PinMode = DIO_MODE_OUTPUT;
     216:	82 e0       	ldi	r24, 0x02	; 2
     218:	8a 83       	std	Y+2, r24	; 0x02
	MCAL_DIO_Init(LCD_DATA_PORT, &pinConfig);
     21a:	80 e0       	ldi	r24, 0x00	; 0
     21c:	9e 01       	movw	r18, r28
     21e:	2f 5f       	subi	r18, 0xFF	; 255
     220:	3f 4f       	sbci	r19, 0xFF	; 255
     222:	b9 01       	movw	r22, r18
     224:	0e 94 c7 03 	call	0x78e	; 0x78e <MCAL_DIO_Init>

}
     228:	0f 90       	pop	r0
     22a:	0f 90       	pop	r0
     22c:	cf 91       	pop	r28
     22e:	df 91       	pop	r29
     230:	08 95       	ret

00000232 <HAL_LCD_Init>:
* Note			- none
*
*/

void HAL_LCD_Init(void)
{
     232:	df 93       	push	r29
     234:	cf 93       	push	r28
     236:	cd b7       	in	r28, 0x3d	; 61
     238:	de b7       	in	r29, 0x3e	; 62
	delay_ms(40);
     23a:	68 e2       	ldi	r22, 0x28	; 40
     23c:	70 e0       	ldi	r23, 0x00	; 0
     23e:	80 e0       	ldi	r24, 0x00	; 0
     240:	90 e0       	ldi	r25, 0x00	; 0
     242:	0e 94 49 00 	call	0x92	; 0x92 <delay_ms>
	GPIO_LCD_init();
     246:	0e 94 96 00 	call	0x12c	; 0x12c <GPIO_LCD_init>

#if LCD_Mode == LCD_MODE_8_BIT

	/*Function Set*/
	HAL_LCD_Send_Cmnd(LCD_8_BIT_2_LINE_DOT_5_7);
     24a:	88 e3       	ldi	r24, 0x38	; 56
     24c:	0e 94 46 01 	call	0x28c	; 0x28c <HAL_LCD_Send_Cmnd>
	delay_ms(5);
     250:	65 e0       	ldi	r22, 0x05	; 5
     252:	70 e0       	ldi	r23, 0x00	; 0
     254:	80 e0       	ldi	r24, 0x00	; 0
     256:	90 e0       	ldi	r25, 0x00	; 0
     258:	0e 94 49 00 	call	0x92	; 0x92 <delay_ms>
	delay_ms(2);


#endif

	HAL_LCD_Send_Cmnd(Display_ON_Cursor_BLINKING);
     25c:	8f e0       	ldi	r24, 0x0F	; 15
     25e:	0e 94 46 01 	call	0x28c	; 0x28c <HAL_LCD_Send_Cmnd>
	delay_ms(2);
     262:	62 e0       	ldi	r22, 0x02	; 2
     264:	70 e0       	ldi	r23, 0x00	; 0
     266:	80 e0       	ldi	r24, 0x00	; 0
     268:	90 e0       	ldi	r25, 0x00	; 0
     26a:	0e 94 49 00 	call	0x92	; 0x92 <delay_ms>
	HAL_LCD_Send_Cmnd(Clear_Display);
     26e:	81 e0       	ldi	r24, 0x01	; 1
     270:	0e 94 46 01 	call	0x28c	; 0x28c <HAL_LCD_Send_Cmnd>
	delay_ms(2);
     274:	62 e0       	ldi	r22, 0x02	; 2
     276:	70 e0       	ldi	r23, 0x00	; 0
     278:	80 e0       	ldi	r24, 0x00	; 0
     27a:	90 e0       	ldi	r25, 0x00	; 0
     27c:	0e 94 49 00 	call	0x92	; 0x92 <delay_ms>
	HAL_LCD_Send_Cmnd(Entry_Mode);
     280:	86 e0       	ldi	r24, 0x06	; 6
     282:	0e 94 46 01 	call	0x28c	; 0x28c <HAL_LCD_Send_Cmnd>

}
     286:	cf 91       	pop	r28
     288:	df 91       	pop	r29
     28a:	08 95       	ret

0000028c <HAL_LCD_Send_Cmnd>:
* Note			- none
*
*/

void HAL_LCD_Send_Cmnd(uint8_t Copy_Cmnd)
{
     28c:	df 93       	push	r29
     28e:	cf 93       	push	r28
     290:	0f 92       	push	r0
     292:	cd b7       	in	r28, 0x3d	; 61
     294:	de b7       	in	r29, 0x3e	; 62
     296:	89 83       	std	Y+1, r24	; 0x01

#if LCD_Mode == LCD_MODE_8_BIT

	/*Send Commend*/
	MCAL_DIO_WritePort(LCD_DATA_PORT, Copy_Cmnd);
     298:	80 e0       	ldi	r24, 0x00	; 0
     29a:	69 81       	ldd	r22, Y+1	; 0x01
     29c:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <MCAL_DIO_WritePort>

	/*RS = 0 -> Instruction set*/
	MCAL_DIO_WritePin(LCD_CONTROL_PORT, LCD_RS_PIN, DIO_PIN_RESET);
     2a0:	82 e0       	ldi	r24, 0x02	; 2
     2a2:	61 e0       	ldi	r22, 0x01	; 1
     2a4:	40 e0       	ldi	r20, 0x00	; 0
     2a6:	0e 94 54 05 	call	0xaa8	; 0xaa8 <MCAL_DIO_WritePin>

	/*RW = 0 -> Write operation*/
	MCAL_DIO_WritePin(LCD_CONTROL_PORT, LCD_RW_PIN, DIO_PIN_RESET);
     2aa:	82 e0       	ldi	r24, 0x02	; 2
     2ac:	62 e0       	ldi	r22, 0x02	; 2
     2ae:	40 e0       	ldi	r20, 0x00	; 0
     2b0:	0e 94 54 05 	call	0xaa8	; 0xaa8 <MCAL_DIO_WritePin>

	/*E = 1*/
	MCAL_DIO_WritePin(LCD_CONTROL_PORT, LCD_E_PIN,DIO_PIN_SET);
     2b4:	82 e0       	ldi	r24, 0x02	; 2
     2b6:	64 e0       	ldi	r22, 0x04	; 4
     2b8:	41 e0       	ldi	r20, 0x01	; 1
     2ba:	0e 94 54 05 	call	0xaa8	; 0xaa8 <MCAL_DIO_WritePin>
	delay_ms(1);
     2be:	61 e0       	ldi	r22, 0x01	; 1
     2c0:	70 e0       	ldi	r23, 0x00	; 0
     2c2:	80 e0       	ldi	r24, 0x00	; 0
     2c4:	90 e0       	ldi	r25, 0x00	; 0
     2c6:	0e 94 49 00 	call	0x92	; 0x92 <delay_ms>
	/*E = 0*/
	MCAL_DIO_WritePin(LCD_CONTROL_PORT, LCD_E_PIN,DIO_PIN_RESET);
     2ca:	82 e0       	ldi	r24, 0x02	; 2
     2cc:	64 e0       	ldi	r22, 0x04	; 4
     2ce:	40 e0       	ldi	r20, 0x00	; 0
     2d0:	0e 94 54 05 	call	0xaa8	; 0xaa8 <MCAL_DIO_WritePin>
    /*E = 0 */
    MCAL_DIO_WritePin(LCD_CONTROL_PORT, LCD_E_PIN, DIO_PIN_RESET);

#endif

}
     2d4:	0f 90       	pop	r0
     2d6:	cf 91       	pop	r28
     2d8:	df 91       	pop	r29
     2da:	08 95       	ret

000002dc <HAL_LCD_Send_Char>:
* Note			- none
*
*/

void HAL_LCD_Send_Char (uint8_t Copy_Char)
{
     2dc:	df 93       	push	r29
     2de:	cf 93       	push	r28
     2e0:	0f 92       	push	r0
     2e2:	cd b7       	in	r28, 0x3d	; 61
     2e4:	de b7       	in	r29, 0x3e	; 62
     2e6:	89 83       	std	Y+1, r24	; 0x01

#if LCD_Mode == LCD_MODE_8_BIT

	/*Write Commend*/
	MCAL_DIO_WritePort(LCD_DATA_PORT, Copy_Char);
     2e8:	80 e0       	ldi	r24, 0x00	; 0
     2ea:	69 81       	ldd	r22, Y+1	; 0x01
     2ec:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <MCAL_DIO_WritePort>

	/*RS = 1 -> Data set*/
	MCAL_DIO_WritePin(LCD_CONTROL_PORT, LCD_RS_PIN, DIO_PIN_SET);
     2f0:	82 e0       	ldi	r24, 0x02	; 2
     2f2:	61 e0       	ldi	r22, 0x01	; 1
     2f4:	41 e0       	ldi	r20, 0x01	; 1
     2f6:	0e 94 54 05 	call	0xaa8	; 0xaa8 <MCAL_DIO_WritePin>

	/*RW = 0 -> Write operation*/
	MCAL_DIO_WritePin(LCD_CONTROL_PORT, LCD_RW_PIN, DIO_PIN_RESET);
     2fa:	82 e0       	ldi	r24, 0x02	; 2
     2fc:	62 e0       	ldi	r22, 0x02	; 2
     2fe:	40 e0       	ldi	r20, 0x00	; 0
     300:	0e 94 54 05 	call	0xaa8	; 0xaa8 <MCAL_DIO_WritePin>

	/*E = 1*/
	MCAL_DIO_WritePin(LCD_CONTROL_PORT, LCD_E_PIN,DIO_PIN_SET);
     304:	82 e0       	ldi	r24, 0x02	; 2
     306:	64 e0       	ldi	r22, 0x04	; 4
     308:	41 e0       	ldi	r20, 0x01	; 1
     30a:	0e 94 54 05 	call	0xaa8	; 0xaa8 <MCAL_DIO_WritePin>
	delay_ms(1);
     30e:	61 e0       	ldi	r22, 0x01	; 1
     310:	70 e0       	ldi	r23, 0x00	; 0
     312:	80 e0       	ldi	r24, 0x00	; 0
     314:	90 e0       	ldi	r25, 0x00	; 0
     316:	0e 94 49 00 	call	0x92	; 0x92 <delay_ms>
	/*E = 0*/
	MCAL_DIO_WritePin(LCD_CONTROL_PORT, LCD_E_PIN,DIO_PIN_RESET);
     31a:	82 e0       	ldi	r24, 0x02	; 2
     31c:	64 e0       	ldi	r22, 0x04	; 4
     31e:	40 e0       	ldi	r20, 0x00	; 0
     320:	0e 94 54 05 	call	0xaa8	; 0xaa8 <MCAL_DIO_WritePin>
    /* E = 0 */
    MCAL_DIO_WritePin(LCD_CONTROL_PORT, LCD_E_PIN, DIO_PIN_RESET);

#endif

}
     324:	0f 90       	pop	r0
     326:	cf 91       	pop	r28
     328:	df 91       	pop	r29
     32a:	08 95       	ret

0000032c <HAL_LCD_Send_String>:
* Note			- none
*
*/

void HAL_LCD_Send_String (char* Copy_String)
{
     32c:	df 93       	push	r29
     32e:	cf 93       	push	r28
     330:	00 d0       	rcall	.+0      	; 0x332 <HAL_LCD_Send_String+0x6>
     332:	0f 92       	push	r0
     334:	cd b7       	in	r28, 0x3d	; 61
     336:	de b7       	in	r29, 0x3e	; 62
     338:	9b 83       	std	Y+3, r25	; 0x03
     33a:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t string_counter =0;
     33c:	19 82       	std	Y+1, r1	; 0x01
     33e:	1b c0       	rjmp	.+54     	; 0x376 <HAL_LCD_Send_String+0x4a>

	while( (Copy_String[string_counter]) != '\0' )
	{
		if(string_counter == 16 )
     340:	89 81       	ldd	r24, Y+1	; 0x01
     342:	80 31       	cpi	r24, 0x10	; 16
     344:	21 f4       	brne	.+8      	; 0x34e <HAL_LCD_Send_String+0x22>
		{
			HAL_LCD_GOTO_XY(2,0);
     346:	82 e0       	ldi	r24, 0x02	; 2
     348:	60 e0       	ldi	r22, 0x00	; 0
     34a:	0e 94 cc 01 	call	0x398	; 0x398 <HAL_LCD_GOTO_XY>
		}

		HAL_LCD_Send_Char(Copy_String[string_counter]);
     34e:	89 81       	ldd	r24, Y+1	; 0x01
     350:	28 2f       	mov	r18, r24
     352:	30 e0       	ldi	r19, 0x00	; 0
     354:	8a 81       	ldd	r24, Y+2	; 0x02
     356:	9b 81       	ldd	r25, Y+3	; 0x03
     358:	fc 01       	movw	r30, r24
     35a:	e2 0f       	add	r30, r18
     35c:	f3 1f       	adc	r31, r19
     35e:	80 81       	ld	r24, Z
     360:	0e 94 6e 01 	call	0x2dc	; 0x2dc <HAL_LCD_Send_Char>
		delay_ms(15);
     364:	6f e0       	ldi	r22, 0x0F	; 15
     366:	70 e0       	ldi	r23, 0x00	; 0
     368:	80 e0       	ldi	r24, 0x00	; 0
     36a:	90 e0       	ldi	r25, 0x00	; 0
     36c:	0e 94 49 00 	call	0x92	; 0x92 <delay_ms>

		string_counter++;
     370:	89 81       	ldd	r24, Y+1	; 0x01
     372:	8f 5f       	subi	r24, 0xFF	; 255
     374:	89 83       	std	Y+1, r24	; 0x01

void HAL_LCD_Send_String (char* Copy_String)
{
	uint8_t string_counter =0;

	while( (Copy_String[string_counter]) != '\0' )
     376:	89 81       	ldd	r24, Y+1	; 0x01
     378:	28 2f       	mov	r18, r24
     37a:	30 e0       	ldi	r19, 0x00	; 0
     37c:	8a 81       	ldd	r24, Y+2	; 0x02
     37e:	9b 81       	ldd	r25, Y+3	; 0x03
     380:	fc 01       	movw	r30, r24
     382:	e2 0f       	add	r30, r18
     384:	f3 1f       	adc	r31, r19
     386:	80 81       	ld	r24, Z
     388:	88 23       	and	r24, r24
     38a:	d1 f6       	brne	.-76     	; 0x340 <HAL_LCD_Send_String+0x14>
		delay_ms(15);

		string_counter++;

	}
}
     38c:	0f 90       	pop	r0
     38e:	0f 90       	pop	r0
     390:	0f 90       	pop	r0
     392:	cf 91       	pop	r28
     394:	df 91       	pop	r29
     396:	08 95       	ret

00000398 <HAL_LCD_GOTO_XY>:
* Note			- none
*
*/

void HAL_LCD_GOTO_XY (uint8_t Copy_LineNumber , uint8_t Copy_Position)
{
     398:	df 93       	push	r29
     39a:	cf 93       	push	r28
     39c:	00 d0       	rcall	.+0      	; 0x39e <HAL_LCD_GOTO_XY+0x6>
     39e:	00 d0       	rcall	.+0      	; 0x3a0 <HAL_LCD_GOTO_XY+0x8>
     3a0:	cd b7       	in	r28, 0x3d	; 61
     3a2:	de b7       	in	r29, 0x3e	; 62
     3a4:	89 83       	std	Y+1, r24	; 0x01
     3a6:	6a 83       	std	Y+2, r22	; 0x02
	if(Copy_Position < 16 && Copy_Position>=0)
     3a8:	8a 81       	ldd	r24, Y+2	; 0x02
     3aa:	80 31       	cpi	r24, 0x10	; 16
     3ac:	c8 f4       	brcc	.+50     	; 0x3e0 <HAL_LCD_GOTO_XY+0x48>
	{
		switch(Copy_LineNumber)
     3ae:	89 81       	ldd	r24, Y+1	; 0x01
     3b0:	28 2f       	mov	r18, r24
     3b2:	30 e0       	ldi	r19, 0x00	; 0
     3b4:	3c 83       	std	Y+4, r19	; 0x04
     3b6:	2b 83       	std	Y+3, r18	; 0x03
     3b8:	8b 81       	ldd	r24, Y+3	; 0x03
     3ba:	9c 81       	ldd	r25, Y+4	; 0x04
     3bc:	81 30       	cpi	r24, 0x01	; 1
     3be:	91 05       	cpc	r25, r1
     3c0:	31 f0       	breq	.+12     	; 0x3ce <HAL_LCD_GOTO_XY+0x36>
     3c2:	2b 81       	ldd	r18, Y+3	; 0x03
     3c4:	3c 81       	ldd	r19, Y+4	; 0x04
     3c6:	22 30       	cpi	r18, 0x02	; 2
     3c8:	31 05       	cpc	r19, r1
     3ca:	31 f0       	breq	.+12     	; 0x3d8 <HAL_LCD_GOTO_XY+0x40>
     3cc:	09 c0       	rjmp	.+18     	; 0x3e0 <HAL_LCD_GOTO_XY+0x48>
		{
			case 1:	HAL_LCD_Send_Cmnd(LCD_BEGIN_AT_Line_1 + Copy_Position); 	break;
     3ce:	8a 81       	ldd	r24, Y+2	; 0x02
     3d0:	80 58       	subi	r24, 0x80	; 128
     3d2:	0e 94 46 01 	call	0x28c	; 0x28c <HAL_LCD_Send_Cmnd>
     3d6:	04 c0       	rjmp	.+8      	; 0x3e0 <HAL_LCD_GOTO_XY+0x48>
			case 2:	HAL_LCD_Send_Cmnd(LCD_BEGIN_AT_Line_2 + Copy_Position); 	break;
     3d8:	8a 81       	ldd	r24, Y+2	; 0x02
     3da:	80 54       	subi	r24, 0x40	; 64
     3dc:	0e 94 46 01 	call	0x28c	; 0x28c <HAL_LCD_Send_Cmnd>
		}
	}
	else
		return;

}
     3e0:	0f 90       	pop	r0
     3e2:	0f 90       	pop	r0
     3e4:	0f 90       	pop	r0
     3e6:	0f 90       	pop	r0
     3e8:	cf 91       	pop	r28
     3ea:	df 91       	pop	r29
     3ec:	08 95       	ret

000003ee <HAL_LCD_Clean_Screen>:
* Note			- none
*
*/

void HAL_LCD_Clean_Screen(void)
{
     3ee:	df 93       	push	r29
     3f0:	cf 93       	push	r28
     3f2:	cd b7       	in	r28, 0x3d	; 61
     3f4:	de b7       	in	r29, 0x3e	; 62
	HAL_LCD_Send_Cmnd(Clear_Display);
     3f6:	81 e0       	ldi	r24, 0x01	; 1
     3f8:	0e 94 46 01 	call	0x28c	; 0x28c <HAL_LCD_Send_Cmnd>
	delay_ms(20);
     3fc:	64 e1       	ldi	r22, 0x14	; 20
     3fe:	70 e0       	ldi	r23, 0x00	; 0
     400:	80 e0       	ldi	r24, 0x00	; 0
     402:	90 e0       	ldi	r25, 0x00	; 0
     404:	0e 94 49 00 	call	0x92	; 0x92 <delay_ms>
}
     408:	cf 91       	pop	r28
     40a:	df 91       	pop	r29
     40c:	08 95       	ret

0000040e <HAL_LCD_Send_Number>:
* Note			- none
*
*/

void HAL_LCD_Send_Number(uint32_t Copy_Number)
{
     40e:	0f 93       	push	r16
     410:	1f 93       	push	r17
     412:	df 93       	push	r29
     414:	cf 93       	push	r28
     416:	cd b7       	in	r28, 0x3d	; 61
     418:	de b7       	in	r29, 0x3e	; 62
     41a:	a6 97       	sbiw	r28, 0x26	; 38
     41c:	0f b6       	in	r0, 0x3f	; 63
     41e:	f8 94       	cli
     420:	de bf       	out	0x3e, r29	; 62
     422:	0f be       	out	0x3f, r0	; 63
     424:	cd bf       	out	0x3d, r28	; 61
     426:	6b a3       	std	Y+35, r22	; 0x23
     428:	7c a3       	std	Y+36, r23	; 0x24
     42a:	8d a3       	std	Y+37, r24	; 0x25
     42c:	9e a3       	std	Y+38, r25	; 0x26
	uint8_t Digits_Arr[32];
	uint8_t	Digits_counter =0;
     42e:	1a 82       	std	Y+2, r1	; 0x02

	if(Copy_Number > 0)
     430:	8b a1       	ldd	r24, Y+35	; 0x23
     432:	9c a1       	ldd	r25, Y+36	; 0x24
     434:	ad a1       	ldd	r26, Y+37	; 0x25
     436:	be a1       	ldd	r27, Y+38	; 0x26
     438:	00 97       	sbiw	r24, 0x00	; 0
     43a:	a1 05       	cpc	r26, r1
     43c:	b1 05       	cpc	r27, r1
     43e:	09 f4       	brne	.+2      	; 0x442 <HAL_LCD_Send_Number+0x34>
     440:	4f c0       	rjmp	.+158    	; 0x4e0 <HAL_LCD_Send_Number+0xd2>
     442:	2d c0       	rjmp	.+90     	; 0x49e <HAL_LCD_Send_Number+0x90>
	{
		while(Copy_Number != 0)
		{
			Digits_Arr[Digits_counter] = Copy_Number % 10;
     444:	8a 81       	ldd	r24, Y+2	; 0x02
     446:	08 2f       	mov	r16, r24
     448:	10 e0       	ldi	r17, 0x00	; 0
     44a:	8b a1       	ldd	r24, Y+35	; 0x23
     44c:	9c a1       	ldd	r25, Y+36	; 0x24
     44e:	ad a1       	ldd	r26, Y+37	; 0x25
     450:	be a1       	ldd	r27, Y+38	; 0x26
     452:	2a e0       	ldi	r18, 0x0A	; 10
     454:	30 e0       	ldi	r19, 0x00	; 0
     456:	40 e0       	ldi	r20, 0x00	; 0
     458:	50 e0       	ldi	r21, 0x00	; 0
     45a:	bc 01       	movw	r22, r24
     45c:	cd 01       	movw	r24, r26
     45e:	0e 94 d5 09 	call	0x13aa	; 0x13aa <__udivmodsi4>
     462:	dc 01       	movw	r26, r24
     464:	cb 01       	movw	r24, r22
     466:	28 2f       	mov	r18, r24
     468:	ce 01       	movw	r24, r28
     46a:	03 96       	adiw	r24, 0x03	; 3
     46c:	fc 01       	movw	r30, r24
     46e:	e0 0f       	add	r30, r16
     470:	f1 1f       	adc	r31, r17
     472:	20 83       	st	Z, r18
			Copy_Number = Copy_Number/10;
     474:	8b a1       	ldd	r24, Y+35	; 0x23
     476:	9c a1       	ldd	r25, Y+36	; 0x24
     478:	ad a1       	ldd	r26, Y+37	; 0x25
     47a:	be a1       	ldd	r27, Y+38	; 0x26
     47c:	2a e0       	ldi	r18, 0x0A	; 10
     47e:	30 e0       	ldi	r19, 0x00	; 0
     480:	40 e0       	ldi	r20, 0x00	; 0
     482:	50 e0       	ldi	r21, 0x00	; 0
     484:	bc 01       	movw	r22, r24
     486:	cd 01       	movw	r24, r26
     488:	0e 94 d5 09 	call	0x13aa	; 0x13aa <__udivmodsi4>
     48c:	da 01       	movw	r26, r20
     48e:	c9 01       	movw	r24, r18
     490:	8b a3       	std	Y+35, r24	; 0x23
     492:	9c a3       	std	Y+36, r25	; 0x24
     494:	ad a3       	std	Y+37, r26	; 0x25
     496:	be a3       	std	Y+38, r27	; 0x26
			Digits_counter++;
     498:	8a 81       	ldd	r24, Y+2	; 0x02
     49a:	8f 5f       	subi	r24, 0xFF	; 255
     49c:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t Digits_Arr[32];
	uint8_t	Digits_counter =0;

	if(Copy_Number > 0)
	{
		while(Copy_Number != 0)
     49e:	8b a1       	ldd	r24, Y+35	; 0x23
     4a0:	9c a1       	ldd	r25, Y+36	; 0x24
     4a2:	ad a1       	ldd	r26, Y+37	; 0x25
     4a4:	be a1       	ldd	r27, Y+38	; 0x26
     4a6:	00 97       	sbiw	r24, 0x00	; 0
     4a8:	a1 05       	cpc	r26, r1
     4aa:	b1 05       	cpc	r27, r1
     4ac:	59 f6       	brne	.-106    	; 0x444 <HAL_LCD_Send_Number+0x36>
			Digits_Arr[Digits_counter] = Copy_Number % 10;
			Copy_Number = Copy_Number/10;
			Digits_counter++;
		}

		for(int8_t i=Digits_counter-1; i>=0; i--)
     4ae:	8a 81       	ldd	r24, Y+2	; 0x02
     4b0:	81 50       	subi	r24, 0x01	; 1
     4b2:	89 83       	std	Y+1, r24	; 0x01
     4b4:	11 c0       	rjmp	.+34     	; 0x4d8 <HAL_LCD_Send_Number+0xca>
		{
			HAL_LCD_Send_Char(Digits_Arr[i] + '0');
     4b6:	89 81       	ldd	r24, Y+1	; 0x01
     4b8:	28 2f       	mov	r18, r24
     4ba:	33 27       	eor	r19, r19
     4bc:	27 fd       	sbrc	r18, 7
     4be:	30 95       	com	r19
     4c0:	ce 01       	movw	r24, r28
     4c2:	03 96       	adiw	r24, 0x03	; 3
     4c4:	fc 01       	movw	r30, r24
     4c6:	e2 0f       	add	r30, r18
     4c8:	f3 1f       	adc	r31, r19
     4ca:	80 81       	ld	r24, Z
     4cc:	80 5d       	subi	r24, 0xD0	; 208
     4ce:	0e 94 6e 01 	call	0x2dc	; 0x2dc <HAL_LCD_Send_Char>
			Digits_Arr[Digits_counter] = Copy_Number % 10;
			Copy_Number = Copy_Number/10;
			Digits_counter++;
		}

		for(int8_t i=Digits_counter-1; i>=0; i--)
     4d2:	89 81       	ldd	r24, Y+1	; 0x01
     4d4:	81 50       	subi	r24, 0x01	; 1
     4d6:	89 83       	std	Y+1, r24	; 0x01
     4d8:	89 81       	ldd	r24, Y+1	; 0x01
     4da:	88 23       	and	r24, r24
     4dc:	64 f7       	brge	.-40     	; 0x4b6 <HAL_LCD_Send_Number+0xa8>
     4de:	03 c0       	rjmp	.+6      	; 0x4e6 <HAL_LCD_Send_Number+0xd8>
		}

	}
	else
	{
		HAL_LCD_Send_Char('0');
     4e0:	80 e3       	ldi	r24, 0x30	; 48
     4e2:	0e 94 6e 01 	call	0x2dc	; 0x2dc <HAL_LCD_Send_Char>
	}
}
     4e6:	a6 96       	adiw	r28, 0x26	; 38
     4e8:	0f b6       	in	r0, 0x3f	; 63
     4ea:	f8 94       	cli
     4ec:	de bf       	out	0x3e, r29	; 62
     4ee:	0f be       	out	0x3f, r0	; 63
     4f0:	cd bf       	out	0x3d, r28	; 61
     4f2:	cf 91       	pop	r28
     4f4:	df 91       	pop	r29
     4f6:	1f 91       	pop	r17
     4f8:	0f 91       	pop	r16
     4fa:	08 95       	ret

000004fc <HAL_LCD_Special_Character>:
* Note			- none
*
*/

void HAL_LCD_Special_Character(uint8_t Copy_CharNum, uint8_t* Copy_Pattern, uint8_t Copy_LineNumber, uint8_t Copy_Position)
{
     4fc:	df 93       	push	r29
     4fe:	cf 93       	push	r28
     500:	cd b7       	in	r28, 0x3d	; 61
     502:	de b7       	in	r29, 0x3e	; 62
     504:	27 97       	sbiw	r28, 0x07	; 7
     506:	0f b6       	in	r0, 0x3f	; 63
     508:	f8 94       	cli
     50a:	de bf       	out	0x3e, r29	; 62
     50c:	0f be       	out	0x3f, r0	; 63
     50e:	cd bf       	out	0x3d, r28	; 61
     510:	8b 83       	std	Y+3, r24	; 0x03
     512:	7d 83       	std	Y+5, r23	; 0x05
     514:	6c 83       	std	Y+4, r22	; 0x04
     516:	4e 83       	std	Y+6, r20	; 0x06
     518:	2f 83       	std	Y+7, r18	; 0x07
	uint8_t CGRAM_Address = Copy_CharNum *8 ;   // to take address for CharNum -> Max custom characters,
     51a:	8b 81       	ldd	r24, Y+3	; 0x03
     51c:	88 2f       	mov	r24, r24
     51e:	90 e0       	ldi	r25, 0x00	; 0
     520:	88 0f       	add	r24, r24
     522:	99 1f       	adc	r25, r25
     524:	88 0f       	add	r24, r24
     526:	99 1f       	adc	r25, r25
     528:	88 0f       	add	r24, r24
     52a:	99 1f       	adc	r25, r25
     52c:	8a 83       	std	Y+2, r24	; 0x02
												// typically up to 8 (0-7)

	HAL_LCD_Send_Cmnd(CGRAM_Address + 64 );
     52e:	8a 81       	ldd	r24, Y+2	; 0x02
     530:	80 5c       	subi	r24, 0xC0	; 192
     532:	0e 94 46 01 	call	0x28c	; 0x28c <HAL_LCD_Send_Cmnd>

	for(uint8_t Local_u8Counter=0 ; Local_u8Counter <8 ; Local_u8Counter++  )
     536:	19 82       	std	Y+1, r1	; 0x01
     538:	0e c0       	rjmp	.+28     	; 0x556 <HAL_LCD_Special_Character+0x5a>
	{

		HAL_LCD_Send_Char(Copy_Pattern[Local_u8Counter]);
     53a:	89 81       	ldd	r24, Y+1	; 0x01
     53c:	28 2f       	mov	r18, r24
     53e:	30 e0       	ldi	r19, 0x00	; 0
     540:	8c 81       	ldd	r24, Y+4	; 0x04
     542:	9d 81       	ldd	r25, Y+5	; 0x05
     544:	fc 01       	movw	r30, r24
     546:	e2 0f       	add	r30, r18
     548:	f3 1f       	adc	r31, r19
     54a:	80 81       	ld	r24, Z
     54c:	0e 94 6e 01 	call	0x2dc	; 0x2dc <HAL_LCD_Send_Char>
	uint8_t CGRAM_Address = Copy_CharNum *8 ;   // to take address for CharNum -> Max custom characters,
												// typically up to 8 (0-7)

	HAL_LCD_Send_Cmnd(CGRAM_Address + 64 );

	for(uint8_t Local_u8Counter=0 ; Local_u8Counter <8 ; Local_u8Counter++  )
     550:	89 81       	ldd	r24, Y+1	; 0x01
     552:	8f 5f       	subi	r24, 0xFF	; 255
     554:	89 83       	std	Y+1, r24	; 0x01
     556:	89 81       	ldd	r24, Y+1	; 0x01
     558:	88 30       	cpi	r24, 0x08	; 8
     55a:	78 f3       	brcs	.-34     	; 0x53a <HAL_LCD_Special_Character+0x3e>

		HAL_LCD_Send_Char(Copy_Pattern[Local_u8Counter]);

	}

	HAL_LCD_GOTO_XY( Copy_LineNumber ,  Copy_Position);
     55c:	8e 81       	ldd	r24, Y+6	; 0x06
     55e:	6f 81       	ldd	r22, Y+7	; 0x07
     560:	0e 94 cc 01 	call	0x398	; 0x398 <HAL_LCD_GOTO_XY>
	HAL_LCD_Send_Char(CGRAM_Address);
     564:	8a 81       	ldd	r24, Y+2	; 0x02
     566:	0e 94 6e 01 	call	0x2dc	; 0x2dc <HAL_LCD_Send_Char>
}
     56a:	27 96       	adiw	r28, 0x07	; 7
     56c:	0f b6       	in	r0, 0x3f	; 63
     56e:	f8 94       	cli
     570:	de bf       	out	0x3e, r29	; 62
     572:	0f be       	out	0x3f, r0	; 63
     574:	cd bf       	out	0x3d, r28	; 61
     576:	cf 91       	pop	r28
     578:	df 91       	pop	r29
     57a:	08 95       	ret

0000057c <GPIO_KPD_init>:
* Note			- none
*
*/

void GPIO_KPD_init (void)
{
     57c:	df 93       	push	r29
     57e:	cf 93       	push	r28
     580:	00 d0       	rcall	.+0      	; 0x582 <GPIO_KPD_init+0x6>
     582:	cd b7       	in	r28, 0x3d	; 61
     584:	de b7       	in	r29, 0x3e	; 62
	DIO_PinConfig_t pinConfig;

	// Rows pins
	pinConfig.DIO_PinNumber = KPD_R1_PIN;
     586:	81 e0       	ldi	r24, 0x01	; 1
     588:	89 83       	std	Y+1, r24	; 0x01
	pinConfig.DIO_PinMode = DIO_MODE_OUTPUT;
     58a:	82 e0       	ldi	r24, 0x02	; 2
     58c:	8a 83       	std	Y+2, r24	; 0x02
	MCAL_DIO_Init(KPD_Port, &pinConfig);
     58e:	81 e0       	ldi	r24, 0x01	; 1
     590:	9e 01       	movw	r18, r28
     592:	2f 5f       	subi	r18, 0xFF	; 255
     594:	3f 4f       	sbci	r19, 0xFF	; 255
     596:	b9 01       	movw	r22, r18
     598:	0e 94 c7 03 	call	0x78e	; 0x78e <MCAL_DIO_Init>

	pinConfig.DIO_PinNumber = KPD_R2_PIN;
     59c:	82 e0       	ldi	r24, 0x02	; 2
     59e:	89 83       	std	Y+1, r24	; 0x01
	pinConfig.DIO_PinMode = DIO_MODE_OUTPUT;
     5a0:	82 e0       	ldi	r24, 0x02	; 2
     5a2:	8a 83       	std	Y+2, r24	; 0x02
	MCAL_DIO_Init(KPD_Port, &pinConfig);
     5a4:	81 e0       	ldi	r24, 0x01	; 1
     5a6:	9e 01       	movw	r18, r28
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	b9 01       	movw	r22, r18
     5ae:	0e 94 c7 03 	call	0x78e	; 0x78e <MCAL_DIO_Init>

	pinConfig.DIO_PinNumber = KPD_R3_PIN;
     5b2:	84 e0       	ldi	r24, 0x04	; 4
     5b4:	89 83       	std	Y+1, r24	; 0x01
	pinConfig.DIO_PinMode = DIO_MODE_OUTPUT;
     5b6:	82 e0       	ldi	r24, 0x02	; 2
     5b8:	8a 83       	std	Y+2, r24	; 0x02
	MCAL_DIO_Init(KPD_Port, &pinConfig);
     5ba:	81 e0       	ldi	r24, 0x01	; 1
     5bc:	9e 01       	movw	r18, r28
     5be:	2f 5f       	subi	r18, 0xFF	; 255
     5c0:	3f 4f       	sbci	r19, 0xFF	; 255
     5c2:	b9 01       	movw	r22, r18
     5c4:	0e 94 c7 03 	call	0x78e	; 0x78e <MCAL_DIO_Init>

	pinConfig.DIO_PinNumber = KPD_R4_PIN;
     5c8:	88 e0       	ldi	r24, 0x08	; 8
     5ca:	89 83       	std	Y+1, r24	; 0x01
	pinConfig.DIO_PinMode = DIO_MODE_OUTPUT;
     5cc:	82 e0       	ldi	r24, 0x02	; 2
     5ce:	8a 83       	std	Y+2, r24	; 0x02
	MCAL_DIO_Init(KPD_Port, &pinConfig);
     5d0:	81 e0       	ldi	r24, 0x01	; 1
     5d2:	9e 01       	movw	r18, r28
     5d4:	2f 5f       	subi	r18, 0xFF	; 255
     5d6:	3f 4f       	sbci	r19, 0xFF	; 255
     5d8:	b9 01       	movw	r22, r18
     5da:	0e 94 c7 03 	call	0x78e	; 0x78e <MCAL_DIO_Init>

	// Columns pins
	pinConfig.DIO_PinNumber = KPD_C1_PIN;
     5de:	80 e1       	ldi	r24, 0x10	; 16
     5e0:	89 83       	std	Y+1, r24	; 0x01
	pinConfig.DIO_PinMode = DIO_MODE_INPUT_PU;
     5e2:	81 e0       	ldi	r24, 0x01	; 1
     5e4:	8a 83       	std	Y+2, r24	; 0x02
	MCAL_DIO_Init(KPD_Port, &pinConfig);
     5e6:	81 e0       	ldi	r24, 0x01	; 1
     5e8:	9e 01       	movw	r18, r28
     5ea:	2f 5f       	subi	r18, 0xFF	; 255
     5ec:	3f 4f       	sbci	r19, 0xFF	; 255
     5ee:	b9 01       	movw	r22, r18
     5f0:	0e 94 c7 03 	call	0x78e	; 0x78e <MCAL_DIO_Init>

	pinConfig.DIO_PinNumber = KPD_C2_PIN;
     5f4:	80 e2       	ldi	r24, 0x20	; 32
     5f6:	89 83       	std	Y+1, r24	; 0x01
	pinConfig.DIO_PinMode = DIO_MODE_INPUT_PU;
     5f8:	81 e0       	ldi	r24, 0x01	; 1
     5fa:	8a 83       	std	Y+2, r24	; 0x02
	MCAL_DIO_Init(KPD_Port, &pinConfig);
     5fc:	81 e0       	ldi	r24, 0x01	; 1
     5fe:	9e 01       	movw	r18, r28
     600:	2f 5f       	subi	r18, 0xFF	; 255
     602:	3f 4f       	sbci	r19, 0xFF	; 255
     604:	b9 01       	movw	r22, r18
     606:	0e 94 c7 03 	call	0x78e	; 0x78e <MCAL_DIO_Init>

	pinConfig.DIO_PinNumber = KPD_C3_PIN;
     60a:	80 e4       	ldi	r24, 0x40	; 64
     60c:	89 83       	std	Y+1, r24	; 0x01
	pinConfig.DIO_PinMode = DIO_MODE_INPUT_PU;
     60e:	81 e0       	ldi	r24, 0x01	; 1
     610:	8a 83       	std	Y+2, r24	; 0x02
	MCAL_DIO_Init(KPD_Port, &pinConfig);
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	9e 01       	movw	r18, r28
     616:	2f 5f       	subi	r18, 0xFF	; 255
     618:	3f 4f       	sbci	r19, 0xFF	; 255
     61a:	b9 01       	movw	r22, r18
     61c:	0e 94 c7 03 	call	0x78e	; 0x78e <MCAL_DIO_Init>

	pinConfig.DIO_PinNumber = KPD_C4_PIN;
     620:	80 e8       	ldi	r24, 0x80	; 128
     622:	89 83       	std	Y+1, r24	; 0x01
	pinConfig.DIO_PinMode = DIO_MODE_INPUT_PU;
     624:	81 e0       	ldi	r24, 0x01	; 1
     626:	8a 83       	std	Y+2, r24	; 0x02
	MCAL_DIO_Init(KPD_Port, &pinConfig);
     628:	81 e0       	ldi	r24, 0x01	; 1
     62a:	9e 01       	movw	r18, r28
     62c:	2f 5f       	subi	r18, 0xFF	; 255
     62e:	3f 4f       	sbci	r19, 0xFF	; 255
     630:	b9 01       	movw	r22, r18
     632:	0e 94 c7 03 	call	0x78e	; 0x78e <MCAL_DIO_Init>

	MCAL_DIO_WritePin(KPD_Port, KPD_R1_PIN, DIO_PIN_SET);
     636:	81 e0       	ldi	r24, 0x01	; 1
     638:	61 e0       	ldi	r22, 0x01	; 1
     63a:	41 e0       	ldi	r20, 0x01	; 1
     63c:	0e 94 54 05 	call	0xaa8	; 0xaa8 <MCAL_DIO_WritePin>
	MCAL_DIO_WritePin(KPD_Port, KPD_R2_PIN, DIO_PIN_SET);
     640:	81 e0       	ldi	r24, 0x01	; 1
     642:	62 e0       	ldi	r22, 0x02	; 2
     644:	41 e0       	ldi	r20, 0x01	; 1
     646:	0e 94 54 05 	call	0xaa8	; 0xaa8 <MCAL_DIO_WritePin>
	MCAL_DIO_WritePin(KPD_Port, KPD_R3_PIN, DIO_PIN_SET);
     64a:	81 e0       	ldi	r24, 0x01	; 1
     64c:	64 e0       	ldi	r22, 0x04	; 4
     64e:	41 e0       	ldi	r20, 0x01	; 1
     650:	0e 94 54 05 	call	0xaa8	; 0xaa8 <MCAL_DIO_WritePin>
	MCAL_DIO_WritePin(KPD_Port, KPD_R4_PIN, DIO_PIN_SET);
     654:	81 e0       	ldi	r24, 0x01	; 1
     656:	68 e0       	ldi	r22, 0x08	; 8
     658:	41 e0       	ldi	r20, 0x01	; 1
     65a:	0e 94 54 05 	call	0xaa8	; 0xaa8 <MCAL_DIO_WritePin>

}
     65e:	0f 90       	pop	r0
     660:	0f 90       	pop	r0
     662:	cf 91       	pop	r28
     664:	df 91       	pop	r29
     666:	08 95       	ret

00000668 <KPD_GetKeyState>:
* Note			- none
*
*/

uint8_t KPD_GetKeyState(void)
{
     668:	df 93       	push	r29
     66a:	cf 93       	push	r28
     66c:	00 d0       	rcall	.+0      	; 0x66e <KPD_GetKeyState+0x6>
     66e:	00 d0       	rcall	.+0      	; 0x670 <KPD_GetKeyState+0x8>
     670:	cd b7       	in	r28, 0x3d	; 61
     672:	de b7       	in	r29, 0x3e	; 62
	uint8_t Column_counter= 0;
     674:	1b 82       	std	Y+3, r1	; 0x03
	uint8_t Rows_counter= 0;
     676:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t Return_value;

	GPIO_KPD_init();
     678:	0e 94 be 02 	call	0x57c	; 0x57c <GPIO_KPD_init>

	for(Rows_counter=0; Rows_counter<4; Rows_counter++)
     67c:	1a 82       	std	Y+2, r1	; 0x02
     67e:	79 c0       	rjmp	.+242    	; 0x772 <KPD_GetKeyState+0x10a>
	{
		MCAL_DIO_WritePin(KPD_Port, KPD_RowsPins[Rows_counter], DIO_PIN_RESET);
     680:	8a 81       	ldd	r24, Y+2	; 0x02
     682:	88 2f       	mov	r24, r24
     684:	90 e0       	ldi	r25, 0x00	; 0
     686:	88 0f       	add	r24, r24
     688:	99 1f       	adc	r25, r25
     68a:	fc 01       	movw	r30, r24
     68c:	e0 58       	subi	r30, 0x80	; 128
     68e:	ff 4f       	sbci	r31, 0xFF	; 255
     690:	80 81       	ld	r24, Z
     692:	91 81       	ldd	r25, Z+1	; 0x01
     694:	98 2f       	mov	r25, r24
     696:	81 e0       	ldi	r24, 0x01	; 1
     698:	69 2f       	mov	r22, r25
     69a:	40 e0       	ldi	r20, 0x00	; 0
     69c:	0e 94 54 05 	call	0xaa8	; 0xaa8 <MCAL_DIO_WritePin>

		for(Column_counter=0; Column_counter<4; Column_counter++)
     6a0:	1b 82       	std	Y+3, r1	; 0x03
     6a2:	50 c0       	rjmp	.+160    	; 0x744 <KPD_GetKeyState+0xdc>
		{
			Return_value = MCAL_DIO_ReadPin(KPD_Port, KPD_ColumnsPins[Column_counter]);
     6a4:	8b 81       	ldd	r24, Y+3	; 0x03
     6a6:	88 2f       	mov	r24, r24
     6a8:	90 e0       	ldi	r25, 0x00	; 0
     6aa:	88 0f       	add	r24, r24
     6ac:	99 1f       	adc	r25, r25
     6ae:	fc 01       	movw	r30, r24
     6b0:	e8 57       	subi	r30, 0x78	; 120
     6b2:	ff 4f       	sbci	r31, 0xFF	; 255
     6b4:	80 81       	ld	r24, Z
     6b6:	91 81       	ldd	r25, Z+1	; 0x01
     6b8:	98 2f       	mov	r25, r24
     6ba:	81 e0       	ldi	r24, 0x01	; 1
     6bc:	69 2f       	mov	r22, r25
     6be:	0e 94 2d 06 	call	0xc5a	; 0xc5a <MCAL_DIO_ReadPin>
     6c2:	89 83       	std	Y+1, r24	; 0x01

			if(Return_value == DIO_PIN_RESET)
     6c4:	89 81       	ldd	r24, Y+1	; 0x01
     6c6:	88 23       	and	r24, r24
     6c8:	d1 f5       	brne	.+116    	; 0x73e <KPD_GetKeyState+0xd6>
			{
				Return_value = MCAL_DIO_ReadPin(KPD_Port, KPD_ColumnsPins[Column_counter]);
     6ca:	8b 81       	ldd	r24, Y+3	; 0x03
     6cc:	88 2f       	mov	r24, r24
     6ce:	90 e0       	ldi	r25, 0x00	; 0
     6d0:	88 0f       	add	r24, r24
     6d2:	99 1f       	adc	r25, r25
     6d4:	fc 01       	movw	r30, r24
     6d6:	e8 57       	subi	r30, 0x78	; 120
     6d8:	ff 4f       	sbci	r31, 0xFF	; 255
     6da:	80 81       	ld	r24, Z
     6dc:	91 81       	ldd	r25, Z+1	; 0x01
     6de:	98 2f       	mov	r25, r24
     6e0:	81 e0       	ldi	r24, 0x01	; 1
     6e2:	69 2f       	mov	r22, r25
     6e4:	0e 94 2d 06 	call	0xc5a	; 0xc5a <MCAL_DIO_ReadPin>
     6e8:	89 83       	std	Y+1, r24	; 0x01
     6ea:	10 c0       	rjmp	.+32     	; 0x70c <KPD_GetKeyState+0xa4>

				while(Return_value == DIO_PIN_RESET)
				{
					Return_value = MCAL_DIO_ReadPin(KPD_Port, KPD_ColumnsPins[Column_counter]);
     6ec:	8b 81       	ldd	r24, Y+3	; 0x03
     6ee:	88 2f       	mov	r24, r24
     6f0:	90 e0       	ldi	r25, 0x00	; 0
     6f2:	88 0f       	add	r24, r24
     6f4:	99 1f       	adc	r25, r25
     6f6:	fc 01       	movw	r30, r24
     6f8:	e8 57       	subi	r30, 0x78	; 120
     6fa:	ff 4f       	sbci	r31, 0xFF	; 255
     6fc:	80 81       	ld	r24, Z
     6fe:	91 81       	ldd	r25, Z+1	; 0x01
     700:	98 2f       	mov	r25, r24
     702:	81 e0       	ldi	r24, 0x01	; 1
     704:	69 2f       	mov	r22, r25
     706:	0e 94 2d 06 	call	0xc5a	; 0xc5a <MCAL_DIO_ReadPin>
     70a:	89 83       	std	Y+1, r24	; 0x01

			if(Return_value == DIO_PIN_RESET)
			{
				Return_value = MCAL_DIO_ReadPin(KPD_Port, KPD_ColumnsPins[Column_counter]);

				while(Return_value == DIO_PIN_RESET)
     70c:	89 81       	ldd	r24, Y+1	; 0x01
     70e:	88 23       	and	r24, r24
     710:	69 f3       	breq	.-38     	; 0x6ec <KPD_GetKeyState+0x84>
				{
					Return_value = MCAL_DIO_ReadPin(KPD_Port, KPD_ColumnsPins[Column_counter]);
				}

				return KPD_Keys[Rows_counter][Column_counter];
     712:	8a 81       	ldd	r24, Y+2	; 0x02
     714:	48 2f       	mov	r20, r24
     716:	50 e0       	ldi	r21, 0x00	; 0
     718:	8b 81       	ldd	r24, Y+3	; 0x03
     71a:	28 2f       	mov	r18, r24
     71c:	30 e0       	ldi	r19, 0x00	; 0
     71e:	ca 01       	movw	r24, r20
     720:	88 0f       	add	r24, r24
     722:	99 1f       	adc	r25, r25
     724:	88 0f       	add	r24, r24
     726:	99 1f       	adc	r25, r25
     728:	82 0f       	add	r24, r18
     72a:	93 1f       	adc	r25, r19
     72c:	88 0f       	add	r24, r24
     72e:	99 1f       	adc	r25, r25
     730:	fc 01       	movw	r30, r24
     732:	e0 5a       	subi	r30, 0xA0	; 160
     734:	ff 4f       	sbci	r31, 0xFF	; 255
     736:	80 81       	ld	r24, Z
     738:	91 81       	ldd	r25, Z+1	; 0x01
     73a:	8c 83       	std	Y+4, r24	; 0x04
     73c:	20 c0       	rjmp	.+64     	; 0x77e <KPD_GetKeyState+0x116>

	for(Rows_counter=0; Rows_counter<4; Rows_counter++)
	{
		MCAL_DIO_WritePin(KPD_Port, KPD_RowsPins[Rows_counter], DIO_PIN_RESET);

		for(Column_counter=0; Column_counter<4; Column_counter++)
     73e:	8b 81       	ldd	r24, Y+3	; 0x03
     740:	8f 5f       	subi	r24, 0xFF	; 255
     742:	8b 83       	std	Y+3, r24	; 0x03
     744:	8b 81       	ldd	r24, Y+3	; 0x03
     746:	84 30       	cpi	r24, 0x04	; 4
     748:	08 f4       	brcc	.+2      	; 0x74c <KPD_GetKeyState+0xe4>
     74a:	ac cf       	rjmp	.-168    	; 0x6a4 <KPD_GetKeyState+0x3c>

				return KPD_Keys[Rows_counter][Column_counter];
			}
		}

		MCAL_DIO_WritePin(KPD_Port, KPD_RowsPins[Rows_counter], DIO_PIN_SET);
     74c:	8a 81       	ldd	r24, Y+2	; 0x02
     74e:	88 2f       	mov	r24, r24
     750:	90 e0       	ldi	r25, 0x00	; 0
     752:	88 0f       	add	r24, r24
     754:	99 1f       	adc	r25, r25
     756:	fc 01       	movw	r30, r24
     758:	e0 58       	subi	r30, 0x80	; 128
     75a:	ff 4f       	sbci	r31, 0xFF	; 255
     75c:	80 81       	ld	r24, Z
     75e:	91 81       	ldd	r25, Z+1	; 0x01
     760:	98 2f       	mov	r25, r24
     762:	81 e0       	ldi	r24, 0x01	; 1
     764:	69 2f       	mov	r22, r25
     766:	41 e0       	ldi	r20, 0x01	; 1
     768:	0e 94 54 05 	call	0xaa8	; 0xaa8 <MCAL_DIO_WritePin>
	uint8_t Rows_counter= 0;
	uint8_t Return_value;

	GPIO_KPD_init();

	for(Rows_counter=0; Rows_counter<4; Rows_counter++)
     76c:	8a 81       	ldd	r24, Y+2	; 0x02
     76e:	8f 5f       	subi	r24, 0xFF	; 255
     770:	8a 83       	std	Y+2, r24	; 0x02
     772:	8a 81       	ldd	r24, Y+2	; 0x02
     774:	84 30       	cpi	r24, 0x04	; 4
     776:	08 f4       	brcc	.+2      	; 0x77a <KPD_GetKeyState+0x112>
     778:	83 cf       	rjmp	.-250    	; 0x680 <KPD_GetKeyState+0x18>
		}

		MCAL_DIO_WritePin(KPD_Port, KPD_RowsPins[Rows_counter], DIO_PIN_SET);
	}

	return 'A';
     77a:	81 e4       	ldi	r24, 0x41	; 65
     77c:	8c 83       	std	Y+4, r24	; 0x04
     77e:	8c 81       	ldd	r24, Y+4	; 0x04
}
     780:	0f 90       	pop	r0
     782:	0f 90       	pop	r0
     784:	0f 90       	pop	r0
     786:	0f 90       	pop	r0
     788:	cf 91       	pop	r28
     78a:	df 91       	pop	r29
     78c:	08 95       	ret

0000078e <MCAL_DIO_Init>:
* @retval 		- none
* Note			- none
*
*/

void MCAL_DIO_Init(uint8_t DIOx, DIO_PinConfig_t *PinConfig) {
     78e:	df 93       	push	r29
     790:	cf 93       	push	r28
     792:	00 d0       	rcall	.+0      	; 0x794 <MCAL_DIO_Init+0x6>
     794:	0f 92       	push	r0
     796:	cd b7       	in	r28, 0x3d	; 61
     798:	de b7       	in	r29, 0x3e	; 62
     79a:	89 83       	std	Y+1, r24	; 0x01
     79c:	7b 83       	std	Y+3, r23	; 0x03
     79e:	6a 83       	std	Y+2, r22	; 0x02


	if (DIOx == DIOA) {
     7a0:	89 81       	ldd	r24, Y+1	; 0x01
     7a2:	88 23       	and	r24, r24
     7a4:	09 f0       	breq	.+2      	; 0x7a8 <MCAL_DIO_Init+0x1a>
     7a6:	5c c0       	rjmp	.+184    	; 0x860 <__stack+0x1>
		if (PinConfig->DIO_PinMode == DIO_MODE_OUTPUT) {
     7a8:	ea 81       	ldd	r30, Y+2	; 0x02
     7aa:	fb 81       	ldd	r31, Y+3	; 0x03
     7ac:	81 81       	ldd	r24, Z+1	; 0x01
     7ae:	82 30       	cpi	r24, 0x02	; 2
     7b0:	89 f4       	brne	.+34     	; 0x7d4 <MCAL_DIO_Init+0x46>
			DIO_x->DDRA |= PinConfig->DIO_PinNumber;
     7b2:	a0 91 90 00 	lds	r26, 0x0090
     7b6:	b0 91 91 00 	lds	r27, 0x0091
     7ba:	e0 91 90 00 	lds	r30, 0x0090
     7be:	f0 91 91 00 	lds	r31, 0x0091
     7c2:	92 85       	ldd	r25, Z+10	; 0x0a
     7c4:	ea 81       	ldd	r30, Y+2	; 0x02
     7c6:	fb 81       	ldd	r31, Y+3	; 0x03
     7c8:	80 81       	ld	r24, Z
     7ca:	89 2b       	or	r24, r25
     7cc:	1a 96       	adiw	r26, 0x0a	; 10
     7ce:	8c 93       	st	X, r24
     7d0:	1a 97       	sbiw	r26, 0x0a	; 10
     7d2:	64 c1       	rjmp	.+712    	; 0xa9c <__stack+0x23d>
		} else if ((PinConfig->DIO_PinMode == DIO_MODE_INPUT_FLO) || (PinConfig->DIO_PinMode == DIO_MODE_INPUT_PU)) {
     7d4:	ea 81       	ldd	r30, Y+2	; 0x02
     7d6:	fb 81       	ldd	r31, Y+3	; 0x03
     7d8:	81 81       	ldd	r24, Z+1	; 0x01
     7da:	88 23       	and	r24, r24
     7dc:	31 f0       	breq	.+12     	; 0x7ea <MCAL_DIO_Init+0x5c>
     7de:	ea 81       	ldd	r30, Y+2	; 0x02
     7e0:	fb 81       	ldd	r31, Y+3	; 0x03
     7e2:	81 81       	ldd	r24, Z+1	; 0x01
     7e4:	81 30       	cpi	r24, 0x01	; 1
     7e6:	09 f0       	breq	.+2      	; 0x7ea <MCAL_DIO_Init+0x5c>
     7e8:	59 c1       	rjmp	.+690    	; 0xa9c <__stack+0x23d>
			DIO_x->DDRA &= ~(PinConfig->DIO_PinNumber);
     7ea:	a0 91 90 00 	lds	r26, 0x0090
     7ee:	b0 91 91 00 	lds	r27, 0x0091
     7f2:	e0 91 90 00 	lds	r30, 0x0090
     7f6:	f0 91 91 00 	lds	r31, 0x0091
     7fa:	82 85       	ldd	r24, Z+10	; 0x0a
     7fc:	98 2f       	mov	r25, r24
     7fe:	ea 81       	ldd	r30, Y+2	; 0x02
     800:	fb 81       	ldd	r31, Y+3	; 0x03
     802:	80 81       	ld	r24, Z
     804:	80 95       	com	r24
     806:	89 23       	and	r24, r25
     808:	1a 96       	adiw	r26, 0x0a	; 10
     80a:	8c 93       	st	X, r24
     80c:	1a 97       	sbiw	r26, 0x0a	; 10

			if (PinConfig->DIO_PinMode == DIO_MODE_INPUT_PU) {
     80e:	ea 81       	ldd	r30, Y+2	; 0x02
     810:	fb 81       	ldd	r31, Y+3	; 0x03
     812:	81 81       	ldd	r24, Z+1	; 0x01
     814:	81 30       	cpi	r24, 0x01	; 1
     816:	89 f4       	brne	.+34     	; 0x83a <MCAL_DIO_Init+0xac>
				DIO_x->PORTA |= PinConfig->DIO_PinNumber;
     818:	a0 91 90 00 	lds	r26, 0x0090
     81c:	b0 91 91 00 	lds	r27, 0x0091
     820:	e0 91 90 00 	lds	r30, 0x0090
     824:	f0 91 91 00 	lds	r31, 0x0091
     828:	93 85       	ldd	r25, Z+11	; 0x0b
     82a:	ea 81       	ldd	r30, Y+2	; 0x02
     82c:	fb 81       	ldd	r31, Y+3	; 0x03
     82e:	80 81       	ld	r24, Z
     830:	89 2b       	or	r24, r25
     832:	1b 96       	adiw	r26, 0x0b	; 11
     834:	8c 93       	st	X, r24
     836:	1b 97       	sbiw	r26, 0x0b	; 11
     838:	31 c1       	rjmp	.+610    	; 0xa9c <__stack+0x23d>
			} else {
				DIO_x->PORTA &= ~(PinConfig->DIO_PinNumber);
     83a:	a0 91 90 00 	lds	r26, 0x0090
     83e:	b0 91 91 00 	lds	r27, 0x0091
     842:	e0 91 90 00 	lds	r30, 0x0090
     846:	f0 91 91 00 	lds	r31, 0x0091
     84a:	83 85       	ldd	r24, Z+11	; 0x0b
     84c:	98 2f       	mov	r25, r24
     84e:	ea 81       	ldd	r30, Y+2	; 0x02
     850:	fb 81       	ldd	r31, Y+3	; 0x03
     852:	80 81       	ld	r24, Z
     854:	80 95       	com	r24
     856:	89 23       	and	r24, r25
     858:	1b 96       	adiw	r26, 0x0b	; 11
     85a:	8c 93       	st	X, r24
     85c:	1b 97       	sbiw	r26, 0x0b	; 11
     85e:	1e c1       	rjmp	.+572    	; 0xa9c <__stack+0x23d>

		}
	}


	else if (DIOx == DIOB) {
     860:	89 81       	ldd	r24, Y+1	; 0x01
     862:	81 30       	cpi	r24, 0x01	; 1
     864:	09 f0       	breq	.+2      	; 0x868 <__stack+0x9>
     866:	5c c0       	rjmp	.+184    	; 0x920 <__stack+0xc1>
		if (PinConfig->DIO_PinMode == DIO_MODE_OUTPUT) {
     868:	ea 81       	ldd	r30, Y+2	; 0x02
     86a:	fb 81       	ldd	r31, Y+3	; 0x03
     86c:	81 81       	ldd	r24, Z+1	; 0x01
     86e:	82 30       	cpi	r24, 0x02	; 2
     870:	89 f4       	brne	.+34     	; 0x894 <__stack+0x35>
			DIO_x->DDRB |= PinConfig->DIO_PinNumber;
     872:	a0 91 90 00 	lds	r26, 0x0090
     876:	b0 91 91 00 	lds	r27, 0x0091
     87a:	e0 91 90 00 	lds	r30, 0x0090
     87e:	f0 91 91 00 	lds	r31, 0x0091
     882:	97 81       	ldd	r25, Z+7	; 0x07
     884:	ea 81       	ldd	r30, Y+2	; 0x02
     886:	fb 81       	ldd	r31, Y+3	; 0x03
     888:	80 81       	ld	r24, Z
     88a:	89 2b       	or	r24, r25
     88c:	17 96       	adiw	r26, 0x07	; 7
     88e:	8c 93       	st	X, r24
     890:	17 97       	sbiw	r26, 0x07	; 7
     892:	04 c1       	rjmp	.+520    	; 0xa9c <__stack+0x23d>
		} else if ((PinConfig->DIO_PinMode == DIO_MODE_INPUT_FLO) || (PinConfig->DIO_PinMode == DIO_MODE_INPUT_PU)) {
     894:	ea 81       	ldd	r30, Y+2	; 0x02
     896:	fb 81       	ldd	r31, Y+3	; 0x03
     898:	81 81       	ldd	r24, Z+1	; 0x01
     89a:	88 23       	and	r24, r24
     89c:	31 f0       	breq	.+12     	; 0x8aa <__stack+0x4b>
     89e:	ea 81       	ldd	r30, Y+2	; 0x02
     8a0:	fb 81       	ldd	r31, Y+3	; 0x03
     8a2:	81 81       	ldd	r24, Z+1	; 0x01
     8a4:	81 30       	cpi	r24, 0x01	; 1
     8a6:	09 f0       	breq	.+2      	; 0x8aa <__stack+0x4b>
     8a8:	f9 c0       	rjmp	.+498    	; 0xa9c <__stack+0x23d>
			DIO_x->DDRB &= ~(PinConfig->DIO_PinNumber);
     8aa:	a0 91 90 00 	lds	r26, 0x0090
     8ae:	b0 91 91 00 	lds	r27, 0x0091
     8b2:	e0 91 90 00 	lds	r30, 0x0090
     8b6:	f0 91 91 00 	lds	r31, 0x0091
     8ba:	87 81       	ldd	r24, Z+7	; 0x07
     8bc:	98 2f       	mov	r25, r24
     8be:	ea 81       	ldd	r30, Y+2	; 0x02
     8c0:	fb 81       	ldd	r31, Y+3	; 0x03
     8c2:	80 81       	ld	r24, Z
     8c4:	80 95       	com	r24
     8c6:	89 23       	and	r24, r25
     8c8:	17 96       	adiw	r26, 0x07	; 7
     8ca:	8c 93       	st	X, r24
     8cc:	17 97       	sbiw	r26, 0x07	; 7

			if (PinConfig->DIO_PinMode == DIO_MODE_INPUT_PU) {
     8ce:	ea 81       	ldd	r30, Y+2	; 0x02
     8d0:	fb 81       	ldd	r31, Y+3	; 0x03
     8d2:	81 81       	ldd	r24, Z+1	; 0x01
     8d4:	81 30       	cpi	r24, 0x01	; 1
     8d6:	89 f4       	brne	.+34     	; 0x8fa <__stack+0x9b>
				DIO_x->PORTB |= PinConfig->DIO_PinNumber;
     8d8:	a0 91 90 00 	lds	r26, 0x0090
     8dc:	b0 91 91 00 	lds	r27, 0x0091
     8e0:	e0 91 90 00 	lds	r30, 0x0090
     8e4:	f0 91 91 00 	lds	r31, 0x0091
     8e8:	90 85       	ldd	r25, Z+8	; 0x08
     8ea:	ea 81       	ldd	r30, Y+2	; 0x02
     8ec:	fb 81       	ldd	r31, Y+3	; 0x03
     8ee:	80 81       	ld	r24, Z
     8f0:	89 2b       	or	r24, r25
     8f2:	18 96       	adiw	r26, 0x08	; 8
     8f4:	8c 93       	st	X, r24
     8f6:	18 97       	sbiw	r26, 0x08	; 8
     8f8:	d1 c0       	rjmp	.+418    	; 0xa9c <__stack+0x23d>
			} else {
				DIO_x->PORTB &= ~(PinConfig->DIO_PinNumber);
     8fa:	a0 91 90 00 	lds	r26, 0x0090
     8fe:	b0 91 91 00 	lds	r27, 0x0091
     902:	e0 91 90 00 	lds	r30, 0x0090
     906:	f0 91 91 00 	lds	r31, 0x0091
     90a:	80 85       	ldd	r24, Z+8	; 0x08
     90c:	98 2f       	mov	r25, r24
     90e:	ea 81       	ldd	r30, Y+2	; 0x02
     910:	fb 81       	ldd	r31, Y+3	; 0x03
     912:	80 81       	ld	r24, Z
     914:	80 95       	com	r24
     916:	89 23       	and	r24, r25
     918:	18 96       	adiw	r26, 0x08	; 8
     91a:	8c 93       	st	X, r24
     91c:	18 97       	sbiw	r26, 0x08	; 8
     91e:	be c0       	rjmp	.+380    	; 0xa9c <__stack+0x23d>

		}
	}


	else if (DIOx == DIOC) {
     920:	89 81       	ldd	r24, Y+1	; 0x01
     922:	82 30       	cpi	r24, 0x02	; 2
     924:	09 f0       	breq	.+2      	; 0x928 <__stack+0xc9>
     926:	5c c0       	rjmp	.+184    	; 0x9e0 <__stack+0x181>
		if (PinConfig->DIO_PinMode == DIO_MODE_OUTPUT) {
     928:	ea 81       	ldd	r30, Y+2	; 0x02
     92a:	fb 81       	ldd	r31, Y+3	; 0x03
     92c:	81 81       	ldd	r24, Z+1	; 0x01
     92e:	82 30       	cpi	r24, 0x02	; 2
     930:	89 f4       	brne	.+34     	; 0x954 <__stack+0xf5>
			DIO_x->DDRC |= PinConfig->DIO_PinNumber;
     932:	a0 91 90 00 	lds	r26, 0x0090
     936:	b0 91 91 00 	lds	r27, 0x0091
     93a:	e0 91 90 00 	lds	r30, 0x0090
     93e:	f0 91 91 00 	lds	r31, 0x0091
     942:	94 81       	ldd	r25, Z+4	; 0x04
     944:	ea 81       	ldd	r30, Y+2	; 0x02
     946:	fb 81       	ldd	r31, Y+3	; 0x03
     948:	80 81       	ld	r24, Z
     94a:	89 2b       	or	r24, r25
     94c:	14 96       	adiw	r26, 0x04	; 4
     94e:	8c 93       	st	X, r24
     950:	14 97       	sbiw	r26, 0x04	; 4
     952:	a4 c0       	rjmp	.+328    	; 0xa9c <__stack+0x23d>
		} else if ((PinConfig->DIO_PinMode == DIO_MODE_INPUT_FLO) || (PinConfig->DIO_PinMode == DIO_MODE_INPUT_PU)) {
     954:	ea 81       	ldd	r30, Y+2	; 0x02
     956:	fb 81       	ldd	r31, Y+3	; 0x03
     958:	81 81       	ldd	r24, Z+1	; 0x01
     95a:	88 23       	and	r24, r24
     95c:	31 f0       	breq	.+12     	; 0x96a <__stack+0x10b>
     95e:	ea 81       	ldd	r30, Y+2	; 0x02
     960:	fb 81       	ldd	r31, Y+3	; 0x03
     962:	81 81       	ldd	r24, Z+1	; 0x01
     964:	81 30       	cpi	r24, 0x01	; 1
     966:	09 f0       	breq	.+2      	; 0x96a <__stack+0x10b>
     968:	99 c0       	rjmp	.+306    	; 0xa9c <__stack+0x23d>
			DIO_x->DDRC &= ~(PinConfig->DIO_PinNumber);
     96a:	a0 91 90 00 	lds	r26, 0x0090
     96e:	b0 91 91 00 	lds	r27, 0x0091
     972:	e0 91 90 00 	lds	r30, 0x0090
     976:	f0 91 91 00 	lds	r31, 0x0091
     97a:	84 81       	ldd	r24, Z+4	; 0x04
     97c:	98 2f       	mov	r25, r24
     97e:	ea 81       	ldd	r30, Y+2	; 0x02
     980:	fb 81       	ldd	r31, Y+3	; 0x03
     982:	80 81       	ld	r24, Z
     984:	80 95       	com	r24
     986:	89 23       	and	r24, r25
     988:	14 96       	adiw	r26, 0x04	; 4
     98a:	8c 93       	st	X, r24
     98c:	14 97       	sbiw	r26, 0x04	; 4

			if (PinConfig->DIO_PinMode == DIO_MODE_INPUT_PU) {
     98e:	ea 81       	ldd	r30, Y+2	; 0x02
     990:	fb 81       	ldd	r31, Y+3	; 0x03
     992:	81 81       	ldd	r24, Z+1	; 0x01
     994:	81 30       	cpi	r24, 0x01	; 1
     996:	89 f4       	brne	.+34     	; 0x9ba <__stack+0x15b>
				DIO_x->PORTC |= PinConfig->DIO_PinNumber;
     998:	a0 91 90 00 	lds	r26, 0x0090
     99c:	b0 91 91 00 	lds	r27, 0x0091
     9a0:	e0 91 90 00 	lds	r30, 0x0090
     9a4:	f0 91 91 00 	lds	r31, 0x0091
     9a8:	95 81       	ldd	r25, Z+5	; 0x05
     9aa:	ea 81       	ldd	r30, Y+2	; 0x02
     9ac:	fb 81       	ldd	r31, Y+3	; 0x03
     9ae:	80 81       	ld	r24, Z
     9b0:	89 2b       	or	r24, r25
     9b2:	15 96       	adiw	r26, 0x05	; 5
     9b4:	8c 93       	st	X, r24
     9b6:	15 97       	sbiw	r26, 0x05	; 5
     9b8:	71 c0       	rjmp	.+226    	; 0xa9c <__stack+0x23d>
			} else {
				DIO_x->PORTC &= ~(PinConfig->DIO_PinNumber);
     9ba:	a0 91 90 00 	lds	r26, 0x0090
     9be:	b0 91 91 00 	lds	r27, 0x0091
     9c2:	e0 91 90 00 	lds	r30, 0x0090
     9c6:	f0 91 91 00 	lds	r31, 0x0091
     9ca:	85 81       	ldd	r24, Z+5	; 0x05
     9cc:	98 2f       	mov	r25, r24
     9ce:	ea 81       	ldd	r30, Y+2	; 0x02
     9d0:	fb 81       	ldd	r31, Y+3	; 0x03
     9d2:	80 81       	ld	r24, Z
     9d4:	80 95       	com	r24
     9d6:	89 23       	and	r24, r25
     9d8:	15 96       	adiw	r26, 0x05	; 5
     9da:	8c 93       	st	X, r24
     9dc:	15 97       	sbiw	r26, 0x05	; 5
     9de:	5e c0       	rjmp	.+188    	; 0xa9c <__stack+0x23d>

		}
	}


	else if (DIOx == DIOD) {
     9e0:	89 81       	ldd	r24, Y+1	; 0x01
     9e2:	83 30       	cpi	r24, 0x03	; 3
     9e4:	09 f0       	breq	.+2      	; 0x9e8 <__stack+0x189>
     9e6:	5a c0       	rjmp	.+180    	; 0xa9c <__stack+0x23d>
		if (PinConfig->DIO_PinMode == DIO_MODE_OUTPUT) {
     9e8:	ea 81       	ldd	r30, Y+2	; 0x02
     9ea:	fb 81       	ldd	r31, Y+3	; 0x03
     9ec:	81 81       	ldd	r24, Z+1	; 0x01
     9ee:	82 30       	cpi	r24, 0x02	; 2
     9f0:	89 f4       	brne	.+34     	; 0xa14 <__stack+0x1b5>
			DIO_x->DDRD |= PinConfig->DIO_PinNumber;
     9f2:	a0 91 90 00 	lds	r26, 0x0090
     9f6:	b0 91 91 00 	lds	r27, 0x0091
     9fa:	e0 91 90 00 	lds	r30, 0x0090
     9fe:	f0 91 91 00 	lds	r31, 0x0091
     a02:	91 81       	ldd	r25, Z+1	; 0x01
     a04:	ea 81       	ldd	r30, Y+2	; 0x02
     a06:	fb 81       	ldd	r31, Y+3	; 0x03
     a08:	80 81       	ld	r24, Z
     a0a:	89 2b       	or	r24, r25
     a0c:	11 96       	adiw	r26, 0x01	; 1
     a0e:	8c 93       	st	X, r24
     a10:	11 97       	sbiw	r26, 0x01	; 1
     a12:	44 c0       	rjmp	.+136    	; 0xa9c <__stack+0x23d>
		} else if ((PinConfig->DIO_PinMode == DIO_MODE_INPUT_FLO) || (PinConfig->DIO_PinMode == DIO_MODE_INPUT_PU)) {
     a14:	ea 81       	ldd	r30, Y+2	; 0x02
     a16:	fb 81       	ldd	r31, Y+3	; 0x03
     a18:	81 81       	ldd	r24, Z+1	; 0x01
     a1a:	88 23       	and	r24, r24
     a1c:	29 f0       	breq	.+10     	; 0xa28 <__stack+0x1c9>
     a1e:	ea 81       	ldd	r30, Y+2	; 0x02
     a20:	fb 81       	ldd	r31, Y+3	; 0x03
     a22:	81 81       	ldd	r24, Z+1	; 0x01
     a24:	81 30       	cpi	r24, 0x01	; 1
     a26:	d1 f5       	brne	.+116    	; 0xa9c <__stack+0x23d>
			DIO_x->DDRD &= ~(PinConfig->DIO_PinNumber);
     a28:	a0 91 90 00 	lds	r26, 0x0090
     a2c:	b0 91 91 00 	lds	r27, 0x0091
     a30:	e0 91 90 00 	lds	r30, 0x0090
     a34:	f0 91 91 00 	lds	r31, 0x0091
     a38:	81 81       	ldd	r24, Z+1	; 0x01
     a3a:	98 2f       	mov	r25, r24
     a3c:	ea 81       	ldd	r30, Y+2	; 0x02
     a3e:	fb 81       	ldd	r31, Y+3	; 0x03
     a40:	80 81       	ld	r24, Z
     a42:	80 95       	com	r24
     a44:	89 23       	and	r24, r25
     a46:	11 96       	adiw	r26, 0x01	; 1
     a48:	8c 93       	st	X, r24
     a4a:	11 97       	sbiw	r26, 0x01	; 1

			if (PinConfig->DIO_PinMode == DIO_MODE_INPUT_PU) {
     a4c:	ea 81       	ldd	r30, Y+2	; 0x02
     a4e:	fb 81       	ldd	r31, Y+3	; 0x03
     a50:	81 81       	ldd	r24, Z+1	; 0x01
     a52:	81 30       	cpi	r24, 0x01	; 1
     a54:	89 f4       	brne	.+34     	; 0xa78 <__stack+0x219>
				DIO_x->PORTD |= PinConfig->DIO_PinNumber;
     a56:	a0 91 90 00 	lds	r26, 0x0090
     a5a:	b0 91 91 00 	lds	r27, 0x0091
     a5e:	e0 91 90 00 	lds	r30, 0x0090
     a62:	f0 91 91 00 	lds	r31, 0x0091
     a66:	92 81       	ldd	r25, Z+2	; 0x02
     a68:	ea 81       	ldd	r30, Y+2	; 0x02
     a6a:	fb 81       	ldd	r31, Y+3	; 0x03
     a6c:	80 81       	ld	r24, Z
     a6e:	89 2b       	or	r24, r25
     a70:	12 96       	adiw	r26, 0x02	; 2
     a72:	8c 93       	st	X, r24
     a74:	12 97       	sbiw	r26, 0x02	; 2
     a76:	12 c0       	rjmp	.+36     	; 0xa9c <__stack+0x23d>
			} else {
				DIO_x->PORTD &= ~(PinConfig->DIO_PinNumber);
     a78:	a0 91 90 00 	lds	r26, 0x0090
     a7c:	b0 91 91 00 	lds	r27, 0x0091
     a80:	e0 91 90 00 	lds	r30, 0x0090
     a84:	f0 91 91 00 	lds	r31, 0x0091
     a88:	82 81       	ldd	r24, Z+2	; 0x02
     a8a:	98 2f       	mov	r25, r24
     a8c:	ea 81       	ldd	r30, Y+2	; 0x02
     a8e:	fb 81       	ldd	r31, Y+3	; 0x03
     a90:	80 81       	ld	r24, Z
     a92:	80 95       	com	r24
     a94:	89 23       	and	r24, r25
     a96:	12 96       	adiw	r26, 0x02	; 2
     a98:	8c 93       	st	X, r24
     a9a:	12 97       	sbiw	r26, 0x02	; 2
	else {
		return;
	}


}
     a9c:	0f 90       	pop	r0
     a9e:	0f 90       	pop	r0
     aa0:	0f 90       	pop	r0
     aa2:	cf 91       	pop	r28
     aa4:	df 91       	pop	r29
     aa6:	08 95       	ret

00000aa8 <MCAL_DIO_WritePin>:
* @retval 		- none
* Note			- none
*
*/

void MCAL_DIO_WritePin(uint8_t DIOx, uint8_t PinNum, uint8_t Value) {
     aa8:	df 93       	push	r29
     aaa:	cf 93       	push	r28
     aac:	00 d0       	rcall	.+0      	; 0xaae <MCAL_DIO_WritePin+0x6>
     aae:	0f 92       	push	r0
     ab0:	cd b7       	in	r28, 0x3d	; 61
     ab2:	de b7       	in	r29, 0x3e	; 62
     ab4:	89 83       	std	Y+1, r24	; 0x01
     ab6:	6a 83       	std	Y+2, r22	; 0x02
     ab8:	4b 83       	std	Y+3, r20	; 0x03

	if (DIOx == DIOA) {
     aba:	89 81       	ldd	r24, Y+1	; 0x01
     abc:	88 23       	and	r24, r24
     abe:	19 f5       	brne	.+70     	; 0xb06 <MCAL_DIO_WritePin+0x5e>
		if (Value != DIO_PIN_RESET) {
     ac0:	8b 81       	ldd	r24, Y+3	; 0x03
     ac2:	88 23       	and	r24, r24
     ac4:	79 f0       	breq	.+30     	; 0xae4 <MCAL_DIO_WritePin+0x3c>
			DIO_x->PORTA |= PinNum;
     ac6:	a0 91 90 00 	lds	r26, 0x0090
     aca:	b0 91 91 00 	lds	r27, 0x0091
     ace:	e0 91 90 00 	lds	r30, 0x0090
     ad2:	f0 91 91 00 	lds	r31, 0x0091
     ad6:	93 85       	ldd	r25, Z+11	; 0x0b
     ad8:	8a 81       	ldd	r24, Y+2	; 0x02
     ada:	89 2b       	or	r24, r25
     adc:	1b 96       	adiw	r26, 0x0b	; 11
     ade:	8c 93       	st	X, r24
     ae0:	1b 97       	sbiw	r26, 0x0b	; 11
     ae2:	82 c0       	rjmp	.+260    	; 0xbe8 <MCAL_DIO_WritePin+0x140>
		} else {
			DIO_x->PORTA &= ~PinNum;
     ae4:	a0 91 90 00 	lds	r26, 0x0090
     ae8:	b0 91 91 00 	lds	r27, 0x0091
     aec:	e0 91 90 00 	lds	r30, 0x0090
     af0:	f0 91 91 00 	lds	r31, 0x0091
     af4:	83 85       	ldd	r24, Z+11	; 0x0b
     af6:	98 2f       	mov	r25, r24
     af8:	8a 81       	ldd	r24, Y+2	; 0x02
     afa:	80 95       	com	r24
     afc:	89 23       	and	r24, r25
     afe:	1b 96       	adiw	r26, 0x0b	; 11
     b00:	8c 93       	st	X, r24
     b02:	1b 97       	sbiw	r26, 0x0b	; 11
     b04:	71 c0       	rjmp	.+226    	; 0xbe8 <MCAL_DIO_WritePin+0x140>
		}
	}

	else if (DIOx == DIOB) {
     b06:	89 81       	ldd	r24, Y+1	; 0x01
     b08:	81 30       	cpi	r24, 0x01	; 1
     b0a:	19 f5       	brne	.+70     	; 0xb52 <MCAL_DIO_WritePin+0xaa>
		if (Value != DIO_PIN_RESET) {
     b0c:	8b 81       	ldd	r24, Y+3	; 0x03
     b0e:	88 23       	and	r24, r24
     b10:	79 f0       	breq	.+30     	; 0xb30 <MCAL_DIO_WritePin+0x88>
			DIO_x->PORTB |= PinNum;
     b12:	a0 91 90 00 	lds	r26, 0x0090
     b16:	b0 91 91 00 	lds	r27, 0x0091
     b1a:	e0 91 90 00 	lds	r30, 0x0090
     b1e:	f0 91 91 00 	lds	r31, 0x0091
     b22:	90 85       	ldd	r25, Z+8	; 0x08
     b24:	8a 81       	ldd	r24, Y+2	; 0x02
     b26:	89 2b       	or	r24, r25
     b28:	18 96       	adiw	r26, 0x08	; 8
     b2a:	8c 93       	st	X, r24
     b2c:	18 97       	sbiw	r26, 0x08	; 8
     b2e:	5c c0       	rjmp	.+184    	; 0xbe8 <MCAL_DIO_WritePin+0x140>
		} else {
			DIO_x->PORTB &= ~PinNum;
     b30:	a0 91 90 00 	lds	r26, 0x0090
     b34:	b0 91 91 00 	lds	r27, 0x0091
     b38:	e0 91 90 00 	lds	r30, 0x0090
     b3c:	f0 91 91 00 	lds	r31, 0x0091
     b40:	80 85       	ldd	r24, Z+8	; 0x08
     b42:	98 2f       	mov	r25, r24
     b44:	8a 81       	ldd	r24, Y+2	; 0x02
     b46:	80 95       	com	r24
     b48:	89 23       	and	r24, r25
     b4a:	18 96       	adiw	r26, 0x08	; 8
     b4c:	8c 93       	st	X, r24
     b4e:	18 97       	sbiw	r26, 0x08	; 8
     b50:	4b c0       	rjmp	.+150    	; 0xbe8 <MCAL_DIO_WritePin+0x140>
		}
	}

	else if (DIOx == DIOC) {
     b52:	89 81       	ldd	r24, Y+1	; 0x01
     b54:	82 30       	cpi	r24, 0x02	; 2
     b56:	19 f5       	brne	.+70     	; 0xb9e <MCAL_DIO_WritePin+0xf6>
		if (Value != DIO_PIN_RESET) {
     b58:	8b 81       	ldd	r24, Y+3	; 0x03
     b5a:	88 23       	and	r24, r24
     b5c:	79 f0       	breq	.+30     	; 0xb7c <MCAL_DIO_WritePin+0xd4>
			DIO_x->PORTC |= PinNum;
     b5e:	a0 91 90 00 	lds	r26, 0x0090
     b62:	b0 91 91 00 	lds	r27, 0x0091
     b66:	e0 91 90 00 	lds	r30, 0x0090
     b6a:	f0 91 91 00 	lds	r31, 0x0091
     b6e:	95 81       	ldd	r25, Z+5	; 0x05
     b70:	8a 81       	ldd	r24, Y+2	; 0x02
     b72:	89 2b       	or	r24, r25
     b74:	15 96       	adiw	r26, 0x05	; 5
     b76:	8c 93       	st	X, r24
     b78:	15 97       	sbiw	r26, 0x05	; 5
     b7a:	36 c0       	rjmp	.+108    	; 0xbe8 <MCAL_DIO_WritePin+0x140>
		} else {
			DIO_x->PORTC &= ~PinNum;
     b7c:	a0 91 90 00 	lds	r26, 0x0090
     b80:	b0 91 91 00 	lds	r27, 0x0091
     b84:	e0 91 90 00 	lds	r30, 0x0090
     b88:	f0 91 91 00 	lds	r31, 0x0091
     b8c:	85 81       	ldd	r24, Z+5	; 0x05
     b8e:	98 2f       	mov	r25, r24
     b90:	8a 81       	ldd	r24, Y+2	; 0x02
     b92:	80 95       	com	r24
     b94:	89 23       	and	r24, r25
     b96:	15 96       	adiw	r26, 0x05	; 5
     b98:	8c 93       	st	X, r24
     b9a:	15 97       	sbiw	r26, 0x05	; 5
     b9c:	25 c0       	rjmp	.+74     	; 0xbe8 <MCAL_DIO_WritePin+0x140>
		}
	}

	else if (DIOx == DIOD) {
     b9e:	89 81       	ldd	r24, Y+1	; 0x01
     ba0:	83 30       	cpi	r24, 0x03	; 3
     ba2:	11 f5       	brne	.+68     	; 0xbe8 <MCAL_DIO_WritePin+0x140>
		if (Value != DIO_PIN_RESET) {
     ba4:	8b 81       	ldd	r24, Y+3	; 0x03
     ba6:	88 23       	and	r24, r24
     ba8:	79 f0       	breq	.+30     	; 0xbc8 <MCAL_DIO_WritePin+0x120>
			DIO_x->PORTD |= PinNum;
     baa:	a0 91 90 00 	lds	r26, 0x0090
     bae:	b0 91 91 00 	lds	r27, 0x0091
     bb2:	e0 91 90 00 	lds	r30, 0x0090
     bb6:	f0 91 91 00 	lds	r31, 0x0091
     bba:	92 81       	ldd	r25, Z+2	; 0x02
     bbc:	8a 81       	ldd	r24, Y+2	; 0x02
     bbe:	89 2b       	or	r24, r25
     bc0:	12 96       	adiw	r26, 0x02	; 2
     bc2:	8c 93       	st	X, r24
     bc4:	12 97       	sbiw	r26, 0x02	; 2
     bc6:	10 c0       	rjmp	.+32     	; 0xbe8 <MCAL_DIO_WritePin+0x140>
		} else {
			DIO_x->PORTD &= ~PinNum;
     bc8:	a0 91 90 00 	lds	r26, 0x0090
     bcc:	b0 91 91 00 	lds	r27, 0x0091
     bd0:	e0 91 90 00 	lds	r30, 0x0090
     bd4:	f0 91 91 00 	lds	r31, 0x0091
     bd8:	82 81       	ldd	r24, Z+2	; 0x02
     bda:	98 2f       	mov	r25, r24
     bdc:	8a 81       	ldd	r24, Y+2	; 0x02
     bde:	80 95       	com	r24
     be0:	89 23       	and	r24, r25
     be2:	12 96       	adiw	r26, 0x02	; 2
     be4:	8c 93       	st	X, r24
     be6:	12 97       	sbiw	r26, 0x02	; 2

	else {
		return;
	}

}
     be8:	0f 90       	pop	r0
     bea:	0f 90       	pop	r0
     bec:	0f 90       	pop	r0
     bee:	cf 91       	pop	r28
     bf0:	df 91       	pop	r29
     bf2:	08 95       	ret

00000bf4 <MCAL_DIO_WritePort>:
* @retval 		- none
* Note			- none
*
*/

void MCAL_DIO_WritePort(uint8_t DIOx, uint8_t Value) {
     bf4:	df 93       	push	r29
     bf6:	cf 93       	push	r28
     bf8:	00 d0       	rcall	.+0      	; 0xbfa <MCAL_DIO_WritePort+0x6>
     bfa:	cd b7       	in	r28, 0x3d	; 61
     bfc:	de b7       	in	r29, 0x3e	; 62
     bfe:	89 83       	std	Y+1, r24	; 0x01
     c00:	6a 83       	std	Y+2, r22	; 0x02

	if (DIOx == DIOA) {
     c02:	89 81       	ldd	r24, Y+1	; 0x01
     c04:	88 23       	and	r24, r24
     c06:	39 f4       	brne	.+14     	; 0xc16 <MCAL_DIO_WritePort+0x22>
		DIO_x->PORTA = Value;
     c08:	e0 91 90 00 	lds	r30, 0x0090
     c0c:	f0 91 91 00 	lds	r31, 0x0091
     c10:	8a 81       	ldd	r24, Y+2	; 0x02
     c12:	83 87       	std	Z+11, r24	; 0x0b
     c14:	1d c0       	rjmp	.+58     	; 0xc50 <MCAL_DIO_WritePort+0x5c>
	}

	else if (DIOx == DIOB) {
     c16:	89 81       	ldd	r24, Y+1	; 0x01
     c18:	81 30       	cpi	r24, 0x01	; 1
     c1a:	39 f4       	brne	.+14     	; 0xc2a <MCAL_DIO_WritePort+0x36>
		DIO_x->PORTB = Value;
     c1c:	e0 91 90 00 	lds	r30, 0x0090
     c20:	f0 91 91 00 	lds	r31, 0x0091
     c24:	8a 81       	ldd	r24, Y+2	; 0x02
     c26:	80 87       	std	Z+8, r24	; 0x08
     c28:	13 c0       	rjmp	.+38     	; 0xc50 <MCAL_DIO_WritePort+0x5c>
	}

	else if (DIOx == DIOC) {
     c2a:	89 81       	ldd	r24, Y+1	; 0x01
     c2c:	82 30       	cpi	r24, 0x02	; 2
     c2e:	39 f4       	brne	.+14     	; 0xc3e <MCAL_DIO_WritePort+0x4a>
		DIO_x->PORTC = Value;
     c30:	e0 91 90 00 	lds	r30, 0x0090
     c34:	f0 91 91 00 	lds	r31, 0x0091
     c38:	8a 81       	ldd	r24, Y+2	; 0x02
     c3a:	85 83       	std	Z+5, r24	; 0x05
     c3c:	09 c0       	rjmp	.+18     	; 0xc50 <MCAL_DIO_WritePort+0x5c>
	}

	else if (DIOx == DIOD) {
     c3e:	89 81       	ldd	r24, Y+1	; 0x01
     c40:	83 30       	cpi	r24, 0x03	; 3
     c42:	31 f4       	brne	.+12     	; 0xc50 <MCAL_DIO_WritePort+0x5c>
		DIO_x->PORTD = Value;
     c44:	e0 91 90 00 	lds	r30, 0x0090
     c48:	f0 91 91 00 	lds	r31, 0x0091
     c4c:	8a 81       	ldd	r24, Y+2	; 0x02
     c4e:	82 83       	std	Z+2, r24	; 0x02
	}

	else {
		return;
	}
}
     c50:	0f 90       	pop	r0
     c52:	0f 90       	pop	r0
     c54:	cf 91       	pop	r28
     c56:	df 91       	pop	r29
     c58:	08 95       	ret

00000c5a <MCAL_DIO_ReadPin>:
* @retval 		- none
* Note			- none
*
*/

uint8_t MCAL_DIO_ReadPin(uint8_t DIOx, uint8_t PinNum) {
     c5a:	df 93       	push	r29
     c5c:	cf 93       	push	r28
     c5e:	00 d0       	rcall	.+0      	; 0xc60 <MCAL_DIO_ReadPin+0x6>
     c60:	00 d0       	rcall	.+0      	; 0xc62 <MCAL_DIO_ReadPin+0x8>
     c62:	cd b7       	in	r28, 0x3d	; 61
     c64:	de b7       	in	r29, 0x3e	; 62
     c66:	8a 83       	std	Y+2, r24	; 0x02
     c68:	6b 83       	std	Y+3, r22	; 0x03

	uint8_t bitstatus;

	if (DIOx == DIOA) {
     c6a:	8a 81       	ldd	r24, Y+2	; 0x02
     c6c:	88 23       	and	r24, r24
     c6e:	71 f4       	brne	.+28     	; 0xc8c <MCAL_DIO_ReadPin+0x32>
		if ((DIO_x->PINA & PinNum) != DIO_PIN_RESET) {
     c70:	e0 91 90 00 	lds	r30, 0x0090
     c74:	f0 91 91 00 	lds	r31, 0x0091
     c78:	91 85       	ldd	r25, Z+9	; 0x09
     c7a:	8b 81       	ldd	r24, Y+3	; 0x03
     c7c:	89 23       	and	r24, r25
     c7e:	88 23       	and	r24, r24
     c80:	19 f0       	breq	.+6      	; 0xc88 <MCAL_DIO_ReadPin+0x2e>
			bitstatus = DIO_PIN_SET;
     c82:	81 e0       	ldi	r24, 0x01	; 1
     c84:	89 83       	std	Y+1, r24	; 0x01
     c86:	38 c0       	rjmp	.+112    	; 0xcf8 <MCAL_DIO_ReadPin+0x9e>
		} else {
			bitstatus = DIO_PIN_RESET;
     c88:	19 82       	std	Y+1, r1	; 0x01
     c8a:	36 c0       	rjmp	.+108    	; 0xcf8 <MCAL_DIO_ReadPin+0x9e>
		}
	}

	else if (DIOx == DIOB) {
     c8c:	8a 81       	ldd	r24, Y+2	; 0x02
     c8e:	81 30       	cpi	r24, 0x01	; 1
     c90:	71 f4       	brne	.+28     	; 0xcae <MCAL_DIO_ReadPin+0x54>
		if ((DIO_x->PINB & PinNum) != DIO_PIN_RESET) {
     c92:	e0 91 90 00 	lds	r30, 0x0090
     c96:	f0 91 91 00 	lds	r31, 0x0091
     c9a:	96 81       	ldd	r25, Z+6	; 0x06
     c9c:	8b 81       	ldd	r24, Y+3	; 0x03
     c9e:	89 23       	and	r24, r25
     ca0:	88 23       	and	r24, r24
     ca2:	19 f0       	breq	.+6      	; 0xcaa <MCAL_DIO_ReadPin+0x50>
			bitstatus = DIO_PIN_SET;
     ca4:	81 e0       	ldi	r24, 0x01	; 1
     ca6:	89 83       	std	Y+1, r24	; 0x01
     ca8:	27 c0       	rjmp	.+78     	; 0xcf8 <MCAL_DIO_ReadPin+0x9e>
		} else {
			bitstatus = DIO_PIN_RESET;
     caa:	19 82       	std	Y+1, r1	; 0x01
     cac:	25 c0       	rjmp	.+74     	; 0xcf8 <MCAL_DIO_ReadPin+0x9e>
		}
	}

	else if (DIOx == DIOC) {
     cae:	8a 81       	ldd	r24, Y+2	; 0x02
     cb0:	82 30       	cpi	r24, 0x02	; 2
     cb2:	71 f4       	brne	.+28     	; 0xcd0 <MCAL_DIO_ReadPin+0x76>
		if ((DIO_x->PINC & PinNum) != DIO_PIN_RESET) {
     cb4:	e0 91 90 00 	lds	r30, 0x0090
     cb8:	f0 91 91 00 	lds	r31, 0x0091
     cbc:	93 81       	ldd	r25, Z+3	; 0x03
     cbe:	8b 81       	ldd	r24, Y+3	; 0x03
     cc0:	89 23       	and	r24, r25
     cc2:	88 23       	and	r24, r24
     cc4:	19 f0       	breq	.+6      	; 0xccc <MCAL_DIO_ReadPin+0x72>
			bitstatus = DIO_PIN_SET;
     cc6:	81 e0       	ldi	r24, 0x01	; 1
     cc8:	89 83       	std	Y+1, r24	; 0x01
     cca:	16 c0       	rjmp	.+44     	; 0xcf8 <MCAL_DIO_ReadPin+0x9e>
		} else {
			bitstatus = DIO_PIN_RESET;
     ccc:	19 82       	std	Y+1, r1	; 0x01
     cce:	14 c0       	rjmp	.+40     	; 0xcf8 <MCAL_DIO_ReadPin+0x9e>
		}
	}

	else if (DIOx == DIOD) {
     cd0:	8a 81       	ldd	r24, Y+2	; 0x02
     cd2:	83 30       	cpi	r24, 0x03	; 3
     cd4:	71 f4       	brne	.+28     	; 0xcf2 <MCAL_DIO_ReadPin+0x98>
		if ((DIO_x->PIND & PinNum) != DIO_PIN_RESET) {
     cd6:	e0 91 90 00 	lds	r30, 0x0090
     cda:	f0 91 91 00 	lds	r31, 0x0091
     cde:	90 81       	ld	r25, Z
     ce0:	8b 81       	ldd	r24, Y+3	; 0x03
     ce2:	89 23       	and	r24, r25
     ce4:	88 23       	and	r24, r24
     ce6:	19 f0       	breq	.+6      	; 0xcee <MCAL_DIO_ReadPin+0x94>
			bitstatus = DIO_PIN_SET;
     ce8:	81 e0       	ldi	r24, 0x01	; 1
     cea:	89 83       	std	Y+1, r24	; 0x01
     cec:	05 c0       	rjmp	.+10     	; 0xcf8 <MCAL_DIO_ReadPin+0x9e>
		} else {
			bitstatus = DIO_PIN_RESET;
     cee:	19 82       	std	Y+1, r1	; 0x01
     cf0:	03 c0       	rjmp	.+6      	; 0xcf8 <MCAL_DIO_ReadPin+0x9e>
		}
	}

	else {
		return -1;
     cf2:	8f ef       	ldi	r24, 0xFF	; 255
     cf4:	8c 83       	std	Y+4, r24	; 0x04
     cf6:	02 c0       	rjmp	.+4      	; 0xcfc <MCAL_DIO_ReadPin+0xa2>
	}

	return bitstatus;
     cf8:	89 81       	ldd	r24, Y+1	; 0x01
     cfa:	8c 83       	std	Y+4, r24	; 0x04
     cfc:	8c 81       	ldd	r24, Y+4	; 0x04
}
     cfe:	0f 90       	pop	r0
     d00:	0f 90       	pop	r0
     d02:	0f 90       	pop	r0
     d04:	0f 90       	pop	r0
     d06:	cf 91       	pop	r28
     d08:	df 91       	pop	r29
     d0a:	08 95       	ret

00000d0c <MCAL_DIO_ReadPort>:
* Note			- none
*
*/

uint8_t MCAL_DIO_ReadPort(uint8_t DIOx)
{
     d0c:	df 93       	push	r29
     d0e:	cf 93       	push	r28
     d10:	00 d0       	rcall	.+0      	; 0xd12 <MCAL_DIO_ReadPort+0x6>
     d12:	0f 92       	push	r0
     d14:	cd b7       	in	r28, 0x3d	; 61
     d16:	de b7       	in	r29, 0x3e	; 62
     d18:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t bitstatus;

	if (DIOx == DIOA) {
     d1a:	8a 81       	ldd	r24, Y+2	; 0x02
     d1c:	88 23       	and	r24, r24
     d1e:	39 f4       	brne	.+14     	; 0xd2e <MCAL_DIO_ReadPort+0x22>
		bitstatus = DIO_x->PINA;
     d20:	e0 91 90 00 	lds	r30, 0x0090
     d24:	f0 91 91 00 	lds	r31, 0x0091
     d28:	81 85       	ldd	r24, Z+9	; 0x09
     d2a:	89 83       	std	Y+1, r24	; 0x01
     d2c:	21 c0       	rjmp	.+66     	; 0xd70 <MCAL_DIO_ReadPort+0x64>
	}

	else if (DIOx == DIOB) {
     d2e:	8a 81       	ldd	r24, Y+2	; 0x02
     d30:	81 30       	cpi	r24, 0x01	; 1
     d32:	39 f4       	brne	.+14     	; 0xd42 <MCAL_DIO_ReadPort+0x36>
		bitstatus = DIO_x->PINB;
     d34:	e0 91 90 00 	lds	r30, 0x0090
     d38:	f0 91 91 00 	lds	r31, 0x0091
     d3c:	86 81       	ldd	r24, Z+6	; 0x06
     d3e:	89 83       	std	Y+1, r24	; 0x01
     d40:	17 c0       	rjmp	.+46     	; 0xd70 <MCAL_DIO_ReadPort+0x64>
	}

	else if (DIOx == DIOC) {
     d42:	8a 81       	ldd	r24, Y+2	; 0x02
     d44:	82 30       	cpi	r24, 0x02	; 2
     d46:	39 f4       	brne	.+14     	; 0xd56 <MCAL_DIO_ReadPort+0x4a>
		bitstatus = DIO_x->PINC;
     d48:	e0 91 90 00 	lds	r30, 0x0090
     d4c:	f0 91 91 00 	lds	r31, 0x0091
     d50:	83 81       	ldd	r24, Z+3	; 0x03
     d52:	89 83       	std	Y+1, r24	; 0x01
     d54:	0d c0       	rjmp	.+26     	; 0xd70 <MCAL_DIO_ReadPort+0x64>
	}

	else if (DIOx == DIOD) {
     d56:	8a 81       	ldd	r24, Y+2	; 0x02
     d58:	83 30       	cpi	r24, 0x03	; 3
     d5a:	39 f4       	brne	.+14     	; 0xd6a <MCAL_DIO_ReadPort+0x5e>
		bitstatus = DIO_x->PIND;
     d5c:	e0 91 90 00 	lds	r30, 0x0090
     d60:	f0 91 91 00 	lds	r31, 0x0091
     d64:	80 81       	ld	r24, Z
     d66:	89 83       	std	Y+1, r24	; 0x01
     d68:	03 c0       	rjmp	.+6      	; 0xd70 <MCAL_DIO_ReadPort+0x64>
	}

	else {
		return -1;
     d6a:	8f ef       	ldi	r24, 0xFF	; 255
     d6c:	8b 83       	std	Y+3, r24	; 0x03
     d6e:	02 c0       	rjmp	.+4      	; 0xd74 <MCAL_DIO_ReadPort+0x68>
	}

	return bitstatus;
     d70:	89 81       	ldd	r24, Y+1	; 0x01
     d72:	8b 83       	std	Y+3, r24	; 0x03
     d74:	8b 81       	ldd	r24, Y+3	; 0x03

}
     d76:	0f 90       	pop	r0
     d78:	0f 90       	pop	r0
     d7a:	0f 90       	pop	r0
     d7c:	cf 91       	pop	r28
     d7e:	df 91       	pop	r29
     d80:	08 95       	ret

00000d82 <MCAL_DIO_TogglePin>:
* Note			- none
*
*/

void MCAL_DIO_TogglePin(uint8_t DIOx , uint8_t PinNum)
{
     d82:	df 93       	push	r29
     d84:	cf 93       	push	r28
     d86:	00 d0       	rcall	.+0      	; 0xd88 <MCAL_DIO_TogglePin+0x6>
     d88:	cd b7       	in	r28, 0x3d	; 61
     d8a:	de b7       	in	r29, 0x3e	; 62
     d8c:	89 83       	std	Y+1, r24	; 0x01
     d8e:	6a 83       	std	Y+2, r22	; 0x02
	if (DIOx == DIOA) {
     d90:	89 81       	ldd	r24, Y+1	; 0x01
     d92:	88 23       	and	r24, r24
     d94:	79 f4       	brne	.+30     	; 0xdb4 <MCAL_DIO_TogglePin+0x32>
		DIO_x->PORTA ^= PinNum;
     d96:	a0 91 90 00 	lds	r26, 0x0090
     d9a:	b0 91 91 00 	lds	r27, 0x0091
     d9e:	e0 91 90 00 	lds	r30, 0x0090
     da2:	f0 91 91 00 	lds	r31, 0x0091
     da6:	93 85       	ldd	r25, Z+11	; 0x0b
     da8:	8a 81       	ldd	r24, Y+2	; 0x02
     daa:	89 27       	eor	r24, r25
     dac:	1b 96       	adiw	r26, 0x0b	; 11
     dae:	8c 93       	st	X, r24
     db0:	1b 97       	sbiw	r26, 0x0b	; 11
     db2:	35 c0       	rjmp	.+106    	; 0xe1e <MCAL_DIO_TogglePin+0x9c>
	}

	else if (DIOx == DIOB) {
     db4:	89 81       	ldd	r24, Y+1	; 0x01
     db6:	81 30       	cpi	r24, 0x01	; 1
     db8:	79 f4       	brne	.+30     	; 0xdd8 <MCAL_DIO_TogglePin+0x56>
		DIO_x->PORTB ^= PinNum;
     dba:	a0 91 90 00 	lds	r26, 0x0090
     dbe:	b0 91 91 00 	lds	r27, 0x0091
     dc2:	e0 91 90 00 	lds	r30, 0x0090
     dc6:	f0 91 91 00 	lds	r31, 0x0091
     dca:	90 85       	ldd	r25, Z+8	; 0x08
     dcc:	8a 81       	ldd	r24, Y+2	; 0x02
     dce:	89 27       	eor	r24, r25
     dd0:	18 96       	adiw	r26, 0x08	; 8
     dd2:	8c 93       	st	X, r24
     dd4:	18 97       	sbiw	r26, 0x08	; 8
     dd6:	23 c0       	rjmp	.+70     	; 0xe1e <MCAL_DIO_TogglePin+0x9c>
	}

	else if (DIOx == DIOC) {
     dd8:	89 81       	ldd	r24, Y+1	; 0x01
     dda:	82 30       	cpi	r24, 0x02	; 2
     ddc:	79 f4       	brne	.+30     	; 0xdfc <MCAL_DIO_TogglePin+0x7a>
		DIO_x->PORTC ^= PinNum;
     dde:	a0 91 90 00 	lds	r26, 0x0090
     de2:	b0 91 91 00 	lds	r27, 0x0091
     de6:	e0 91 90 00 	lds	r30, 0x0090
     dea:	f0 91 91 00 	lds	r31, 0x0091
     dee:	95 81       	ldd	r25, Z+5	; 0x05
     df0:	8a 81       	ldd	r24, Y+2	; 0x02
     df2:	89 27       	eor	r24, r25
     df4:	15 96       	adiw	r26, 0x05	; 5
     df6:	8c 93       	st	X, r24
     df8:	15 97       	sbiw	r26, 0x05	; 5
     dfa:	11 c0       	rjmp	.+34     	; 0xe1e <MCAL_DIO_TogglePin+0x9c>
	}

	else if (DIOx == DIOD) {
     dfc:	89 81       	ldd	r24, Y+1	; 0x01
     dfe:	83 30       	cpi	r24, 0x03	; 3
     e00:	71 f4       	brne	.+28     	; 0xe1e <MCAL_DIO_TogglePin+0x9c>
		DIO_x->PORTD ^= PinNum;
     e02:	a0 91 90 00 	lds	r26, 0x0090
     e06:	b0 91 91 00 	lds	r27, 0x0091
     e0a:	e0 91 90 00 	lds	r30, 0x0090
     e0e:	f0 91 91 00 	lds	r31, 0x0091
     e12:	92 81       	ldd	r25, Z+2	; 0x02
     e14:	8a 81       	ldd	r24, Y+2	; 0x02
     e16:	89 27       	eor	r24, r25
     e18:	12 96       	adiw	r26, 0x02	; 2
     e1a:	8c 93       	st	X, r24
     e1c:	12 97       	sbiw	r26, 0x02	; 2
	}

	else {
		return;
	}
}
     e1e:	0f 90       	pop	r0
     e20:	0f 90       	pop	r0
     e22:	cf 91       	pop	r28
     e24:	df 91       	pop	r29
     e26:	08 95       	ret

00000e28 <Calc_Power>:
uint8_t Count_Math_Operators = 0;

int32_t Result = 0;


uint32_t Calc_Power(uint8_t base, uint8_t exp) {
     e28:	df 93       	push	r29
     e2a:	cf 93       	push	r28
     e2c:	cd b7       	in	r28, 0x3d	; 61
     e2e:	de b7       	in	r29, 0x3e	; 62
     e30:	27 97       	sbiw	r28, 0x07	; 7
     e32:	0f b6       	in	r0, 0x3f	; 63
     e34:	f8 94       	cli
     e36:	de bf       	out	0x3e, r29	; 62
     e38:	0f be       	out	0x3f, r0	; 63
     e3a:	cd bf       	out	0x3d, r28	; 61
     e3c:	8e 83       	std	Y+6, r24	; 0x06
     e3e:	6f 83       	std	Y+7, r22	; 0x07
	uint32_t result = 1;
     e40:	81 e0       	ldi	r24, 0x01	; 1
     e42:	90 e0       	ldi	r25, 0x00	; 0
     e44:	a0 e0       	ldi	r26, 0x00	; 0
     e46:	b0 e0       	ldi	r27, 0x00	; 0
     e48:	8a 83       	std	Y+2, r24	; 0x02
     e4a:	9b 83       	std	Y+3, r25	; 0x03
     e4c:	ac 83       	std	Y+4, r26	; 0x04
     e4e:	bd 83       	std	Y+5, r27	; 0x05
	for (uint8_t i = 0; i < exp; i++) {
     e50:	19 82       	std	Y+1, r1	; 0x01
     e52:	16 c0       	rjmp	.+44     	; 0xe80 <Calc_Power+0x58>
		result *= base;
     e54:	8e 81       	ldd	r24, Y+6	; 0x06
     e56:	28 2f       	mov	r18, r24
     e58:	30 e0       	ldi	r19, 0x00	; 0
     e5a:	40 e0       	ldi	r20, 0x00	; 0
     e5c:	50 e0       	ldi	r21, 0x00	; 0
     e5e:	8a 81       	ldd	r24, Y+2	; 0x02
     e60:	9b 81       	ldd	r25, Y+3	; 0x03
     e62:	ac 81       	ldd	r26, Y+4	; 0x04
     e64:	bd 81       	ldd	r27, Y+5	; 0x05
     e66:	bc 01       	movw	r22, r24
     e68:	cd 01       	movw	r24, r26
     e6a:	0e 94 b6 09 	call	0x136c	; 0x136c <__mulsi3>
     e6e:	dc 01       	movw	r26, r24
     e70:	cb 01       	movw	r24, r22
     e72:	8a 83       	std	Y+2, r24	; 0x02
     e74:	9b 83       	std	Y+3, r25	; 0x03
     e76:	ac 83       	std	Y+4, r26	; 0x04
     e78:	bd 83       	std	Y+5, r27	; 0x05
int32_t Result = 0;


uint32_t Calc_Power(uint8_t base, uint8_t exp) {
	uint32_t result = 1;
	for (uint8_t i = 0; i < exp; i++) {
     e7a:	89 81       	ldd	r24, Y+1	; 0x01
     e7c:	8f 5f       	subi	r24, 0xFF	; 255
     e7e:	89 83       	std	Y+1, r24	; 0x01
     e80:	99 81       	ldd	r25, Y+1	; 0x01
     e82:	8f 81       	ldd	r24, Y+7	; 0x07
     e84:	98 17       	cp	r25, r24
     e86:	30 f3       	brcs	.-52     	; 0xe54 <Calc_Power+0x2c>
		result *= base;
	}
	return result;
     e88:	8a 81       	ldd	r24, Y+2	; 0x02
     e8a:	9b 81       	ldd	r25, Y+3	; 0x03
     e8c:	ac 81       	ldd	r26, Y+4	; 0x04
     e8e:	bd 81       	ldd	r27, Y+5	; 0x05
}
     e90:	bc 01       	movw	r22, r24
     e92:	cd 01       	movw	r24, r26
     e94:	27 96       	adiw	r28, 0x07	; 7
     e96:	0f b6       	in	r0, 0x3f	; 63
     e98:	f8 94       	cli
     e9a:	de bf       	out	0x3e, r29	; 62
     e9c:	0f be       	out	0x3f, r0	; 63
     e9e:	cd bf       	out	0x3d, r28	; 61
     ea0:	cf 91       	pop	r28
     ea2:	df 91       	pop	r29
     ea4:	08 95       	ret

00000ea6 <Integrate_Numbers>:

void Integrate_Numbers() {
     ea6:	ef 92       	push	r14
     ea8:	ff 92       	push	r15
     eaa:	0f 93       	push	r16
     eac:	1f 93       	push	r17
     eae:	df 93       	push	r29
     eb0:	cf 93       	push	r28
     eb2:	00 d0       	rcall	.+0      	; 0xeb4 <Integrate_Numbers+0xe>
     eb4:	00 d0       	rcall	.+0      	; 0xeb6 <Integrate_Numbers+0x10>
     eb6:	00 d0       	rcall	.+0      	; 0xeb8 <Integrate_Numbers+0x12>
     eb8:	cd b7       	in	r28, 0x3d	; 61
     eba:	de b7       	in	r29, 0x3e	; 62
	uint32_t parameter = 0;
     ebc:	1b 82       	std	Y+3, r1	; 0x03
     ebe:	1c 82       	std	Y+4, r1	; 0x04
     ec0:	1d 82       	std	Y+5, r1	; 0x05
     ec2:	1e 82       	std	Y+6, r1	; 0x06
	for (uint8_t i = 0; i < Count_Parameter_Digits; i++) {
     ec4:	1a 82       	std	Y+2, r1	; 0x02
     ec6:	2e c0       	rjmp	.+92     	; 0xf24 <Integrate_Numbers+0x7e>
		uint8_t power = (Count_Parameter_Digits - 1) - i;
     ec8:	90 91 93 00 	lds	r25, 0x0093
     ecc:	8a 81       	ldd	r24, Y+2	; 0x02
     ece:	29 2f       	mov	r18, r25
     ed0:	28 1b       	sub	r18, r24
     ed2:	82 2f       	mov	r24, r18
     ed4:	81 50       	subi	r24, 0x01	; 1
     ed6:	89 83       	std	Y+1, r24	; 0x01
		parameter += Parameter_Digits[i] * Calc_Power(10, power);
     ed8:	8a 81       	ldd	r24, Y+2	; 0x02
     eda:	88 2f       	mov	r24, r24
     edc:	90 e0       	ldi	r25, 0x00	; 0
     ede:	fc 01       	movw	r30, r24
     ee0:	e7 56       	subi	r30, 0x67	; 103
     ee2:	ff 4f       	sbci	r31, 0xFF	; 255
     ee4:	80 81       	ld	r24, Z
     ee6:	e8 2e       	mov	r14, r24
     ee8:	ff 24       	eor	r15, r15
     eea:	00 e0       	ldi	r16, 0x00	; 0
     eec:	10 e0       	ldi	r17, 0x00	; 0
     eee:	8a e0       	ldi	r24, 0x0A	; 10
     ef0:	69 81       	ldd	r22, Y+1	; 0x01
     ef2:	0e 94 14 07 	call	0xe28	; 0xe28 <Calc_Power>
     ef6:	9b 01       	movw	r18, r22
     ef8:	ac 01       	movw	r20, r24
     efa:	c8 01       	movw	r24, r16
     efc:	b7 01       	movw	r22, r14
     efe:	0e 94 b6 09 	call	0x136c	; 0x136c <__mulsi3>
     f02:	9b 01       	movw	r18, r22
     f04:	ac 01       	movw	r20, r24
     f06:	8b 81       	ldd	r24, Y+3	; 0x03
     f08:	9c 81       	ldd	r25, Y+4	; 0x04
     f0a:	ad 81       	ldd	r26, Y+5	; 0x05
     f0c:	be 81       	ldd	r27, Y+6	; 0x06
     f0e:	82 0f       	add	r24, r18
     f10:	93 1f       	adc	r25, r19
     f12:	a4 1f       	adc	r26, r20
     f14:	b5 1f       	adc	r27, r21
     f16:	8b 83       	std	Y+3, r24	; 0x03
     f18:	9c 83       	std	Y+4, r25	; 0x04
     f1a:	ad 83       	std	Y+5, r26	; 0x05
     f1c:	be 83       	std	Y+6, r27	; 0x06
	return result;
}

void Integrate_Numbers() {
	uint32_t parameter = 0;
	for (uint8_t i = 0; i < Count_Parameter_Digits; i++) {
     f1e:	8a 81       	ldd	r24, Y+2	; 0x02
     f20:	8f 5f       	subi	r24, 0xFF	; 255
     f22:	8a 83       	std	Y+2, r24	; 0x02
     f24:	90 91 93 00 	lds	r25, 0x0093
     f28:	8a 81       	ldd	r24, Y+2	; 0x02
     f2a:	89 17       	cp	r24, r25
     f2c:	68 f2       	brcs	.-102    	; 0xec8 <Integrate_Numbers+0x22>
		uint8_t power = (Count_Parameter_Digits - 1) - i;
		parameter += Parameter_Digits[i] * Calc_Power(10, power);
	}

	Parameters[Count_Parameters] = parameter;
     f2e:	80 91 92 00 	lds	r24, 0x0092
     f32:	88 2f       	mov	r24, r24
     f34:	90 e0       	ldi	r25, 0x00	; 0
     f36:	88 0f       	add	r24, r24
     f38:	99 1f       	adc	r25, r25
     f3a:	88 0f       	add	r24, r24
     f3c:	99 1f       	adc	r25, r25
     f3e:	fc 01       	movw	r30, r24
     f40:	e3 55       	subi	r30, 0x53	; 83
     f42:	ff 4f       	sbci	r31, 0xFF	; 255
     f44:	8b 81       	ldd	r24, Y+3	; 0x03
     f46:	9c 81       	ldd	r25, Y+4	; 0x04
     f48:	ad 81       	ldd	r26, Y+5	; 0x05
     f4a:	be 81       	ldd	r27, Y+6	; 0x06
     f4c:	80 83       	st	Z, r24
     f4e:	91 83       	std	Z+1, r25	; 0x01
     f50:	a2 83       	std	Z+2, r26	; 0x02
     f52:	b3 83       	std	Z+3, r27	; 0x03
	Count_Parameters++;
     f54:	80 91 92 00 	lds	r24, 0x0092
     f58:	8f 5f       	subi	r24, 0xFF	; 255
     f5a:	80 93 92 00 	sts	0x0092, r24
	Count_Parameter_Digits = 0;
     f5e:	10 92 93 00 	sts	0x0093, r1
}
     f62:	26 96       	adiw	r28, 0x06	; 6
     f64:	0f b6       	in	r0, 0x3f	; 63
     f66:	f8 94       	cli
     f68:	de bf       	out	0x3e, r29	; 62
     f6a:	0f be       	out	0x3f, r0	; 63
     f6c:	cd bf       	out	0x3d, r28	; 61
     f6e:	cf 91       	pop	r28
     f70:	df 91       	pop	r29
     f72:	1f 91       	pop	r17
     f74:	0f 91       	pop	r16
     f76:	ff 90       	pop	r15
     f78:	ef 90       	pop	r14
     f7a:	08 95       	ret

00000f7c <Perform_Operation>:

int32_t Perform_Operation() {
     f7c:	cf 92       	push	r12
     f7e:	df 92       	push	r13
     f80:	ef 92       	push	r14
     f82:	ff 92       	push	r15
     f84:	0f 93       	push	r16
     f86:	1f 93       	push	r17
     f88:	df 93       	push	r29
     f8a:	cf 93       	push	r28
     f8c:	00 d0       	rcall	.+0      	; 0xf8e <Perform_Operation+0x12>
     f8e:	0f 92       	push	r0
     f90:	cd b7       	in	r28, 0x3d	; 61
     f92:	de b7       	in	r29, 0x3e	; 62
	for (uint8_t i = 0; i < Count_Math_Operators - 1; i++) {
     f94:	19 82       	std	Y+1, r1	; 0x01
     f96:	02 c1       	rjmp	.+516    	; 0x119c <Perform_Operation+0x220>
		switch (Math_Operators[i]) {
     f98:	89 81       	ldd	r24, Y+1	; 0x01
     f9a:	88 2f       	mov	r24, r24
     f9c:	90 e0       	ldi	r25, 0x00	; 0
     f9e:	fc 01       	movw	r30, r24
     fa0:	ed 55       	subi	r30, 0x5D	; 93
     fa2:	ff 4f       	sbci	r31, 0xFF	; 255
     fa4:	80 81       	ld	r24, Z
     fa6:	28 2f       	mov	r18, r24
     fa8:	30 e0       	ldi	r19, 0x00	; 0
     faa:	3b 83       	std	Y+3, r19	; 0x03
     fac:	2a 83       	std	Y+2, r18	; 0x02
     fae:	8a 81       	ldd	r24, Y+2	; 0x02
     fb0:	9b 81       	ldd	r25, Y+3	; 0x03
     fb2:	8b 32       	cpi	r24, 0x2B	; 43
     fb4:	91 05       	cpc	r25, r1
     fb6:	c1 f0       	breq	.+48     	; 0xfe8 <Perform_Operation+0x6c>
     fb8:	2a 81       	ldd	r18, Y+2	; 0x02
     fba:	3b 81       	ldd	r19, Y+3	; 0x03
     fbc:	2c 32       	cpi	r18, 0x2C	; 44
     fbe:	31 05       	cpc	r19, r1
     fc0:	3c f4       	brge	.+14     	; 0xfd0 <Perform_Operation+0x54>
     fc2:	8a 81       	ldd	r24, Y+2	; 0x02
     fc4:	9b 81       	ldd	r25, Y+3	; 0x03
     fc6:	8a 32       	cpi	r24, 0x2A	; 42
     fc8:	91 05       	cpc	r25, r1
     fca:	09 f4       	brne	.+2      	; 0xfce <Perform_Operation+0x52>
     fcc:	ae c0       	rjmp	.+348    	; 0x112a <Perform_Operation+0x1ae>
     fce:	e3 c0       	rjmp	.+454    	; 0x1196 <Perform_Operation+0x21a>
     fd0:	2a 81       	ldd	r18, Y+2	; 0x02
     fd2:	3b 81       	ldd	r19, Y+3	; 0x03
     fd4:	2d 32       	cpi	r18, 0x2D	; 45
     fd6:	31 05       	cpc	r19, r1
     fd8:	d9 f1       	breq	.+118    	; 0x1050 <Perform_Operation+0xd4>
     fda:	8a 81       	ldd	r24, Y+2	; 0x02
     fdc:	9b 81       	ldd	r25, Y+3	; 0x03
     fde:	8f 32       	cpi	r24, 0x2F	; 47
     fe0:	91 05       	cpc	r25, r1
     fe2:	09 f4       	brne	.+2      	; 0xfe6 <Perform_Operation+0x6a>
     fe4:	69 c0       	rjmp	.+210    	; 0x10b8 <Perform_Operation+0x13c>
     fe6:	d7 c0       	rjmp	.+430    	; 0x1196 <Perform_Operation+0x21a>
		case '+':	Parameters[i + 1] = Parameters[i] + Parameters[i + 1];	break;
     fe8:	89 81       	ldd	r24, Y+1	; 0x01
     fea:	88 2f       	mov	r24, r24
     fec:	90 e0       	ldi	r25, 0x00	; 0
     fee:	bc 01       	movw	r22, r24
     ff0:	6f 5f       	subi	r22, 0xFF	; 255
     ff2:	7f 4f       	sbci	r23, 0xFF	; 255
     ff4:	89 81       	ldd	r24, Y+1	; 0x01
     ff6:	88 2f       	mov	r24, r24
     ff8:	90 e0       	ldi	r25, 0x00	; 0
     ffa:	88 0f       	add	r24, r24
     ffc:	99 1f       	adc	r25, r25
     ffe:	88 0f       	add	r24, r24
    1000:	99 1f       	adc	r25, r25
    1002:	fc 01       	movw	r30, r24
    1004:	e3 55       	subi	r30, 0x53	; 83
    1006:	ff 4f       	sbci	r31, 0xFF	; 255
    1008:	20 81       	ld	r18, Z
    100a:	31 81       	ldd	r19, Z+1	; 0x01
    100c:	42 81       	ldd	r20, Z+2	; 0x02
    100e:	53 81       	ldd	r21, Z+3	; 0x03
    1010:	89 81       	ldd	r24, Y+1	; 0x01
    1012:	88 2f       	mov	r24, r24
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	01 96       	adiw	r24, 0x01	; 1
    1018:	88 0f       	add	r24, r24
    101a:	99 1f       	adc	r25, r25
    101c:	88 0f       	add	r24, r24
    101e:	99 1f       	adc	r25, r25
    1020:	fc 01       	movw	r30, r24
    1022:	e3 55       	subi	r30, 0x53	; 83
    1024:	ff 4f       	sbci	r31, 0xFF	; 255
    1026:	80 81       	ld	r24, Z
    1028:	91 81       	ldd	r25, Z+1	; 0x01
    102a:	a2 81       	ldd	r26, Z+2	; 0x02
    102c:	b3 81       	ldd	r27, Z+3	; 0x03
    102e:	28 0f       	add	r18, r24
    1030:	39 1f       	adc	r19, r25
    1032:	4a 1f       	adc	r20, r26
    1034:	5b 1f       	adc	r21, r27
    1036:	cb 01       	movw	r24, r22
    1038:	88 0f       	add	r24, r24
    103a:	99 1f       	adc	r25, r25
    103c:	88 0f       	add	r24, r24
    103e:	99 1f       	adc	r25, r25
    1040:	fc 01       	movw	r30, r24
    1042:	e3 55       	subi	r30, 0x53	; 83
    1044:	ff 4f       	sbci	r31, 0xFF	; 255
    1046:	20 83       	st	Z, r18
    1048:	31 83       	std	Z+1, r19	; 0x01
    104a:	42 83       	std	Z+2, r20	; 0x02
    104c:	53 83       	std	Z+3, r21	; 0x03
    104e:	a3 c0       	rjmp	.+326    	; 0x1196 <Perform_Operation+0x21a>
		case '-':	Parameters[i + 1] = Parameters[i] - Parameters[i + 1];	break;
    1050:	89 81       	ldd	r24, Y+1	; 0x01
    1052:	88 2f       	mov	r24, r24
    1054:	90 e0       	ldi	r25, 0x00	; 0
    1056:	bc 01       	movw	r22, r24
    1058:	6f 5f       	subi	r22, 0xFF	; 255
    105a:	7f 4f       	sbci	r23, 0xFF	; 255
    105c:	89 81       	ldd	r24, Y+1	; 0x01
    105e:	88 2f       	mov	r24, r24
    1060:	90 e0       	ldi	r25, 0x00	; 0
    1062:	88 0f       	add	r24, r24
    1064:	99 1f       	adc	r25, r25
    1066:	88 0f       	add	r24, r24
    1068:	99 1f       	adc	r25, r25
    106a:	fc 01       	movw	r30, r24
    106c:	e3 55       	subi	r30, 0x53	; 83
    106e:	ff 4f       	sbci	r31, 0xFF	; 255
    1070:	20 81       	ld	r18, Z
    1072:	31 81       	ldd	r19, Z+1	; 0x01
    1074:	42 81       	ldd	r20, Z+2	; 0x02
    1076:	53 81       	ldd	r21, Z+3	; 0x03
    1078:	89 81       	ldd	r24, Y+1	; 0x01
    107a:	88 2f       	mov	r24, r24
    107c:	90 e0       	ldi	r25, 0x00	; 0
    107e:	01 96       	adiw	r24, 0x01	; 1
    1080:	88 0f       	add	r24, r24
    1082:	99 1f       	adc	r25, r25
    1084:	88 0f       	add	r24, r24
    1086:	99 1f       	adc	r25, r25
    1088:	fc 01       	movw	r30, r24
    108a:	e3 55       	subi	r30, 0x53	; 83
    108c:	ff 4f       	sbci	r31, 0xFF	; 255
    108e:	80 81       	ld	r24, Z
    1090:	91 81       	ldd	r25, Z+1	; 0x01
    1092:	a2 81       	ldd	r26, Z+2	; 0x02
    1094:	b3 81       	ldd	r27, Z+3	; 0x03
    1096:	28 1b       	sub	r18, r24
    1098:	39 0b       	sbc	r19, r25
    109a:	4a 0b       	sbc	r20, r26
    109c:	5b 0b       	sbc	r21, r27
    109e:	cb 01       	movw	r24, r22
    10a0:	88 0f       	add	r24, r24
    10a2:	99 1f       	adc	r25, r25
    10a4:	88 0f       	add	r24, r24
    10a6:	99 1f       	adc	r25, r25
    10a8:	fc 01       	movw	r30, r24
    10aa:	e3 55       	subi	r30, 0x53	; 83
    10ac:	ff 4f       	sbci	r31, 0xFF	; 255
    10ae:	20 83       	st	Z, r18
    10b0:	31 83       	std	Z+1, r19	; 0x01
    10b2:	42 83       	std	Z+2, r20	; 0x02
    10b4:	53 83       	std	Z+3, r21	; 0x03
    10b6:	6f c0       	rjmp	.+222    	; 0x1196 <Perform_Operation+0x21a>
		case '/':	Parameters[i + 1] = Parameters[i] / Parameters[i + 1];	break;
    10b8:	89 81       	ldd	r24, Y+1	; 0x01
    10ba:	88 2f       	mov	r24, r24
    10bc:	90 e0       	ldi	r25, 0x00	; 0
    10be:	6c 01       	movw	r12, r24
    10c0:	08 94       	sec
    10c2:	c1 1c       	adc	r12, r1
    10c4:	d1 1c       	adc	r13, r1
    10c6:	89 81       	ldd	r24, Y+1	; 0x01
    10c8:	88 2f       	mov	r24, r24
    10ca:	90 e0       	ldi	r25, 0x00	; 0
    10cc:	88 0f       	add	r24, r24
    10ce:	99 1f       	adc	r25, r25
    10d0:	88 0f       	add	r24, r24
    10d2:	99 1f       	adc	r25, r25
    10d4:	fc 01       	movw	r30, r24
    10d6:	e3 55       	subi	r30, 0x53	; 83
    10d8:	ff 4f       	sbci	r31, 0xFF	; 255
    10da:	e0 80       	ld	r14, Z
    10dc:	f1 80       	ldd	r15, Z+1	; 0x01
    10de:	02 81       	ldd	r16, Z+2	; 0x02
    10e0:	13 81       	ldd	r17, Z+3	; 0x03
    10e2:	89 81       	ldd	r24, Y+1	; 0x01
    10e4:	88 2f       	mov	r24, r24
    10e6:	90 e0       	ldi	r25, 0x00	; 0
    10e8:	01 96       	adiw	r24, 0x01	; 1
    10ea:	88 0f       	add	r24, r24
    10ec:	99 1f       	adc	r25, r25
    10ee:	88 0f       	add	r24, r24
    10f0:	99 1f       	adc	r25, r25
    10f2:	fc 01       	movw	r30, r24
    10f4:	e3 55       	subi	r30, 0x53	; 83
    10f6:	ff 4f       	sbci	r31, 0xFF	; 255
    10f8:	20 81       	ld	r18, Z
    10fa:	31 81       	ldd	r19, Z+1	; 0x01
    10fc:	42 81       	ldd	r20, Z+2	; 0x02
    10fe:	53 81       	ldd	r21, Z+3	; 0x03
    1100:	c8 01       	movw	r24, r16
    1102:	b7 01       	movw	r22, r14
    1104:	0e 94 d5 09 	call	0x13aa	; 0x13aa <__udivmodsi4>
    1108:	da 01       	movw	r26, r20
    110a:	c9 01       	movw	r24, r18
    110c:	9c 01       	movw	r18, r24
    110e:	ad 01       	movw	r20, r26
    1110:	c6 01       	movw	r24, r12
    1112:	88 0f       	add	r24, r24
    1114:	99 1f       	adc	r25, r25
    1116:	88 0f       	add	r24, r24
    1118:	99 1f       	adc	r25, r25
    111a:	fc 01       	movw	r30, r24
    111c:	e3 55       	subi	r30, 0x53	; 83
    111e:	ff 4f       	sbci	r31, 0xFF	; 255
    1120:	20 83       	st	Z, r18
    1122:	31 83       	std	Z+1, r19	; 0x01
    1124:	42 83       	std	Z+2, r20	; 0x02
    1126:	53 83       	std	Z+3, r21	; 0x03
    1128:	36 c0       	rjmp	.+108    	; 0x1196 <Perform_Operation+0x21a>
		case '*':	Parameters[i + 1] = Parameters[i] * Parameters[i + 1];	break;
    112a:	89 81       	ldd	r24, Y+1	; 0x01
    112c:	88 2f       	mov	r24, r24
    112e:	90 e0       	ldi	r25, 0x00	; 0
    1130:	6c 01       	movw	r12, r24
    1132:	08 94       	sec
    1134:	c1 1c       	adc	r12, r1
    1136:	d1 1c       	adc	r13, r1
    1138:	89 81       	ldd	r24, Y+1	; 0x01
    113a:	88 2f       	mov	r24, r24
    113c:	90 e0       	ldi	r25, 0x00	; 0
    113e:	88 0f       	add	r24, r24
    1140:	99 1f       	adc	r25, r25
    1142:	88 0f       	add	r24, r24
    1144:	99 1f       	adc	r25, r25
    1146:	fc 01       	movw	r30, r24
    1148:	e3 55       	subi	r30, 0x53	; 83
    114a:	ff 4f       	sbci	r31, 0xFF	; 255
    114c:	e0 80       	ld	r14, Z
    114e:	f1 80       	ldd	r15, Z+1	; 0x01
    1150:	02 81       	ldd	r16, Z+2	; 0x02
    1152:	13 81       	ldd	r17, Z+3	; 0x03
    1154:	89 81       	ldd	r24, Y+1	; 0x01
    1156:	88 2f       	mov	r24, r24
    1158:	90 e0       	ldi	r25, 0x00	; 0
    115a:	01 96       	adiw	r24, 0x01	; 1
    115c:	88 0f       	add	r24, r24
    115e:	99 1f       	adc	r25, r25
    1160:	88 0f       	add	r24, r24
    1162:	99 1f       	adc	r25, r25
    1164:	fc 01       	movw	r30, r24
    1166:	e3 55       	subi	r30, 0x53	; 83
    1168:	ff 4f       	sbci	r31, 0xFF	; 255
    116a:	20 81       	ld	r18, Z
    116c:	31 81       	ldd	r19, Z+1	; 0x01
    116e:	42 81       	ldd	r20, Z+2	; 0x02
    1170:	53 81       	ldd	r21, Z+3	; 0x03
    1172:	c8 01       	movw	r24, r16
    1174:	b7 01       	movw	r22, r14
    1176:	0e 94 b6 09 	call	0x136c	; 0x136c <__mulsi3>
    117a:	9b 01       	movw	r18, r22
    117c:	ac 01       	movw	r20, r24
    117e:	c6 01       	movw	r24, r12
    1180:	88 0f       	add	r24, r24
    1182:	99 1f       	adc	r25, r25
    1184:	88 0f       	add	r24, r24
    1186:	99 1f       	adc	r25, r25
    1188:	fc 01       	movw	r30, r24
    118a:	e3 55       	subi	r30, 0x53	; 83
    118c:	ff 4f       	sbci	r31, 0xFF	; 255
    118e:	20 83       	st	Z, r18
    1190:	31 83       	std	Z+1, r19	; 0x01
    1192:	42 83       	std	Z+2, r20	; 0x02
    1194:	53 83       	std	Z+3, r21	; 0x03
	Count_Parameters++;
	Count_Parameter_Digits = 0;
}

int32_t Perform_Operation() {
	for (uint8_t i = 0; i < Count_Math_Operators - 1; i++) {
    1196:	89 81       	ldd	r24, Y+1	; 0x01
    1198:	8f 5f       	subi	r24, 0xFF	; 255
    119a:	89 83       	std	Y+1, r24	; 0x01
    119c:	89 81       	ldd	r24, Y+1	; 0x01
    119e:	28 2f       	mov	r18, r24
    11a0:	30 e0       	ldi	r19, 0x00	; 0
    11a2:	80 91 94 00 	lds	r24, 0x0094
    11a6:	88 2f       	mov	r24, r24
    11a8:	90 e0       	ldi	r25, 0x00	; 0
    11aa:	01 97       	sbiw	r24, 0x01	; 1
    11ac:	28 17       	cp	r18, r24
    11ae:	39 07       	cpc	r19, r25
    11b0:	0c f4       	brge	.+2      	; 0x11b4 <Perform_Operation+0x238>
    11b2:	f2 ce       	rjmp	.-540    	; 0xf98 <Perform_Operation+0x1c>
		case '-':	Parameters[i + 1] = Parameters[i] - Parameters[i + 1];	break;
		case '/':	Parameters[i + 1] = Parameters[i] / Parameters[i + 1];	break;
		case '*':	Parameters[i + 1] = Parameters[i] * Parameters[i + 1];	break;
		}
	}
	return Parameters[Count_Parameters - 1];
    11b4:	80 91 92 00 	lds	r24, 0x0092
    11b8:	88 2f       	mov	r24, r24
    11ba:	90 e0       	ldi	r25, 0x00	; 0
    11bc:	01 97       	sbiw	r24, 0x01	; 1
    11be:	88 0f       	add	r24, r24
    11c0:	99 1f       	adc	r25, r25
    11c2:	88 0f       	add	r24, r24
    11c4:	99 1f       	adc	r25, r25
    11c6:	fc 01       	movw	r30, r24
    11c8:	e3 55       	subi	r30, 0x53	; 83
    11ca:	ff 4f       	sbci	r31, 0xFF	; 255
    11cc:	80 81       	ld	r24, Z
    11ce:	91 81       	ldd	r25, Z+1	; 0x01
    11d0:	a2 81       	ldd	r26, Z+2	; 0x02
    11d2:	b3 81       	ldd	r27, Z+3	; 0x03
}
    11d4:	bc 01       	movw	r22, r24
    11d6:	cd 01       	movw	r24, r26
    11d8:	0f 90       	pop	r0
    11da:	0f 90       	pop	r0
    11dc:	0f 90       	pop	r0
    11de:	cf 91       	pop	r28
    11e0:	df 91       	pop	r29
    11e2:	1f 91       	pop	r17
    11e4:	0f 91       	pop	r16
    11e6:	ff 90       	pop	r15
    11e8:	ef 90       	pop	r14
    11ea:	df 90       	pop	r13
    11ec:	cf 90       	pop	r12
    11ee:	08 95       	ret

000011f0 <KPD_Calculator>:

int32_t KPD_Calculator(uint8_t input) {
    11f0:	df 93       	push	r29
    11f2:	cf 93       	push	r28
    11f4:	0f 92       	push	r0
    11f6:	cd b7       	in	r28, 0x3d	; 61
    11f8:	de b7       	in	r29, 0x3e	; 62
    11fa:	89 83       	std	Y+1, r24	; 0x01
	if (input == '=' || input == '+' || input == '-' || input == '/' || input == '*') {
    11fc:	89 81       	ldd	r24, Y+1	; 0x01
    11fe:	8d 33       	cpi	r24, 0x3D	; 61
    1200:	61 f0       	breq	.+24     	; 0x121a <KPD_Calculator+0x2a>
    1202:	89 81       	ldd	r24, Y+1	; 0x01
    1204:	8b 32       	cpi	r24, 0x2B	; 43
    1206:	49 f0       	breq	.+18     	; 0x121a <KPD_Calculator+0x2a>
    1208:	89 81       	ldd	r24, Y+1	; 0x01
    120a:	8d 32       	cpi	r24, 0x2D	; 45
    120c:	31 f0       	breq	.+12     	; 0x121a <KPD_Calculator+0x2a>
    120e:	89 81       	ldd	r24, Y+1	; 0x01
    1210:	8f 32       	cpi	r24, 0x2F	; 47
    1212:	19 f0       	breq	.+6      	; 0x121a <KPD_Calculator+0x2a>
    1214:	89 81       	ldd	r24, Y+1	; 0x01
    1216:	8a 32       	cpi	r24, 0x2A	; 42
    1218:	f9 f4       	brne	.+62     	; 0x1258 <KPD_Calculator+0x68>
		Integrate_Numbers();
    121a:	0e 94 53 07 	call	0xea6	; 0xea6 <Integrate_Numbers>
		Math_Operators[Count_Math_Operators++] = input;
    121e:	20 91 94 00 	lds	r18, 0x0094
    1222:	82 2f       	mov	r24, r18
    1224:	90 e0       	ldi	r25, 0x00	; 0
    1226:	fc 01       	movw	r30, r24
    1228:	ed 55       	subi	r30, 0x5D	; 93
    122a:	ff 4f       	sbci	r31, 0xFF	; 255
    122c:	89 81       	ldd	r24, Y+1	; 0x01
    122e:	80 83       	st	Z, r24
    1230:	82 2f       	mov	r24, r18
    1232:	8f 5f       	subi	r24, 0xFF	; 255
    1234:	80 93 94 00 	sts	0x0094, r24

		if (input == '=') {
    1238:	89 81       	ldd	r24, Y+1	; 0x01
    123a:	8d 33       	cpi	r24, 0x3D	; 61
    123c:	e1 f4       	brne	.+56     	; 0x1276 <KPD_Calculator+0x86>
			Result = Perform_Operation();
    123e:	0e 94 be 07 	call	0xf7c	; 0xf7c <Perform_Operation>
    1242:	dc 01       	movw	r26, r24
    1244:	cb 01       	movw	r24, r22
    1246:	80 93 95 00 	sts	0x0095, r24
    124a:	90 93 96 00 	sts	0x0096, r25
    124e:	a0 93 97 00 	sts	0x0097, r26
    1252:	b0 93 98 00 	sts	0x0098, r27
    1256:	0f c0       	rjmp	.+30     	; 0x1276 <KPD_Calculator+0x86>
		}
	} else {

		Parameter_Digits[Count_Parameter_Digits] = input - '0';
    1258:	80 91 93 00 	lds	r24, 0x0093
    125c:	28 2f       	mov	r18, r24
    125e:	30 e0       	ldi	r19, 0x00	; 0
    1260:	89 81       	ldd	r24, Y+1	; 0x01
    1262:	80 53       	subi	r24, 0x30	; 48
    1264:	f9 01       	movw	r30, r18
    1266:	e7 56       	subi	r30, 0x67	; 103
    1268:	ff 4f       	sbci	r31, 0xFF	; 255
    126a:	80 83       	st	Z, r24
		Count_Parameter_Digits++;
    126c:	80 91 93 00 	lds	r24, 0x0093
    1270:	8f 5f       	subi	r24, 0xFF	; 255
    1272:	80 93 93 00 	sts	0x0093, r24
	}
	return Result;
    1276:	80 91 95 00 	lds	r24, 0x0095
    127a:	90 91 96 00 	lds	r25, 0x0096
    127e:	a0 91 97 00 	lds	r26, 0x0097
    1282:	b0 91 98 00 	lds	r27, 0x0098
}
    1286:	bc 01       	movw	r22, r24
    1288:	cd 01       	movw	r24, r26
    128a:	0f 90       	pop	r0
    128c:	cf 91       	pop	r28
    128e:	df 91       	pop	r29
    1290:	08 95       	ret

00001292 <main>:

int main(void) {
    1292:	df 93       	push	r29
    1294:	cf 93       	push	r28
    1296:	cd b7       	in	r28, 0x3d	; 61
    1298:	de b7       	in	r29, 0x3e	; 62
    129a:	27 97       	sbiw	r28, 0x07	; 7
    129c:	0f b6       	in	r0, 0x3f	; 63
    129e:	f8 94       	cli
    12a0:	de bf       	out	0x3e, r29	; 62
    12a2:	0f be       	out	0x3f, r0	; 63
    12a4:	cd bf       	out	0x3d, r28	; 61

	HAL_LCD_Init();
    12a6:	0e 94 19 01 	call	0x232	; 0x232 <HAL_LCD_Init>

	uint8_t key_pressed;
	int32_t result = 0;
    12aa:	19 82       	std	Y+1, r1	; 0x01
    12ac:	1a 82       	std	Y+2, r1	; 0x02
    12ae:	1b 82       	std	Y+3, r1	; 0x03
    12b0:	1c 82       	std	Y+4, r1	; 0x04

	while (1) {
		key_pressed = KPD_GetKeyState();
    12b2:	0e 94 34 03 	call	0x668	; 0x668 <KPD_GetKeyState>
    12b6:	8d 83       	std	Y+5, r24	; 0x05

		switch (key_pressed) {
    12b8:	8d 81       	ldd	r24, Y+5	; 0x05
    12ba:	28 2f       	mov	r18, r24
    12bc:	30 e0       	ldi	r19, 0x00	; 0
    12be:	3f 83       	std	Y+7, r19	; 0x07
    12c0:	2e 83       	std	Y+6, r18	; 0x06
    12c2:	8e 81       	ldd	r24, Y+6	; 0x06
    12c4:	9f 81       	ldd	r25, Y+7	; 0x07
    12c6:	8f 33       	cpi	r24, 0x3F	; 63
    12c8:	91 05       	cpc	r25, r1
    12ca:	59 f0       	breq	.+22     	; 0x12e2 <main+0x50>
    12cc:	2e 81       	ldd	r18, Y+6	; 0x06
    12ce:	3f 81       	ldd	r19, Y+7	; 0x07
    12d0:	21 34       	cpi	r18, 0x41	; 65
    12d2:	31 05       	cpc	r19, r1
    12d4:	71 f3       	breq	.-36     	; 0x12b2 <main+0x20>
    12d6:	8e 81       	ldd	r24, Y+6	; 0x06
    12d8:	9f 81       	ldd	r25, Y+7	; 0x07
    12da:	8d 33       	cpi	r24, 0x3D	; 61
    12dc:	91 05       	cpc	r25, r1
    12de:	91 f0       	breq	.+36     	; 0x1304 <main+0x72>
    12e0:	3e c0       	rjmp	.+124    	; 0x135e <main+0xcc>
		case 'A':
			break;

		case '?':
			HAL_LCD_Clean_Screen();
    12e2:	0e 94 f7 01 	call	0x3ee	; 0x3ee <HAL_LCD_Clean_Screen>

			Count_Parameters = 0;
    12e6:	10 92 92 00 	sts	0x0092, r1
			Count_Parameter_Digits = 0;
    12ea:	10 92 93 00 	sts	0x0093, r1
			Count_Math_Operators = 0;
    12ee:	10 92 94 00 	sts	0x0094, r1
			Result = 0;
    12f2:	10 92 95 00 	sts	0x0095, r1
    12f6:	10 92 96 00 	sts	0x0096, r1
    12fa:	10 92 97 00 	sts	0x0097, r1
    12fe:	10 92 98 00 	sts	0x0098, r1
    1302:	d7 cf       	rjmp	.-82     	; 0x12b2 <main+0x20>
			break;

		case '=':

			result = KPD_Calculator(key_pressed);
    1304:	8d 81       	ldd	r24, Y+5	; 0x05
    1306:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <KPD_Calculator>
    130a:	dc 01       	movw	r26, r24
    130c:	cb 01       	movw	r24, r22
    130e:	89 83       	std	Y+1, r24	; 0x01
    1310:	9a 83       	std	Y+2, r25	; 0x02
    1312:	ab 83       	std	Y+3, r26	; 0x03
    1314:	bc 83       	std	Y+4, r27	; 0x04
			HAL_LCD_Send_Char('=');
    1316:	8d e3       	ldi	r24, 0x3D	; 61
    1318:	0e 94 6e 01 	call	0x2dc	; 0x2dc <HAL_LCD_Send_Char>

			if (result < 0) {
    131c:	89 81       	ldd	r24, Y+1	; 0x01
    131e:	9a 81       	ldd	r25, Y+2	; 0x02
    1320:	ab 81       	ldd	r26, Y+3	; 0x03
    1322:	bc 81       	ldd	r27, Y+4	; 0x04
    1324:	bb 23       	and	r27, r27
    1326:	94 f4       	brge	.+36     	; 0x134c <main+0xba>
				HAL_LCD_Send_Char('-');
    1328:	8d e2       	ldi	r24, 0x2D	; 45
    132a:	0e 94 6e 01 	call	0x2dc	; 0x2dc <HAL_LCD_Send_Char>
				result = -result;
    132e:	89 81       	ldd	r24, Y+1	; 0x01
    1330:	9a 81       	ldd	r25, Y+2	; 0x02
    1332:	ab 81       	ldd	r26, Y+3	; 0x03
    1334:	bc 81       	ldd	r27, Y+4	; 0x04
    1336:	b0 95       	com	r27
    1338:	a0 95       	com	r26
    133a:	90 95       	com	r25
    133c:	81 95       	neg	r24
    133e:	9f 4f       	sbci	r25, 0xFF	; 255
    1340:	af 4f       	sbci	r26, 0xFF	; 255
    1342:	bf 4f       	sbci	r27, 0xFF	; 255
    1344:	89 83       	std	Y+1, r24	; 0x01
    1346:	9a 83       	std	Y+2, r25	; 0x02
    1348:	ab 83       	std	Y+3, r26	; 0x03
    134a:	bc 83       	std	Y+4, r27	; 0x04
			}

			HAL_LCD_Send_Number(result);
    134c:	89 81       	ldd	r24, Y+1	; 0x01
    134e:	9a 81       	ldd	r25, Y+2	; 0x02
    1350:	ab 81       	ldd	r26, Y+3	; 0x03
    1352:	bc 81       	ldd	r27, Y+4	; 0x04
    1354:	bc 01       	movw	r22, r24
    1356:	cd 01       	movw	r24, r26
    1358:	0e 94 07 02 	call	0x40e	; 0x40e <HAL_LCD_Send_Number>
    135c:	aa cf       	rjmp	.-172    	; 0x12b2 <main+0x20>
			break;

		default:
			KPD_Calculator(key_pressed);
    135e:	8d 81       	ldd	r24, Y+5	; 0x05
    1360:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <KPD_Calculator>
			HAL_LCD_Send_Char(key_pressed);
    1364:	8d 81       	ldd	r24, Y+5	; 0x05
    1366:	0e 94 6e 01 	call	0x2dc	; 0x2dc <HAL_LCD_Send_Char>
    136a:	a3 cf       	rjmp	.-186    	; 0x12b2 <main+0x20>

0000136c <__mulsi3>:
    136c:	62 9f       	mul	r22, r18
    136e:	d0 01       	movw	r26, r0
    1370:	73 9f       	mul	r23, r19
    1372:	f0 01       	movw	r30, r0
    1374:	82 9f       	mul	r24, r18
    1376:	e0 0d       	add	r30, r0
    1378:	f1 1d       	adc	r31, r1
    137a:	64 9f       	mul	r22, r20
    137c:	e0 0d       	add	r30, r0
    137e:	f1 1d       	adc	r31, r1
    1380:	92 9f       	mul	r25, r18
    1382:	f0 0d       	add	r31, r0
    1384:	83 9f       	mul	r24, r19
    1386:	f0 0d       	add	r31, r0
    1388:	74 9f       	mul	r23, r20
    138a:	f0 0d       	add	r31, r0
    138c:	65 9f       	mul	r22, r21
    138e:	f0 0d       	add	r31, r0
    1390:	99 27       	eor	r25, r25
    1392:	72 9f       	mul	r23, r18
    1394:	b0 0d       	add	r27, r0
    1396:	e1 1d       	adc	r30, r1
    1398:	f9 1f       	adc	r31, r25
    139a:	63 9f       	mul	r22, r19
    139c:	b0 0d       	add	r27, r0
    139e:	e1 1d       	adc	r30, r1
    13a0:	f9 1f       	adc	r31, r25
    13a2:	bd 01       	movw	r22, r26
    13a4:	cf 01       	movw	r24, r30
    13a6:	11 24       	eor	r1, r1
    13a8:	08 95       	ret

000013aa <__udivmodsi4>:
    13aa:	a1 e2       	ldi	r26, 0x21	; 33
    13ac:	1a 2e       	mov	r1, r26
    13ae:	aa 1b       	sub	r26, r26
    13b0:	bb 1b       	sub	r27, r27
    13b2:	fd 01       	movw	r30, r26
    13b4:	0d c0       	rjmp	.+26     	; 0x13d0 <__udivmodsi4_ep>

000013b6 <__udivmodsi4_loop>:
    13b6:	aa 1f       	adc	r26, r26
    13b8:	bb 1f       	adc	r27, r27
    13ba:	ee 1f       	adc	r30, r30
    13bc:	ff 1f       	adc	r31, r31
    13be:	a2 17       	cp	r26, r18
    13c0:	b3 07       	cpc	r27, r19
    13c2:	e4 07       	cpc	r30, r20
    13c4:	f5 07       	cpc	r31, r21
    13c6:	20 f0       	brcs	.+8      	; 0x13d0 <__udivmodsi4_ep>
    13c8:	a2 1b       	sub	r26, r18
    13ca:	b3 0b       	sbc	r27, r19
    13cc:	e4 0b       	sbc	r30, r20
    13ce:	f5 0b       	sbc	r31, r21

000013d0 <__udivmodsi4_ep>:
    13d0:	66 1f       	adc	r22, r22
    13d2:	77 1f       	adc	r23, r23
    13d4:	88 1f       	adc	r24, r24
    13d6:	99 1f       	adc	r25, r25
    13d8:	1a 94       	dec	r1
    13da:	69 f7       	brne	.-38     	; 0x13b6 <__udivmodsi4_loop>
    13dc:	60 95       	com	r22
    13de:	70 95       	com	r23
    13e0:	80 95       	com	r24
    13e2:	90 95       	com	r25
    13e4:	9b 01       	movw	r18, r22
    13e6:	ac 01       	movw	r20, r24
    13e8:	bd 01       	movw	r22, r26
    13ea:	cf 01       	movw	r24, r30
    13ec:	08 95       	ret

000013ee <_exit>:
    13ee:	f8 94       	cli

000013f0 <__stop_program>:
    13f0:	ff cf       	rjmp	.-2      	; 0x13f0 <__stop_program>
