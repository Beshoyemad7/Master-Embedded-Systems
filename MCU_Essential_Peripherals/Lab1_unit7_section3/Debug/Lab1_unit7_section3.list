
Lab1_unit7_section3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000009f0  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08000b20  08000b20  00010b20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000b38  08000b38  00020048  2**0
                  CONTENTS
  4 .ARM          00000000  08000b38  08000b38  00020048  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000b38  08000b38  00020048  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000b38  08000b38  00010b38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000b3c  08000b3c  00010b3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000048  20000000  08000b40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000048  08000b88  00020048  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000064  08000b88  00020064  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY
 12 .debug_info   000031cd  00000000  00000000  00020071  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000826  00000000  00000000  0002323e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000007dc  00000000  00000000  00023a64  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000150  00000000  00000000  00024240  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000108  00000000  00000000  00024390  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00002036  00000000  00000000  00024498  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00001aa4  00000000  00000000  000264ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00007c96  00000000  00000000  00027f72  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0002fc08  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000404  00000000  00000000  0002fc84  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000048 	.word	0x20000048
 800014c:	00000000 	.word	0x00000000
 8000150:	08000b08 	.word	0x08000b08

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	2000004c 	.word	0x2000004c
 800016c:	08000b08 	.word	0x08000b08

08000170 <Get_CRLH_Position>:
* Note			- none
*
*/

uint16_t Get_CRLH_Position(uint16_t PinNumber)
{
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	80fb      	strh	r3, [r7, #6]
	switch(PinNumber)
 800017a:	88fb      	ldrh	r3, [r7, #6]
 800017c:	2b80      	cmp	r3, #128	; 0x80
 800017e:	d042      	beq.n	8000206 <Get_CRLH_Position+0x96>
 8000180:	2b80      	cmp	r3, #128	; 0x80
 8000182:	dc11      	bgt.n	80001a8 <Get_CRLH_Position+0x38>
 8000184:	2b08      	cmp	r3, #8
 8000186:	d036      	beq.n	80001f6 <Get_CRLH_Position+0x86>
 8000188:	2b08      	cmp	r3, #8
 800018a:	dc06      	bgt.n	800019a <Get_CRLH_Position+0x2a>
 800018c:	2b02      	cmp	r3, #2
 800018e:	d02e      	beq.n	80001ee <Get_CRLH_Position+0x7e>
 8000190:	2b04      	cmp	r3, #4
 8000192:	d02e      	beq.n	80001f2 <Get_CRLH_Position+0x82>
 8000194:	2b01      	cmp	r3, #1
 8000196:	d028      	beq.n	80001ea <Get_CRLH_Position+0x7a>
 8000198:	e047      	b.n	800022a <Get_CRLH_Position+0xba>
 800019a:	2b20      	cmp	r3, #32
 800019c:	d02f      	beq.n	80001fe <Get_CRLH_Position+0x8e>
 800019e:	2b40      	cmp	r3, #64	; 0x40
 80001a0:	d02f      	beq.n	8000202 <Get_CRLH_Position+0x92>
 80001a2:	2b10      	cmp	r3, #16
 80001a4:	d029      	beq.n	80001fa <Get_CRLH_Position+0x8a>
 80001a6:	e040      	b.n	800022a <Get_CRLH_Position+0xba>
 80001a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80001ac:	d033      	beq.n	8000216 <Get_CRLH_Position+0xa6>
 80001ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80001b2:	dc09      	bgt.n	80001c8 <Get_CRLH_Position+0x58>
 80001b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80001b8:	d029      	beq.n	800020e <Get_CRLH_Position+0x9e>
 80001ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80001be:	d028      	beq.n	8000212 <Get_CRLH_Position+0xa2>
 80001c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80001c4:	d021      	beq.n	800020a <Get_CRLH_Position+0x9a>
 80001c6:	e030      	b.n	800022a <Get_CRLH_Position+0xba>
 80001c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80001cc:	d027      	beq.n	800021e <Get_CRLH_Position+0xae>
 80001ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80001d2:	dc03      	bgt.n	80001dc <Get_CRLH_Position+0x6c>
 80001d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80001d8:	d01f      	beq.n	800021a <Get_CRLH_Position+0xaa>
 80001da:	e026      	b.n	800022a <Get_CRLH_Position+0xba>
 80001dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80001e0:	d01f      	beq.n	8000222 <Get_CRLH_Position+0xb2>
 80001e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80001e6:	d01e      	beq.n	8000226 <Get_CRLH_Position+0xb6>
 80001e8:	e01f      	b.n	800022a <Get_CRLH_Position+0xba>
	{
	case GPIO_PIN_0:	return 0;
 80001ea:	2300      	movs	r3, #0
 80001ec:	e01f      	b.n	800022e <Get_CRLH_Position+0xbe>
	break;

	case GPIO_PIN_1:	return 4;
 80001ee:	2304      	movs	r3, #4
 80001f0:	e01d      	b.n	800022e <Get_CRLH_Position+0xbe>
	break;

	case GPIO_PIN_2:	return 8;
 80001f2:	2308      	movs	r3, #8
 80001f4:	e01b      	b.n	800022e <Get_CRLH_Position+0xbe>
	break;

	case GPIO_PIN_3:	return 12;
 80001f6:	230c      	movs	r3, #12
 80001f8:	e019      	b.n	800022e <Get_CRLH_Position+0xbe>
	break;

	case GPIO_PIN_4:	return 16;
 80001fa:	2310      	movs	r3, #16
 80001fc:	e017      	b.n	800022e <Get_CRLH_Position+0xbe>
	break;

	case GPIO_PIN_5:	return 20;
 80001fe:	2314      	movs	r3, #20
 8000200:	e015      	b.n	800022e <Get_CRLH_Position+0xbe>
	break;

	case GPIO_PIN_6:	return 24;
 8000202:	2318      	movs	r3, #24
 8000204:	e013      	b.n	800022e <Get_CRLH_Position+0xbe>
	break;

	case GPIO_PIN_7:	return 28;
 8000206:	231c      	movs	r3, #28
 8000208:	e011      	b.n	800022e <Get_CRLH_Position+0xbe>
	break;

	case GPIO_PIN_8:	return 0;
 800020a:	2300      	movs	r3, #0
 800020c:	e00f      	b.n	800022e <Get_CRLH_Position+0xbe>
	break;

	case GPIO_PIN_9:	return 4;
 800020e:	2304      	movs	r3, #4
 8000210:	e00d      	b.n	800022e <Get_CRLH_Position+0xbe>
	break;

	case GPIO_PIN_10:	return 8;
 8000212:	2308      	movs	r3, #8
 8000214:	e00b      	b.n	800022e <Get_CRLH_Position+0xbe>
	break;

	case GPIO_PIN_11:	return 12;
 8000216:	230c      	movs	r3, #12
 8000218:	e009      	b.n	800022e <Get_CRLH_Position+0xbe>
	break;

	case GPIO_PIN_12:	return 16;
 800021a:	2310      	movs	r3, #16
 800021c:	e007      	b.n	800022e <Get_CRLH_Position+0xbe>
	break;

	case GPIO_PIN_13:	return 20;
 800021e:	2314      	movs	r3, #20
 8000220:	e005      	b.n	800022e <Get_CRLH_Position+0xbe>
	break;

	case GPIO_PIN_14:	return 24;
 8000222:	2318      	movs	r3, #24
 8000224:	e003      	b.n	800022e <Get_CRLH_Position+0xbe>
	break;

	case GPIO_PIN_15:	return 28;
 8000226:	231c      	movs	r3, #28
 8000228:	e001      	b.n	800022e <Get_CRLH_Position+0xbe>
	break;

	default:  return -1;
 800022a:	f64f 73ff 	movw	r3, #65535	; 0xffff
	break;

	}


}
 800022e:	4618      	mov	r0, r3
 8000230:	370c      	adds	r7, #12
 8000232:	46bd      	mov	sp, r7
 8000234:	bc80      	pop	{r7}
 8000236:	4770      	bx	lr

08000238 <MCAL_GPIO_Init>:
* Note			- stm32F103C6 MCU has GPIO A...E Modules
* 				  but LQFP48 Package has only GPIO A,B part of C,D exported as external pins from the MCU
*/

void MCAL_GPIO_Init(GPIO_TypeDef *GPIOx , GPIO_PinConfig_t *PinConfig)
{
 8000238:	b590      	push	{r4, r7, lr}
 800023a:	b085      	sub	sp, #20
 800023c:	af00      	add	r7, sp, #0
 800023e:	6078      	str	r0, [r7, #4]
 8000240:	6039      	str	r1, [r7, #0]
	// Check Pin is CRL (GPIO_PIN_0...GPIO_PIN_7) OR CRH (GPIO_PIN_8...GPIO_PIN_15)
	volatile uint32_t *configregister = NULL;
 8000242:	2300      	movs	r3, #0
 8000244:	60fb      	str	r3, [r7, #12]
	uint8_t pin_config =0;
 8000246:	2300      	movs	r3, #0
 8000248:	72fb      	strb	r3, [r7, #11]

	if(PinConfig->GPIO_PinNumber < GPIO_PIN_8)
 800024a:	683b      	ldr	r3, [r7, #0]
 800024c:	881b      	ldrh	r3, [r3, #0]
 800024e:	2bff      	cmp	r3, #255	; 0xff
 8000250:	d802      	bhi.n	8000258 <MCAL_GPIO_Init+0x20>
		configregister = &GPIOx->CRL;
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	60fb      	str	r3, [r7, #12]
 8000256:	e002      	b.n	800025e <MCAL_GPIO_Init+0x26>
	else
		configregister = &GPIOx->CRH;
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	3304      	adds	r3, #4
 800025c:	60fb      	str	r3, [r7, #12]

	// Clear CRL OR CRH for Pin used
	(*configregister) &=  ~(0xF << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 800025e:	683b      	ldr	r3, [r7, #0]
 8000260:	881b      	ldrh	r3, [r3, #0]
 8000262:	4618      	mov	r0, r3
 8000264:	f7ff ff84 	bl	8000170 <Get_CRLH_Position>
 8000268:	4603      	mov	r3, r0
 800026a:	461a      	mov	r2, r3
 800026c:	230f      	movs	r3, #15
 800026e:	4093      	lsls	r3, r2
 8000270:	43da      	mvns	r2, r3
 8000272:	68fb      	ldr	r3, [r7, #12]
 8000274:	681b      	ldr	r3, [r3, #0]
 8000276:	401a      	ands	r2, r3
 8000278:	68fb      	ldr	r3, [r7, #12]
 800027a:	601a      	str	r2, [r3, #0]

	// IF Pin is Output
	if((PinConfig->GPIO_PinMode == GPIO_MODE_OUTPUT_PP) || (PinConfig->GPIO_PinMode == GPIO_MODE_OUTPUT_OD) ||(PinConfig->GPIO_PinMode == GPIO_MODE_OUTPUT_AF_PP) ||(PinConfig->GPIO_PinMode == GPIO_MODE_OUTPUT_AF_OD))
 800027c:	683b      	ldr	r3, [r7, #0]
 800027e:	789b      	ldrb	r3, [r3, #2]
 8000280:	2b04      	cmp	r3, #4
 8000282:	d00b      	beq.n	800029c <MCAL_GPIO_Init+0x64>
 8000284:	683b      	ldr	r3, [r7, #0]
 8000286:	789b      	ldrb	r3, [r3, #2]
 8000288:	2b05      	cmp	r3, #5
 800028a:	d007      	beq.n	800029c <MCAL_GPIO_Init+0x64>
 800028c:	683b      	ldr	r3, [r7, #0]
 800028e:	789b      	ldrb	r3, [r3, #2]
 8000290:	2b06      	cmp	r3, #6
 8000292:	d003      	beq.n	800029c <MCAL_GPIO_Init+0x64>
 8000294:	683b      	ldr	r3, [r7, #0]
 8000296:	789b      	ldrb	r3, [r3, #2]
 8000298:	2b07      	cmp	r3, #7
 800029a:	d10e      	bne.n	80002ba <MCAL_GPIO_Init+0x82>
	{
		// pin_config: carry 4-bit for bin MODE[0,1] , CNF[0,1]
		pin_config = ( (((PinConfig->GPIO_PinMode - 4) << 2) | (PinConfig->GPIO_Output_Speed)) & 0x0F);
 800029c:	683b      	ldr	r3, [r7, #0]
 800029e:	789b      	ldrb	r3, [r3, #2]
 80002a0:	3b04      	subs	r3, #4
 80002a2:	009b      	lsls	r3, r3, #2
 80002a4:	b25a      	sxtb	r2, r3
 80002a6:	683b      	ldr	r3, [r7, #0]
 80002a8:	78db      	ldrb	r3, [r3, #3]
 80002aa:	b25b      	sxtb	r3, r3
 80002ac:	4313      	orrs	r3, r2
 80002ae:	b25b      	sxtb	r3, r3
 80002b0:	b2db      	uxtb	r3, r3
 80002b2:	f003 030f 	and.w	r3, r3, #15
 80002b6:	72fb      	strb	r3, [r7, #11]
 80002b8:	e02a      	b.n	8000310 <MCAL_GPIO_Init+0xd8>

	// If Pin is Input
	else
	{

		if((PinConfig->GPIO_PinMode == GPIO_MODE_INPUT_FLO) ||  (PinConfig->GPIO_PinMode == GPIO_MODE_Analog))
 80002ba:	683b      	ldr	r3, [r7, #0]
 80002bc:	789b      	ldrb	r3, [r3, #2]
 80002be:	2b01      	cmp	r3, #1
 80002c0:	d003      	beq.n	80002ca <MCAL_GPIO_Init+0x92>
 80002c2:	683b      	ldr	r3, [r7, #0]
 80002c4:	789b      	ldrb	r3, [r3, #2]
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d107      	bne.n	80002da <MCAL_GPIO_Init+0xa2>
		{
			pin_config = ( (((PinConfig->GPIO_PinMode) << 2) | (0x0)) & 0x0F);
 80002ca:	683b      	ldr	r3, [r7, #0]
 80002cc:	789b      	ldrb	r3, [r3, #2]
 80002ce:	009b      	lsls	r3, r3, #2
 80002d0:	b2db      	uxtb	r3, r3
 80002d2:	f003 030f 	and.w	r3, r3, #15
 80002d6:	72fb      	strb	r3, [r7, #11]
 80002d8:	e01a      	b.n	8000310 <MCAL_GPIO_Init+0xd8>

		}

		else if((PinConfig->GPIO_PinMode == GPIO_MODE_AF_INPUT))
 80002da:	683b      	ldr	r3, [r7, #0]
 80002dc:	789b      	ldrb	r3, [r3, #2]
 80002de:	2b08      	cmp	r3, #8
 80002e0:	d102      	bne.n	80002e8 <MCAL_GPIO_Init+0xb0>
		{
			pin_config = ( (((GPIO_MODE_INPUT_FLO) << 2) | (0x0)) & 0x0F);
 80002e2:	2304      	movs	r3, #4
 80002e4:	72fb      	strb	r3, [r7, #11]
 80002e6:	e013      	b.n	8000310 <MCAL_GPIO_Init+0xd8>
		}

		else
		{
			if((PinConfig->GPIO_PinMode == GPIO_MODE_INPUT_PU))
 80002e8:	683b      	ldr	r3, [r7, #0]
 80002ea:	789b      	ldrb	r3, [r3, #2]
 80002ec:	2b02      	cmp	r3, #2
 80002ee:	d107      	bne.n	8000300 <MCAL_GPIO_Init+0xc8>
			{
				// PxODR = 1 ->  Input Pull-up
				GPIOx->ODR |= PinConfig->GPIO_PinNumber;
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	68db      	ldr	r3, [r3, #12]
 80002f4:	683a      	ldr	r2, [r7, #0]
 80002f6:	8812      	ldrh	r2, [r2, #0]
 80002f8:	431a      	orrs	r2, r3
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	60da      	str	r2, [r3, #12]
 80002fe:	e007      	b.n	8000310 <MCAL_GPIO_Init+0xd8>

			}
			else
			{
				// PxODR = 0 -> Input Pull-down
				GPIOx->ODR &= ~(PinConfig->GPIO_PinNumber);
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	68db      	ldr	r3, [r3, #12]
 8000304:	683a      	ldr	r2, [r7, #0]
 8000306:	8812      	ldrh	r2, [r2, #0]
 8000308:	43d2      	mvns	r2, r2
 800030a:	401a      	ands	r2, r3
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	60da      	str	r2, [r3, #12]
		}

	}

	// write on CRL OR CRH
	(*configregister) |=  (	(pin_config) << Get_CRLH_Position(PinConfig->GPIO_PinNumber)	);
 8000310:	7afc      	ldrb	r4, [r7, #11]
 8000312:	683b      	ldr	r3, [r7, #0]
 8000314:	881b      	ldrh	r3, [r3, #0]
 8000316:	4618      	mov	r0, r3
 8000318:	f7ff ff2a 	bl	8000170 <Get_CRLH_Position>
 800031c:	4603      	mov	r3, r0
 800031e:	fa04 f203 	lsl.w	r2, r4, r3
 8000322:	68fb      	ldr	r3, [r7, #12]
 8000324:	681b      	ldr	r3, [r3, #0]
 8000326:	431a      	orrs	r2, r3
 8000328:	68fb      	ldr	r3, [r7, #12]
 800032a:	601a      	str	r2, [r3, #0]

}
 800032c:	bf00      	nop
 800032e:	3714      	adds	r7, #20
 8000330:	46bd      	mov	sp, r7
 8000332:	bd90      	pop	{r4, r7, pc}

08000334 <MCAL_GPIO_ReadPin>:
* Note			- none
*
*/

uint8_t MCAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx , uint16_t PinNum)
{
 8000334:	b480      	push	{r7}
 8000336:	b085      	sub	sp, #20
 8000338:	af00      	add	r7, sp, #0
 800033a:	6078      	str	r0, [r7, #4]
 800033c:	460b      	mov	r3, r1
 800033e:	807b      	strh	r3, [r7, #2]
	uint8_t bitstatus;

	if(	((GPIOx->IDR) & PinNum) != (uint32_t)GPIO_PIN_RESET)
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	689a      	ldr	r2, [r3, #8]
 8000344:	887b      	ldrh	r3, [r7, #2]
 8000346:	4013      	ands	r3, r2
 8000348:	2b00      	cmp	r3, #0
 800034a:	d002      	beq.n	8000352 <MCAL_GPIO_ReadPin+0x1e>
	{
		bitstatus = GPIO_PIN_SET;
 800034c:	2301      	movs	r3, #1
 800034e:	73fb      	strb	r3, [r7, #15]
 8000350:	e001      	b.n	8000356 <MCAL_GPIO_ReadPin+0x22>
	}

	else
	{
		bitstatus = GPIO_PIN_RESET;
 8000352:	2300      	movs	r3, #0
 8000354:	73fb      	strb	r3, [r7, #15]
	}

	return bitstatus;
 8000356:	7bfb      	ldrb	r3, [r7, #15]


}
 8000358:	4618      	mov	r0, r3
 800035a:	3714      	adds	r7, #20
 800035c:	46bd      	mov	sp, r7
 800035e:	bc80      	pop	{r7}
 8000360:	4770      	bx	lr

08000362 <MCAL_GPIO_WritePin>:
* Note			- none
*
*/

void MCAL_GPIO_WritePin(GPIO_TypeDef *GPIOx , uint16_t PinNum, uint8_t Value)
{
 8000362:	b480      	push	{r7}
 8000364:	b083      	sub	sp, #12
 8000366:	af00      	add	r7, sp, #0
 8000368:	6078      	str	r0, [r7, #4]
 800036a:	460b      	mov	r3, r1
 800036c:	807b      	strh	r3, [r7, #2]
 800036e:	4613      	mov	r3, r2
 8000370:	707b      	strb	r3, [r7, #1]
	if(Value != GPIO_PIN_RESET)
 8000372:	787b      	ldrb	r3, [r7, #1]
 8000374:	2b00      	cmp	r3, #0
 8000376:	d003      	beq.n	8000380 <MCAL_GPIO_WritePin+0x1e>
	{
		//GPIOx->ODR |= PinNum;
		// OR
		GPIOx->BSRR = (uint32_t)PinNum;
 8000378:	887a      	ldrh	r2, [r7, #2]
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	611a      	str	r2, [r3, #16]
		// OR
		GPIOx->BRR = (uint32_t)PinNum;
	}


}
 800037e:	e002      	b.n	8000386 <MCAL_GPIO_WritePin+0x24>
		GPIOx->BRR = (uint32_t)PinNum;
 8000380:	887a      	ldrh	r2, [r7, #2]
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	615a      	str	r2, [r3, #20]
}
 8000386:	bf00      	nop
 8000388:	370c      	adds	r7, #12
 800038a:	46bd      	mov	sp, r7
 800038c:	bc80      	pop	{r7}
 800038e:	4770      	bx	lr

08000390 <MCAL_GPIO_WritePort>:
* Note			- none
*
*/

void MCAL_GPIO_WritePort(GPIO_TypeDef *GPIOx, uint16_t Value)
{
 8000390:	b480      	push	{r7}
 8000392:	b083      	sub	sp, #12
 8000394:	af00      	add	r7, sp, #0
 8000396:	6078      	str	r0, [r7, #4]
 8000398:	460b      	mov	r3, r1
 800039a:	807b      	strh	r3, [r7, #2]
	GPIOx->ODR = (uint32_t)Value;
 800039c:	887a      	ldrh	r2, [r7, #2]
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	60da      	str	r2, [r3, #12]
}
 80003a2:	bf00      	nop
 80003a4:	370c      	adds	r7, #12
 80003a6:	46bd      	mov	sp, r7
 80003a8:	bc80      	pop	{r7}
 80003aa:	4770      	bx	lr

080003ac <GPIO_KPD_init>:
* Note			- none
*
*/

void GPIO_KPD_init (void)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b082      	sub	sp, #8
 80003b0:	af00      	add	r7, sp, #0
	GPIO_PinConfig_t pinConfig;

	// Rows pins
	pinConfig.GPIO_PinNumber = KPD_R1_PIN;
 80003b2:	2301      	movs	r3, #1
 80003b4:	80bb      	strh	r3, [r7, #4]
	pinConfig.GPIO_PinMode = GPIO_MODE_OUTPUT_PP;
 80003b6:	2304      	movs	r3, #4
 80003b8:	71bb      	strb	r3, [r7, #6]
	pinConfig.GPIO_Output_Speed = GPIO_SPEED_10M;
 80003ba:	2301      	movs	r3, #1
 80003bc:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(KPD_Port, &pinConfig);
 80003be:	1d3b      	adds	r3, r7, #4
 80003c0:	4619      	mov	r1, r3
 80003c2:	4830      	ldr	r0, [pc, #192]	; (8000484 <GPIO_KPD_init+0xd8>)
 80003c4:	f7ff ff38 	bl	8000238 <MCAL_GPIO_Init>

	pinConfig.GPIO_PinNumber = KPD_R2_PIN;
 80003c8:	2302      	movs	r3, #2
 80003ca:	80bb      	strh	r3, [r7, #4]
	pinConfig.GPIO_PinMode = GPIO_MODE_OUTPUT_PP;
 80003cc:	2304      	movs	r3, #4
 80003ce:	71bb      	strb	r3, [r7, #6]
	pinConfig.GPIO_Output_Speed = GPIO_SPEED_10M;
 80003d0:	2301      	movs	r3, #1
 80003d2:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(KPD_Port, &pinConfig);
 80003d4:	1d3b      	adds	r3, r7, #4
 80003d6:	4619      	mov	r1, r3
 80003d8:	482a      	ldr	r0, [pc, #168]	; (8000484 <GPIO_KPD_init+0xd8>)
 80003da:	f7ff ff2d 	bl	8000238 <MCAL_GPIO_Init>

	pinConfig.GPIO_PinNumber = KPD_R3_PIN;
 80003de:	2308      	movs	r3, #8
 80003e0:	80bb      	strh	r3, [r7, #4]
	pinConfig.GPIO_PinMode = GPIO_MODE_OUTPUT_PP;
 80003e2:	2304      	movs	r3, #4
 80003e4:	71bb      	strb	r3, [r7, #6]
	pinConfig.GPIO_Output_Speed = GPIO_SPEED_10M;
 80003e6:	2301      	movs	r3, #1
 80003e8:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(KPD_Port, &pinConfig);
 80003ea:	1d3b      	adds	r3, r7, #4
 80003ec:	4619      	mov	r1, r3
 80003ee:	4825      	ldr	r0, [pc, #148]	; (8000484 <GPIO_KPD_init+0xd8>)
 80003f0:	f7ff ff22 	bl	8000238 <MCAL_GPIO_Init>

	pinConfig.GPIO_PinNumber = KPD_R4_PIN;
 80003f4:	2310      	movs	r3, #16
 80003f6:	80bb      	strh	r3, [r7, #4]
	pinConfig.GPIO_PinMode = GPIO_MODE_OUTPUT_PP;
 80003f8:	2304      	movs	r3, #4
 80003fa:	71bb      	strb	r3, [r7, #6]
	pinConfig.GPIO_Output_Speed = GPIO_SPEED_10M;
 80003fc:	2301      	movs	r3, #1
 80003fe:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(KPD_Port, &pinConfig);
 8000400:	1d3b      	adds	r3, r7, #4
 8000402:	4619      	mov	r1, r3
 8000404:	481f      	ldr	r0, [pc, #124]	; (8000484 <GPIO_KPD_init+0xd8>)
 8000406:	f7ff ff17 	bl	8000238 <MCAL_GPIO_Init>

	// Columns pins
	pinConfig.GPIO_PinNumber = KPD_C1_PIN;
 800040a:	2320      	movs	r3, #32
 800040c:	80bb      	strh	r3, [r7, #4]
	pinConfig.GPIO_PinMode = GPIO_MODE_INPUT_FLO;
 800040e:	2301      	movs	r3, #1
 8000410:	71bb      	strb	r3, [r7, #6]
	MCAL_GPIO_Init(KPD_Port, &pinConfig);
 8000412:	1d3b      	adds	r3, r7, #4
 8000414:	4619      	mov	r1, r3
 8000416:	481b      	ldr	r0, [pc, #108]	; (8000484 <GPIO_KPD_init+0xd8>)
 8000418:	f7ff ff0e 	bl	8000238 <MCAL_GPIO_Init>

	pinConfig.GPIO_PinNumber = KPD_C2_PIN;
 800041c:	2340      	movs	r3, #64	; 0x40
 800041e:	80bb      	strh	r3, [r7, #4]
	pinConfig.GPIO_PinMode = GPIO_MODE_INPUT_FLO;
 8000420:	2301      	movs	r3, #1
 8000422:	71bb      	strb	r3, [r7, #6]
	MCAL_GPIO_Init(KPD_Port, &pinConfig);
 8000424:	1d3b      	adds	r3, r7, #4
 8000426:	4619      	mov	r1, r3
 8000428:	4816      	ldr	r0, [pc, #88]	; (8000484 <GPIO_KPD_init+0xd8>)
 800042a:	f7ff ff05 	bl	8000238 <MCAL_GPIO_Init>

	pinConfig.GPIO_PinNumber = KPD_C3_PIN;
 800042e:	2380      	movs	r3, #128	; 0x80
 8000430:	80bb      	strh	r3, [r7, #4]
	pinConfig.GPIO_PinMode = GPIO_MODE_INPUT_FLO;
 8000432:	2301      	movs	r3, #1
 8000434:	71bb      	strb	r3, [r7, #6]
	MCAL_GPIO_Init(KPD_Port, &pinConfig);
 8000436:	1d3b      	adds	r3, r7, #4
 8000438:	4619      	mov	r1, r3
 800043a:	4812      	ldr	r0, [pc, #72]	; (8000484 <GPIO_KPD_init+0xd8>)
 800043c:	f7ff fefc 	bl	8000238 <MCAL_GPIO_Init>

	pinConfig.GPIO_PinNumber = KPD_C4_PIN;
 8000440:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000444:	80bb      	strh	r3, [r7, #4]
	pinConfig.GPIO_PinMode = GPIO_MODE_INPUT_FLO;
 8000446:	2301      	movs	r3, #1
 8000448:	71bb      	strb	r3, [r7, #6]
	MCAL_GPIO_Init(KPD_Port, &pinConfig);
 800044a:	1d3b      	adds	r3, r7, #4
 800044c:	4619      	mov	r1, r3
 800044e:	480d      	ldr	r0, [pc, #52]	; (8000484 <GPIO_KPD_init+0xd8>)
 8000450:	f7ff fef2 	bl	8000238 <MCAL_GPIO_Init>

	MCAL_GPIO_WritePin(KPD_Port, KPD_R1_PIN, GPIO_PIN_RESET);
 8000454:	2200      	movs	r2, #0
 8000456:	2101      	movs	r1, #1
 8000458:	480a      	ldr	r0, [pc, #40]	; (8000484 <GPIO_KPD_init+0xd8>)
 800045a:	f7ff ff82 	bl	8000362 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(KPD_Port, KPD_R2_PIN, GPIO_PIN_RESET);
 800045e:	2200      	movs	r2, #0
 8000460:	2102      	movs	r1, #2
 8000462:	4808      	ldr	r0, [pc, #32]	; (8000484 <GPIO_KPD_init+0xd8>)
 8000464:	f7ff ff7d 	bl	8000362 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(KPD_Port, KPD_R3_PIN, GPIO_PIN_RESET);
 8000468:	2200      	movs	r2, #0
 800046a:	2108      	movs	r1, #8
 800046c:	4805      	ldr	r0, [pc, #20]	; (8000484 <GPIO_KPD_init+0xd8>)
 800046e:	f7ff ff78 	bl	8000362 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(KPD_Port, KPD_R4_PIN, GPIO_PIN_RESET);
 8000472:	2200      	movs	r2, #0
 8000474:	2110      	movs	r1, #16
 8000476:	4803      	ldr	r0, [pc, #12]	; (8000484 <GPIO_KPD_init+0xd8>)
 8000478:	f7ff ff73 	bl	8000362 <MCAL_GPIO_WritePin>

}
 800047c:	bf00      	nop
 800047e:	3708      	adds	r7, #8
 8000480:	46bd      	mov	sp, r7
 8000482:	bd80      	pop	{r7, pc}
 8000484:	40010c00 	.word	0x40010c00

08000488 <KPD_GetKeyState>:
* Note			- none
*
*/

uint8_t KPD_GetKeyState(void)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	b082      	sub	sp, #8
 800048c:	af00      	add	r7, sp, #0
	uint8_t Column_counter= 0;
 800048e:	2300      	movs	r3, #0
 8000490:	71fb      	strb	r3, [r7, #7]
	uint8_t Rows_counter= 0;
 8000492:	2300      	movs	r3, #0
 8000494:	71bb      	strb	r3, [r7, #6]
	uint8_t Return_value;

	GPIO_KPD_init();
 8000496:	f7ff ff89 	bl	80003ac <GPIO_KPD_init>

	for(Rows_counter=0; Rows_counter<4; Rows_counter++)
 800049a:	2300      	movs	r3, #0
 800049c:	71bb      	strb	r3, [r7, #6]
 800049e:	e04b      	b.n	8000538 <KPD_GetKeyState+0xb0>
	{
		MCAL_GPIO_WritePin(KPD_Port, KPD_RowsPins[Rows_counter], GPIO_PIN_SET);
 80004a0:	79bb      	ldrb	r3, [r7, #6]
 80004a2:	4a29      	ldr	r2, [pc, #164]	; (8000548 <KPD_GetKeyState+0xc0>)
 80004a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80004a8:	2201      	movs	r2, #1
 80004aa:	4619      	mov	r1, r3
 80004ac:	4827      	ldr	r0, [pc, #156]	; (800054c <KPD_GetKeyState+0xc4>)
 80004ae:	f7ff ff58 	bl	8000362 <MCAL_GPIO_WritePin>

		for(Column_counter=0; Column_counter<4; Column_counter++)
 80004b2:	2300      	movs	r3, #0
 80004b4:	71fb      	strb	r3, [r7, #7]
 80004b6:	e030      	b.n	800051a <KPD_GetKeyState+0x92>
		{
			Return_value = MCAL_GPIO_ReadPin(KPD_Port, KPD_ColumnsPins[Column_counter]);
 80004b8:	79fb      	ldrb	r3, [r7, #7]
 80004ba:	4a25      	ldr	r2, [pc, #148]	; (8000550 <KPD_GetKeyState+0xc8>)
 80004bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80004c0:	4619      	mov	r1, r3
 80004c2:	4822      	ldr	r0, [pc, #136]	; (800054c <KPD_GetKeyState+0xc4>)
 80004c4:	f7ff ff36 	bl	8000334 <MCAL_GPIO_ReadPin>
 80004c8:	4603      	mov	r3, r0
 80004ca:	717b      	strb	r3, [r7, #5]

			if(Return_value == GPIO_PIN_SET)
 80004cc:	797b      	ldrb	r3, [r7, #5]
 80004ce:	2b01      	cmp	r3, #1
 80004d0:	d120      	bne.n	8000514 <KPD_GetKeyState+0x8c>
			{
				Return_value = MCAL_GPIO_ReadPin(KPD_Port, KPD_ColumnsPins[Column_counter]);
 80004d2:	79fb      	ldrb	r3, [r7, #7]
 80004d4:	4a1e      	ldr	r2, [pc, #120]	; (8000550 <KPD_GetKeyState+0xc8>)
 80004d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80004da:	4619      	mov	r1, r3
 80004dc:	481b      	ldr	r0, [pc, #108]	; (800054c <KPD_GetKeyState+0xc4>)
 80004de:	f7ff ff29 	bl	8000334 <MCAL_GPIO_ReadPin>
 80004e2:	4603      	mov	r3, r0
 80004e4:	717b      	strb	r3, [r7, #5]

				while(Return_value == GPIO_PIN_SET)
 80004e6:	e009      	b.n	80004fc <KPD_GetKeyState+0x74>
				{
					Return_value = MCAL_GPIO_ReadPin(KPD_Port, KPD_ColumnsPins[Column_counter]);
 80004e8:	79fb      	ldrb	r3, [r7, #7]
 80004ea:	4a19      	ldr	r2, [pc, #100]	; (8000550 <KPD_GetKeyState+0xc8>)
 80004ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80004f0:	4619      	mov	r1, r3
 80004f2:	4816      	ldr	r0, [pc, #88]	; (800054c <KPD_GetKeyState+0xc4>)
 80004f4:	f7ff ff1e 	bl	8000334 <MCAL_GPIO_ReadPin>
 80004f8:	4603      	mov	r3, r0
 80004fa:	717b      	strb	r3, [r7, #5]
				while(Return_value == GPIO_PIN_SET)
 80004fc:	797b      	ldrb	r3, [r7, #5]
 80004fe:	2b01      	cmp	r3, #1
 8000500:	d0f2      	beq.n	80004e8 <KPD_GetKeyState+0x60>
				}

				return KPD_Keys[Rows_counter][Column_counter];
 8000502:	79ba      	ldrb	r2, [r7, #6]
 8000504:	79fb      	ldrb	r3, [r7, #7]
 8000506:	4913      	ldr	r1, [pc, #76]	; (8000554 <KPD_GetKeyState+0xcc>)
 8000508:	0092      	lsls	r2, r2, #2
 800050a:	4413      	add	r3, r2
 800050c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000510:	b2db      	uxtb	r3, r3
 8000512:	e015      	b.n	8000540 <KPD_GetKeyState+0xb8>
		for(Column_counter=0; Column_counter<4; Column_counter++)
 8000514:	79fb      	ldrb	r3, [r7, #7]
 8000516:	3301      	adds	r3, #1
 8000518:	71fb      	strb	r3, [r7, #7]
 800051a:	79fb      	ldrb	r3, [r7, #7]
 800051c:	2b03      	cmp	r3, #3
 800051e:	d9cb      	bls.n	80004b8 <KPD_GetKeyState+0x30>
			}
		}

		MCAL_GPIO_WritePin(KPD_Port, KPD_RowsPins[Rows_counter], GPIO_PIN_RESET);
 8000520:	79bb      	ldrb	r3, [r7, #6]
 8000522:	4a09      	ldr	r2, [pc, #36]	; (8000548 <KPD_GetKeyState+0xc0>)
 8000524:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000528:	2200      	movs	r2, #0
 800052a:	4619      	mov	r1, r3
 800052c:	4807      	ldr	r0, [pc, #28]	; (800054c <KPD_GetKeyState+0xc4>)
 800052e:	f7ff ff18 	bl	8000362 <MCAL_GPIO_WritePin>
	for(Rows_counter=0; Rows_counter<4; Rows_counter++)
 8000532:	79bb      	ldrb	r3, [r7, #6]
 8000534:	3301      	adds	r3, #1
 8000536:	71bb      	strb	r3, [r7, #6]
 8000538:	79bb      	ldrb	r3, [r7, #6]
 800053a:	2b03      	cmp	r3, #3
 800053c:	d9b0      	bls.n	80004a0 <KPD_GetKeyState+0x18>
	}

	return 'A';
 800053e:	2341      	movs	r3, #65	; 0x41
}
 8000540:	4618      	mov	r0, r3
 8000542:	3708      	adds	r7, #8
 8000544:	46bd      	mov	sp, r7
 8000546:	bd80      	pop	{r7, pc}
 8000548:	20000020 	.word	0x20000020
 800054c:	40010c00 	.word	0x40010c00
 8000550:	20000028 	.word	0x20000028
 8000554:	20000000 	.word	0x20000000

08000558 <delay_ms>:
#include "MCAL_GPIO.h"
#include "HAL_LCD.h"
#include "HAL_LCD_Private.h"


void delay_ms(uint32_t time) {
 8000558:	b480      	push	{r7}
 800055a:	b085      	sub	sp, #20
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
	uint32_t i, j;
	for (i = 0; i < time; i++)
 8000560:	2300      	movs	r3, #0
 8000562:	60fb      	str	r3, [r7, #12]
 8000564:	e00b      	b.n	800057e <delay_ms+0x26>
		for (j = 0; j < 255; j++);
 8000566:	2300      	movs	r3, #0
 8000568:	60bb      	str	r3, [r7, #8]
 800056a:	e002      	b.n	8000572 <delay_ms+0x1a>
 800056c:	68bb      	ldr	r3, [r7, #8]
 800056e:	3301      	adds	r3, #1
 8000570:	60bb      	str	r3, [r7, #8]
 8000572:	68bb      	ldr	r3, [r7, #8]
 8000574:	2bfe      	cmp	r3, #254	; 0xfe
 8000576:	d9f9      	bls.n	800056c <delay_ms+0x14>
	for (i = 0; i < time; i++)
 8000578:	68fb      	ldr	r3, [r7, #12]
 800057a:	3301      	adds	r3, #1
 800057c:	60fb      	str	r3, [r7, #12]
 800057e:	68fa      	ldr	r2, [r7, #12]
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	429a      	cmp	r2, r3
 8000584:	d3ef      	bcc.n	8000566 <delay_ms+0xe>

}
 8000586:	bf00      	nop
 8000588:	3714      	adds	r7, #20
 800058a:	46bd      	mov	sp, r7
 800058c:	bc80      	pop	{r7}
 800058e:	4770      	bx	lr

08000590 <GPIO_LCD_init>:
* Note			- none
*
*/

void GPIO_LCD_init(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
	GPIO_PinConfig_t pinConfig;

	// Control pins
	pinConfig.GPIO_PinNumber = LCD_RS_PIN;
 8000596:	f44f 7380 	mov.w	r3, #256	; 0x100
 800059a:	80bb      	strh	r3, [r7, #4]
	pinConfig.GPIO_PinMode = GPIO_MODE_OUTPUT_PP;
 800059c:	2304      	movs	r3, #4
 800059e:	71bb      	strb	r3, [r7, #6]
	pinConfig.GPIO_Output_Speed = GPIO_SPEED_10M;
 80005a0:	2301      	movs	r3, #1
 80005a2:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(LCD_CONTROL_PORT, &pinConfig);
 80005a4:	1d3b      	adds	r3, r7, #4
 80005a6:	4619      	mov	r1, r3
 80005a8:	483b      	ldr	r0, [pc, #236]	; (8000698 <GPIO_LCD_init+0x108>)
 80005aa:	f7ff fe45 	bl	8000238 <MCAL_GPIO_Init>

	pinConfig.GPIO_PinNumber = LCD_RW_PIN;
 80005ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80005b2:	80bb      	strh	r3, [r7, #4]
	pinConfig.GPIO_PinMode = GPIO_MODE_OUTPUT_PP;
 80005b4:	2304      	movs	r3, #4
 80005b6:	71bb      	strb	r3, [r7, #6]
	pinConfig.GPIO_Output_Speed = GPIO_SPEED_10M;
 80005b8:	2301      	movs	r3, #1
 80005ba:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(LCD_CONTROL_PORT, &pinConfig);
 80005bc:	1d3b      	adds	r3, r7, #4
 80005be:	4619      	mov	r1, r3
 80005c0:	4835      	ldr	r0, [pc, #212]	; (8000698 <GPIO_LCD_init+0x108>)
 80005c2:	f7ff fe39 	bl	8000238 <MCAL_GPIO_Init>

	pinConfig.GPIO_PinNumber = LCD_E_PIN;
 80005c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005ca:	80bb      	strh	r3, [r7, #4]
	pinConfig.GPIO_PinMode = GPIO_MODE_OUTPUT_PP;
 80005cc:	2304      	movs	r3, #4
 80005ce:	71bb      	strb	r3, [r7, #6]
	pinConfig.GPIO_Output_Speed = GPIO_SPEED_10M;
 80005d0:	2301      	movs	r3, #1
 80005d2:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(LCD_CONTROL_PORT, &pinConfig);
 80005d4:	1d3b      	adds	r3, r7, #4
 80005d6:	4619      	mov	r1, r3
 80005d8:	482f      	ldr	r0, [pc, #188]	; (8000698 <GPIO_LCD_init+0x108>)
 80005da:	f7ff fe2d 	bl	8000238 <MCAL_GPIO_Init>

	// Data	pins
	pinConfig.GPIO_PinNumber = GPIO_PIN_0;
 80005de:	2301      	movs	r3, #1
 80005e0:	80bb      	strh	r3, [r7, #4]
	pinConfig.GPIO_PinMode = GPIO_MODE_OUTPUT_PP;
 80005e2:	2304      	movs	r3, #4
 80005e4:	71bb      	strb	r3, [r7, #6]
	pinConfig.GPIO_Output_Speed = GPIO_SPEED_10M;
 80005e6:	2301      	movs	r3, #1
 80005e8:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(LCD_DATA_PORT, &pinConfig);
 80005ea:	1d3b      	adds	r3, r7, #4
 80005ec:	4619      	mov	r1, r3
 80005ee:	482a      	ldr	r0, [pc, #168]	; (8000698 <GPIO_LCD_init+0x108>)
 80005f0:	f7ff fe22 	bl	8000238 <MCAL_GPIO_Init>

	pinConfig.GPIO_PinNumber = GPIO_PIN_1;
 80005f4:	2302      	movs	r3, #2
 80005f6:	80bb      	strh	r3, [r7, #4]
	pinConfig.GPIO_PinMode = GPIO_MODE_OUTPUT_PP;
 80005f8:	2304      	movs	r3, #4
 80005fa:	71bb      	strb	r3, [r7, #6]
	pinConfig.GPIO_Output_Speed = GPIO_SPEED_10M;
 80005fc:	2301      	movs	r3, #1
 80005fe:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(LCD_DATA_PORT, &pinConfig);
 8000600:	1d3b      	adds	r3, r7, #4
 8000602:	4619      	mov	r1, r3
 8000604:	4824      	ldr	r0, [pc, #144]	; (8000698 <GPIO_LCD_init+0x108>)
 8000606:	f7ff fe17 	bl	8000238 <MCAL_GPIO_Init>

	pinConfig.GPIO_PinNumber = GPIO_PIN_2;
 800060a:	2304      	movs	r3, #4
 800060c:	80bb      	strh	r3, [r7, #4]
	pinConfig.GPIO_PinMode = GPIO_MODE_OUTPUT_PP;
 800060e:	2304      	movs	r3, #4
 8000610:	71bb      	strb	r3, [r7, #6]
	pinConfig.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000612:	2301      	movs	r3, #1
 8000614:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(LCD_DATA_PORT, &pinConfig);
 8000616:	1d3b      	adds	r3, r7, #4
 8000618:	4619      	mov	r1, r3
 800061a:	481f      	ldr	r0, [pc, #124]	; (8000698 <GPIO_LCD_init+0x108>)
 800061c:	f7ff fe0c 	bl	8000238 <MCAL_GPIO_Init>

	pinConfig.GPIO_PinNumber = GPIO_PIN_3;
 8000620:	2308      	movs	r3, #8
 8000622:	80bb      	strh	r3, [r7, #4]
	pinConfig.GPIO_PinMode = GPIO_MODE_OUTPUT_PP;
 8000624:	2304      	movs	r3, #4
 8000626:	71bb      	strb	r3, [r7, #6]
	pinConfig.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000628:	2301      	movs	r3, #1
 800062a:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(LCD_DATA_PORT, &pinConfig);
 800062c:	1d3b      	adds	r3, r7, #4
 800062e:	4619      	mov	r1, r3
 8000630:	4819      	ldr	r0, [pc, #100]	; (8000698 <GPIO_LCD_init+0x108>)
 8000632:	f7ff fe01 	bl	8000238 <MCAL_GPIO_Init>

	pinConfig.GPIO_PinNumber = GPIO_PIN_4;
 8000636:	2310      	movs	r3, #16
 8000638:	80bb      	strh	r3, [r7, #4]
	pinConfig.GPIO_PinMode = GPIO_MODE_OUTPUT_PP;
 800063a:	2304      	movs	r3, #4
 800063c:	71bb      	strb	r3, [r7, #6]
	pinConfig.GPIO_Output_Speed = GPIO_SPEED_10M;
 800063e:	2301      	movs	r3, #1
 8000640:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(LCD_DATA_PORT, &pinConfig);
 8000642:	1d3b      	adds	r3, r7, #4
 8000644:	4619      	mov	r1, r3
 8000646:	4814      	ldr	r0, [pc, #80]	; (8000698 <GPIO_LCD_init+0x108>)
 8000648:	f7ff fdf6 	bl	8000238 <MCAL_GPIO_Init>

	pinConfig.GPIO_PinNumber = GPIO_PIN_5;
 800064c:	2320      	movs	r3, #32
 800064e:	80bb      	strh	r3, [r7, #4]
	pinConfig.GPIO_PinMode = GPIO_MODE_OUTPUT_PP;
 8000650:	2304      	movs	r3, #4
 8000652:	71bb      	strb	r3, [r7, #6]
	pinConfig.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000654:	2301      	movs	r3, #1
 8000656:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(LCD_DATA_PORT, &pinConfig);
 8000658:	1d3b      	adds	r3, r7, #4
 800065a:	4619      	mov	r1, r3
 800065c:	480e      	ldr	r0, [pc, #56]	; (8000698 <GPIO_LCD_init+0x108>)
 800065e:	f7ff fdeb 	bl	8000238 <MCAL_GPIO_Init>

	pinConfig.GPIO_PinNumber = GPIO_PIN_6;
 8000662:	2340      	movs	r3, #64	; 0x40
 8000664:	80bb      	strh	r3, [r7, #4]
	pinConfig.GPIO_PinMode = GPIO_MODE_OUTPUT_PP;
 8000666:	2304      	movs	r3, #4
 8000668:	71bb      	strb	r3, [r7, #6]
	pinConfig.GPIO_Output_Speed = GPIO_SPEED_10M;
 800066a:	2301      	movs	r3, #1
 800066c:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(LCD_DATA_PORT, &pinConfig);
 800066e:	1d3b      	adds	r3, r7, #4
 8000670:	4619      	mov	r1, r3
 8000672:	4809      	ldr	r0, [pc, #36]	; (8000698 <GPIO_LCD_init+0x108>)
 8000674:	f7ff fde0 	bl	8000238 <MCAL_GPIO_Init>

	pinConfig.GPIO_PinNumber = GPIO_PIN_7;
 8000678:	2380      	movs	r3, #128	; 0x80
 800067a:	80bb      	strh	r3, [r7, #4]
	pinConfig.GPIO_PinMode = GPIO_MODE_OUTPUT_PP;
 800067c:	2304      	movs	r3, #4
 800067e:	71bb      	strb	r3, [r7, #6]
	pinConfig.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000680:	2301      	movs	r3, #1
 8000682:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(LCD_DATA_PORT, &pinConfig);
 8000684:	1d3b      	adds	r3, r7, #4
 8000686:	4619      	mov	r1, r3
 8000688:	4803      	ldr	r0, [pc, #12]	; (8000698 <GPIO_LCD_init+0x108>)
 800068a:	f7ff fdd5 	bl	8000238 <MCAL_GPIO_Init>

}
 800068e:	bf00      	nop
 8000690:	3708      	adds	r7, #8
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	40010800 	.word	0x40010800

0800069c <HAL_LCD_Init>:
* Note			- none
*
*/

void HAL_LCD_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
	delay_ms(40);
 80006a0:	2028      	movs	r0, #40	; 0x28
 80006a2:	f7ff ff59 	bl	8000558 <delay_ms>
	GPIO_LCD_init();
 80006a6:	f7ff ff73 	bl	8000590 <GPIO_LCD_init>
	HAL_LCD_Send_Cmnd(LCD_8_BIT_2_LINE_DOT_5_7);
	delay_ms(5);

#elif LCD_Mode == LCD_MODE_4_BIT

	HAL_LCD_Send_Cmnd(0x03);
 80006aa:	2003      	movs	r0, #3
 80006ac:	f000 f820 	bl	80006f0 <HAL_LCD_Send_Cmnd>
    delay_ms(5);
 80006b0:	2005      	movs	r0, #5
 80006b2:	f7ff ff51 	bl	8000558 <delay_ms>
    HAL_LCD_Send_Cmnd(0x02);
 80006b6:	2002      	movs	r0, #2
 80006b8:	f000 f81a 	bl	80006f0 <HAL_LCD_Send_Cmnd>
    delay_ms(5);
 80006bc:	2005      	movs	r0, #5
 80006be:	f7ff ff4b 	bl	8000558 <delay_ms>

	HAL_LCD_Send_Cmnd(LCD_4_BIT_2_LINE_DOT_5_7);
 80006c2:	2028      	movs	r0, #40	; 0x28
 80006c4:	f000 f814 	bl	80006f0 <HAL_LCD_Send_Cmnd>
	delay_ms(2);
 80006c8:	2002      	movs	r0, #2
 80006ca:	f7ff ff45 	bl	8000558 <delay_ms>


#endif

	HAL_LCD_Send_Cmnd(Display_ON_Cursor_BLINKING);
 80006ce:	200f      	movs	r0, #15
 80006d0:	f000 f80e 	bl	80006f0 <HAL_LCD_Send_Cmnd>
	delay_ms(2);
 80006d4:	2002      	movs	r0, #2
 80006d6:	f7ff ff3f 	bl	8000558 <delay_ms>
	HAL_LCD_Send_Cmnd(Clear_Display);
 80006da:	2001      	movs	r0, #1
 80006dc:	f000 f808 	bl	80006f0 <HAL_LCD_Send_Cmnd>
	delay_ms(2);
 80006e0:	2002      	movs	r0, #2
 80006e2:	f7ff ff39 	bl	8000558 <delay_ms>
	HAL_LCD_Send_Cmnd(Entry_Mode);
 80006e6:	2006      	movs	r0, #6
 80006e8:	f000 f802 	bl	80006f0 <HAL_LCD_Send_Cmnd>

}
 80006ec:	bf00      	nop
 80006ee:	bd80      	pop	{r7, pc}

080006f0 <HAL_LCD_Send_Cmnd>:
* Note			- none
*
*/

void HAL_LCD_Send_Cmnd(uint8_t Copy_Cmnd)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b082      	sub	sp, #8
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	4603      	mov	r3, r0
 80006f8:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_WritePin(LCD_CONTROL_PORT, LCD_E_PIN,GPIO_PIN_RESET);

#elif LCD_Mode == LCD_MODE_4_BIT

    /*Send the higher nibble (D7-D4) */
    MCAL_GPIO_WritePort(LCD_DATA_PORT, (Copy_Cmnd & 0xF0));
 80006fa:	79fb      	ldrb	r3, [r7, #7]
 80006fc:	b29b      	uxth	r3, r3
 80006fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000702:	b29b      	uxth	r3, r3
 8000704:	4619      	mov	r1, r3
 8000706:	4824      	ldr	r0, [pc, #144]	; (8000798 <HAL_LCD_Send_Cmnd+0xa8>)
 8000708:	f7ff fe42 	bl	8000390 <MCAL_GPIO_WritePort>

    /*RS = 0 -> Instruction set */
    MCAL_GPIO_WritePin(LCD_CONTROL_PORT, LCD_RS_PIN, GPIO_PIN_RESET);
 800070c:	2200      	movs	r2, #0
 800070e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000712:	4821      	ldr	r0, [pc, #132]	; (8000798 <HAL_LCD_Send_Cmnd+0xa8>)
 8000714:	f7ff fe25 	bl	8000362 <MCAL_GPIO_WritePin>

    /*RW = 0 -> Write operation */
    MCAL_GPIO_WritePin(LCD_CONTROL_PORT, LCD_RW_PIN, GPIO_PIN_RESET);
 8000718:	2200      	movs	r2, #0
 800071a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800071e:	481e      	ldr	r0, [pc, #120]	; (8000798 <HAL_LCD_Send_Cmnd+0xa8>)
 8000720:	f7ff fe1f 	bl	8000362 <MCAL_GPIO_WritePin>

    /*E = 1 */
    MCAL_GPIO_WritePin(LCD_CONTROL_PORT, LCD_E_PIN, GPIO_PIN_SET);
 8000724:	2201      	movs	r2, #1
 8000726:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800072a:	481b      	ldr	r0, [pc, #108]	; (8000798 <HAL_LCD_Send_Cmnd+0xa8>)
 800072c:	f7ff fe19 	bl	8000362 <MCAL_GPIO_WritePin>
    delay_ms(1);
 8000730:	2001      	movs	r0, #1
 8000732:	f7ff ff11 	bl	8000558 <delay_ms>

    /*E = 0 */
    MCAL_GPIO_WritePin(LCD_CONTROL_PORT, LCD_E_PIN, GPIO_PIN_RESET);
 8000736:	2200      	movs	r2, #0
 8000738:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800073c:	4816      	ldr	r0, [pc, #88]	; (8000798 <HAL_LCD_Send_Cmnd+0xa8>)
 800073e:	f7ff fe10 	bl	8000362 <MCAL_GPIO_WritePin>
    delay_ms(1);
 8000742:	2001      	movs	r0, #1
 8000744:	f7ff ff08 	bl	8000558 <delay_ms>

    /*Send the lower nibble (D3-D0) */
    MCAL_GPIO_WritePort(LCD_DATA_PORT, ((Copy_Cmnd << 4) & 0xF0));
 8000748:	79fb      	ldrb	r3, [r7, #7]
 800074a:	011b      	lsls	r3, r3, #4
 800074c:	b29b      	uxth	r3, r3
 800074e:	b2db      	uxtb	r3, r3
 8000750:	b29b      	uxth	r3, r3
 8000752:	4619      	mov	r1, r3
 8000754:	4810      	ldr	r0, [pc, #64]	; (8000798 <HAL_LCD_Send_Cmnd+0xa8>)
 8000756:	f7ff fe1b 	bl	8000390 <MCAL_GPIO_WritePort>

    /*RS = 0 -> Instruction set */
    MCAL_GPIO_WritePin(LCD_CONTROL_PORT, LCD_RS_PIN, GPIO_PIN_RESET);
 800075a:	2200      	movs	r2, #0
 800075c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000760:	480d      	ldr	r0, [pc, #52]	; (8000798 <HAL_LCD_Send_Cmnd+0xa8>)
 8000762:	f7ff fdfe 	bl	8000362 <MCAL_GPIO_WritePin>

    /*RW = 0 -> Write operation */
    MCAL_GPIO_WritePin(LCD_CONTROL_PORT, LCD_RW_PIN, GPIO_PIN_RESET);
 8000766:	2200      	movs	r2, #0
 8000768:	f44f 7100 	mov.w	r1, #512	; 0x200
 800076c:	480a      	ldr	r0, [pc, #40]	; (8000798 <HAL_LCD_Send_Cmnd+0xa8>)
 800076e:	f7ff fdf8 	bl	8000362 <MCAL_GPIO_WritePin>

    /*E = 1 */
    MCAL_GPIO_WritePin(LCD_CONTROL_PORT, LCD_E_PIN, GPIO_PIN_SET);
 8000772:	2201      	movs	r2, #1
 8000774:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000778:	4807      	ldr	r0, [pc, #28]	; (8000798 <HAL_LCD_Send_Cmnd+0xa8>)
 800077a:	f7ff fdf2 	bl	8000362 <MCAL_GPIO_WritePin>
    delay_ms(1);
 800077e:	2001      	movs	r0, #1
 8000780:	f7ff feea 	bl	8000558 <delay_ms>

    /*E = 0 */
    MCAL_GPIO_WritePin(LCD_CONTROL_PORT, LCD_E_PIN, GPIO_PIN_RESET);
 8000784:	2200      	movs	r2, #0
 8000786:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800078a:	4803      	ldr	r0, [pc, #12]	; (8000798 <HAL_LCD_Send_Cmnd+0xa8>)
 800078c:	f7ff fde9 	bl	8000362 <MCAL_GPIO_WritePin>

#endif

}
 8000790:	bf00      	nop
 8000792:	3708      	adds	r7, #8
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	40010800 	.word	0x40010800

0800079c <HAL_LCD_Send_Char>:
* Note			- none
*
*/

void HAL_LCD_Send_Char (uint8_t Copy_Char)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	4603      	mov	r3, r0
 80007a4:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_WritePin(LCD_CONTROL_PORT, LCD_E_PIN,GPIO_PIN_RESET);

#elif LCD_Mode == LCD_MODE_4_BIT

    /* Send the higher nibble (D7-D4) */
    MCAL_GPIO_WritePort(LCD_DATA_PORT, (Copy_Char & 0xF0));
 80007a6:	79fb      	ldrb	r3, [r7, #7]
 80007a8:	b29b      	uxth	r3, r3
 80007aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80007ae:	b29b      	uxth	r3, r3
 80007b0:	4619      	mov	r1, r3
 80007b2:	4824      	ldr	r0, [pc, #144]	; (8000844 <HAL_LCD_Send_Char+0xa8>)
 80007b4:	f7ff fdec 	bl	8000390 <MCAL_GPIO_WritePort>

    /* RS = 1 -> Data set */
    MCAL_GPIO_WritePin(LCD_CONTROL_PORT, LCD_RS_PIN, GPIO_PIN_SET);
 80007b8:	2201      	movs	r2, #1
 80007ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007be:	4821      	ldr	r0, [pc, #132]	; (8000844 <HAL_LCD_Send_Char+0xa8>)
 80007c0:	f7ff fdcf 	bl	8000362 <MCAL_GPIO_WritePin>

    /* RW = 0 -> Write operation */
    MCAL_GPIO_WritePin(LCD_CONTROL_PORT, LCD_RW_PIN, GPIO_PIN_RESET);
 80007c4:	2200      	movs	r2, #0
 80007c6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007ca:	481e      	ldr	r0, [pc, #120]	; (8000844 <HAL_LCD_Send_Char+0xa8>)
 80007cc:	f7ff fdc9 	bl	8000362 <MCAL_GPIO_WritePin>

    /* E = 1  */
    MCAL_GPIO_WritePin(LCD_CONTROL_PORT, LCD_E_PIN, GPIO_PIN_SET);
 80007d0:	2201      	movs	r2, #1
 80007d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007d6:	481b      	ldr	r0, [pc, #108]	; (8000844 <HAL_LCD_Send_Char+0xa8>)
 80007d8:	f7ff fdc3 	bl	8000362 <MCAL_GPIO_WritePin>
    delay_ms(1);
 80007dc:	2001      	movs	r0, #1
 80007de:	f7ff febb 	bl	8000558 <delay_ms>

    /* E = 0 */
    MCAL_GPIO_WritePin(LCD_CONTROL_PORT, LCD_E_PIN, GPIO_PIN_RESET);
 80007e2:	2200      	movs	r2, #0
 80007e4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007e8:	4816      	ldr	r0, [pc, #88]	; (8000844 <HAL_LCD_Send_Char+0xa8>)
 80007ea:	f7ff fdba 	bl	8000362 <MCAL_GPIO_WritePin>
    delay_ms(1);
 80007ee:	2001      	movs	r0, #1
 80007f0:	f7ff feb2 	bl	8000558 <delay_ms>

    /* Send the lower nibble (D3-D0) */
    MCAL_GPIO_WritePort(LCD_DATA_PORT, ((Copy_Char << 4) & 0xF0));
 80007f4:	79fb      	ldrb	r3, [r7, #7]
 80007f6:	011b      	lsls	r3, r3, #4
 80007f8:	b29b      	uxth	r3, r3
 80007fa:	b2db      	uxtb	r3, r3
 80007fc:	b29b      	uxth	r3, r3
 80007fe:	4619      	mov	r1, r3
 8000800:	4810      	ldr	r0, [pc, #64]	; (8000844 <HAL_LCD_Send_Char+0xa8>)
 8000802:	f7ff fdc5 	bl	8000390 <MCAL_GPIO_WritePort>

    /* RS = 1 -> Data set  */
    MCAL_GPIO_WritePin(LCD_CONTROL_PORT, LCD_RS_PIN, GPIO_PIN_SET);
 8000806:	2201      	movs	r2, #1
 8000808:	f44f 7180 	mov.w	r1, #256	; 0x100
 800080c:	480d      	ldr	r0, [pc, #52]	; (8000844 <HAL_LCD_Send_Char+0xa8>)
 800080e:	f7ff fda8 	bl	8000362 <MCAL_GPIO_WritePin>

    /* RW = 0 -> Write operation */
    MCAL_GPIO_WritePin(LCD_CONTROL_PORT, LCD_RW_PIN, GPIO_PIN_RESET);
 8000812:	2200      	movs	r2, #0
 8000814:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000818:	480a      	ldr	r0, [pc, #40]	; (8000844 <HAL_LCD_Send_Char+0xa8>)
 800081a:	f7ff fda2 	bl	8000362 <MCAL_GPIO_WritePin>

    /* E = 1 */
    MCAL_GPIO_WritePin(LCD_CONTROL_PORT, LCD_E_PIN, GPIO_PIN_SET);
 800081e:	2201      	movs	r2, #1
 8000820:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000824:	4807      	ldr	r0, [pc, #28]	; (8000844 <HAL_LCD_Send_Char+0xa8>)
 8000826:	f7ff fd9c 	bl	8000362 <MCAL_GPIO_WritePin>
    delay_ms(1);
 800082a:	2001      	movs	r0, #1
 800082c:	f7ff fe94 	bl	8000558 <delay_ms>

    /* E = 0 */
    MCAL_GPIO_WritePin(LCD_CONTROL_PORT, LCD_E_PIN, GPIO_PIN_RESET);
 8000830:	2200      	movs	r2, #0
 8000832:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000836:	4803      	ldr	r0, [pc, #12]	; (8000844 <HAL_LCD_Send_Char+0xa8>)
 8000838:	f7ff fd93 	bl	8000362 <MCAL_GPIO_WritePin>

#endif

}
 800083c:	bf00      	nop
 800083e:	3708      	adds	r7, #8
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	40010800 	.word	0x40010800

08000848 <HAL_LCD_Send_String>:
* Note			- none
*
*/

void HAL_LCD_Send_String (char* Copy_String)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b084      	sub	sp, #16
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
	uint8_t string_counter =0;
 8000850:	2300      	movs	r3, #0
 8000852:	73fb      	strb	r3, [r7, #15]

	while( (Copy_String[string_counter]) != '\0' )
 8000854:	e013      	b.n	800087e <HAL_LCD_Send_String+0x36>
	{
		if(string_counter == 16 )
 8000856:	7bfb      	ldrb	r3, [r7, #15]
 8000858:	2b10      	cmp	r3, #16
 800085a:	d103      	bne.n	8000864 <HAL_LCD_Send_String+0x1c>
		{
			HAL_LCD_GOTO_XY(2,0);
 800085c:	2100      	movs	r1, #0
 800085e:	2002      	movs	r0, #2
 8000860:	f000 f817 	bl	8000892 <HAL_LCD_GOTO_XY>
		}

		HAL_LCD_Send_Char(Copy_String[string_counter]);
 8000864:	7bfb      	ldrb	r3, [r7, #15]
 8000866:	687a      	ldr	r2, [r7, #4]
 8000868:	4413      	add	r3, r2
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	4618      	mov	r0, r3
 800086e:	f7ff ff95 	bl	800079c <HAL_LCD_Send_Char>
		delay_ms(15);
 8000872:	200f      	movs	r0, #15
 8000874:	f7ff fe70 	bl	8000558 <delay_ms>

		string_counter++;
 8000878:	7bfb      	ldrb	r3, [r7, #15]
 800087a:	3301      	adds	r3, #1
 800087c:	73fb      	strb	r3, [r7, #15]
	while( (Copy_String[string_counter]) != '\0' )
 800087e:	7bfb      	ldrb	r3, [r7, #15]
 8000880:	687a      	ldr	r2, [r7, #4]
 8000882:	4413      	add	r3, r2
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	2b00      	cmp	r3, #0
 8000888:	d1e5      	bne.n	8000856 <HAL_LCD_Send_String+0xe>

	}
}
 800088a:	bf00      	nop
 800088c:	3710      	adds	r7, #16
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}

08000892 <HAL_LCD_GOTO_XY>:
* Note			- none
*
*/

void HAL_LCD_GOTO_XY (uint8_t Copy_LineNumber , uint8_t Copy_Position)
{
 8000892:	b580      	push	{r7, lr}
 8000894:	b082      	sub	sp, #8
 8000896:	af00      	add	r7, sp, #0
 8000898:	4603      	mov	r3, r0
 800089a:	460a      	mov	r2, r1
 800089c:	71fb      	strb	r3, [r7, #7]
 800089e:	4613      	mov	r3, r2
 80008a0:	71bb      	strb	r3, [r7, #6]
	if(Copy_Position < 16 && Copy_Position>=0)
 80008a2:	79bb      	ldrb	r3, [r7, #6]
 80008a4:	2b0f      	cmp	r3, #15
 80008a6:	d813      	bhi.n	80008d0 <HAL_LCD_GOTO_XY+0x3e>
	{
		switch(Copy_LineNumber)
 80008a8:	79fb      	ldrb	r3, [r7, #7]
 80008aa:	2b01      	cmp	r3, #1
 80008ac:	d002      	beq.n	80008b4 <HAL_LCD_GOTO_XY+0x22>
 80008ae:	2b02      	cmp	r3, #2
 80008b0:	d007      	beq.n	80008c2 <HAL_LCD_GOTO_XY+0x30>
		{
			case 1:	HAL_LCD_Send_Cmnd(LCD_BEGIN_AT_Line_1 + Copy_Position); 	break;
			case 2:	HAL_LCD_Send_Cmnd(LCD_BEGIN_AT_Line_2 + Copy_Position); 	break;
			default: 	break;
 80008b2:	e00e      	b.n	80008d2 <HAL_LCD_GOTO_XY+0x40>
			case 1:	HAL_LCD_Send_Cmnd(LCD_BEGIN_AT_Line_1 + Copy_Position); 	break;
 80008b4:	79bb      	ldrb	r3, [r7, #6]
 80008b6:	3b80      	subs	r3, #128	; 0x80
 80008b8:	b2db      	uxtb	r3, r3
 80008ba:	4618      	mov	r0, r3
 80008bc:	f7ff ff18 	bl	80006f0 <HAL_LCD_Send_Cmnd>
 80008c0:	e007      	b.n	80008d2 <HAL_LCD_GOTO_XY+0x40>
			case 2:	HAL_LCD_Send_Cmnd(LCD_BEGIN_AT_Line_2 + Copy_Position); 	break;
 80008c2:	79bb      	ldrb	r3, [r7, #6]
 80008c4:	3b40      	subs	r3, #64	; 0x40
 80008c6:	b2db      	uxtb	r3, r3
 80008c8:	4618      	mov	r0, r3
 80008ca:	f7ff ff11 	bl	80006f0 <HAL_LCD_Send_Cmnd>
 80008ce:	e000      	b.n	80008d2 <HAL_LCD_GOTO_XY+0x40>
		}
	}
	else
		return;
 80008d0:	bf00      	nop

}
 80008d2:	3708      	adds	r7, #8
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}

080008d8 <HAL_LCD_Clean_Screen>:
* Note			- none
*
*/

void HAL_LCD_Clean_Screen(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
	HAL_LCD_Send_Cmnd(Clear_Display);
 80008dc:	2001      	movs	r0, #1
 80008de:	f7ff ff07 	bl	80006f0 <HAL_LCD_Send_Cmnd>
	delay_ms(20);
 80008e2:	2014      	movs	r0, #20
 80008e4:	f7ff fe38 	bl	8000558 <delay_ms>
}
 80008e8:	bf00      	nop
 80008ea:	bd80      	pop	{r7, pc}

080008ec <wait_ms>:

uint8_t Seven_SEG[]={ZERO, ONE, TWO, THREE, FOUR, FIVE, SIX, SEVEN, EIGHT, NINE, ZERO};
uint8_t LCD_Display[]={'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0'};


void wait_ms(uint32_t time) {
 80008ec:	b480      	push	{r7}
 80008ee:	b085      	sub	sp, #20
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
	uint32_t i, j;
	for (i = 0; i < time; i++)
 80008f4:	2300      	movs	r3, #0
 80008f6:	60fb      	str	r3, [r7, #12]
 80008f8:	e00b      	b.n	8000912 <wait_ms+0x26>
		for (j = 0; j < 255; j++);
 80008fa:	2300      	movs	r3, #0
 80008fc:	60bb      	str	r3, [r7, #8]
 80008fe:	e002      	b.n	8000906 <wait_ms+0x1a>
 8000900:	68bb      	ldr	r3, [r7, #8]
 8000902:	3301      	adds	r3, #1
 8000904:	60bb      	str	r3, [r7, #8]
 8000906:	68bb      	ldr	r3, [r7, #8]
 8000908:	2bfe      	cmp	r3, #254	; 0xfe
 800090a:	d9f9      	bls.n	8000900 <wait_ms+0x14>
	for (i = 0; i < time; i++)
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	3301      	adds	r3, #1
 8000910:	60fb      	str	r3, [r7, #12]
 8000912:	68fa      	ldr	r2, [r7, #12]
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	429a      	cmp	r2, r3
 8000918:	d3ef      	bcc.n	80008fa <wait_ms+0xe>

}
 800091a:	bf00      	nop
 800091c:	3714      	adds	r7, #20
 800091e:	46bd      	mov	sp, r7
 8000920:	bc80      	pop	{r7}
 8000922:	4770      	bx	lr

08000924 <clock_init>:


void clock_init(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
	RCC_GPIOA_CLK_EN();
 8000928:	4b07      	ldr	r3, [pc, #28]	; (8000948 <clock_init+0x24>)
 800092a:	699b      	ldr	r3, [r3, #24]
 800092c:	4a06      	ldr	r2, [pc, #24]	; (8000948 <clock_init+0x24>)
 800092e:	f043 0304 	orr.w	r3, r3, #4
 8000932:	6193      	str	r3, [r2, #24]
	RCC_GPIOB_CLK_EN();
 8000934:	4b04      	ldr	r3, [pc, #16]	; (8000948 <clock_init+0x24>)
 8000936:	699b      	ldr	r3, [r3, #24]
 8000938:	4a03      	ldr	r2, [pc, #12]	; (8000948 <clock_init+0x24>)
 800093a:	f043 0308 	orr.w	r3, r3, #8
 800093e:	6193      	str	r3, [r2, #24]

}
 8000940:	bf00      	nop
 8000942:	46bd      	mov	sp, r7
 8000944:	bc80      	pop	{r7}
 8000946:	4770      	bx	lr
 8000948:	40021000 	.word	0x40021000

0800094c <Seven_SEG_init>:


void Seven_SEG_init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
	// Seven Segment Port GPIOB pins from 12->15

	GPIO_PinConfig_t pinConfig;

	pinConfig.GPIO_PinNumber = GPIO_PIN_12;
 8000952:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000956:	80bb      	strh	r3, [r7, #4]
	pinConfig.GPIO_PinMode = GPIO_MODE_OUTPUT_PP;
 8000958:	2304      	movs	r3, #4
 800095a:	71bb      	strb	r3, [r7, #6]
	pinConfig.GPIO_Output_Speed = GPIO_SPEED_10M;
 800095c:	2301      	movs	r3, #1
 800095e:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &pinConfig);
 8000960:	1d3b      	adds	r3, r7, #4
 8000962:	4619      	mov	r1, r3
 8000964:	4815      	ldr	r0, [pc, #84]	; (80009bc <Seven_SEG_init+0x70>)
 8000966:	f7ff fc67 	bl	8000238 <MCAL_GPIO_Init>

	pinConfig.GPIO_PinNumber = GPIO_PIN_13;
 800096a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800096e:	80bb      	strh	r3, [r7, #4]
	pinConfig.GPIO_PinMode = GPIO_MODE_OUTPUT_PP;
 8000970:	2304      	movs	r3, #4
 8000972:	71bb      	strb	r3, [r7, #6]
	pinConfig.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000974:	2301      	movs	r3, #1
 8000976:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &pinConfig);
 8000978:	1d3b      	adds	r3, r7, #4
 800097a:	4619      	mov	r1, r3
 800097c:	480f      	ldr	r0, [pc, #60]	; (80009bc <Seven_SEG_init+0x70>)
 800097e:	f7ff fc5b 	bl	8000238 <MCAL_GPIO_Init>

	pinConfig.GPIO_PinNumber = GPIO_PIN_14;
 8000982:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000986:	80bb      	strh	r3, [r7, #4]
	pinConfig.GPIO_PinMode = GPIO_MODE_OUTPUT_PP;
 8000988:	2304      	movs	r3, #4
 800098a:	71bb      	strb	r3, [r7, #6]
	pinConfig.GPIO_Output_Speed = GPIO_SPEED_10M;
 800098c:	2301      	movs	r3, #1
 800098e:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &pinConfig);
 8000990:	1d3b      	adds	r3, r7, #4
 8000992:	4619      	mov	r1, r3
 8000994:	4809      	ldr	r0, [pc, #36]	; (80009bc <Seven_SEG_init+0x70>)
 8000996:	f7ff fc4f 	bl	8000238 <MCAL_GPIO_Init>

	pinConfig.GPIO_PinNumber = GPIO_PIN_15;
 800099a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800099e:	80bb      	strh	r3, [r7, #4]
	pinConfig.GPIO_PinMode = GPIO_MODE_OUTPUT_PP;
 80009a0:	2304      	movs	r3, #4
 80009a2:	71bb      	strb	r3, [r7, #6]
	pinConfig.GPIO_Output_Speed = GPIO_SPEED_10M;
 80009a4:	2301      	movs	r3, #1
 80009a6:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &pinConfig);
 80009a8:	1d3b      	adds	r3, r7, #4
 80009aa:	4619      	mov	r1, r3
 80009ac:	4803      	ldr	r0, [pc, #12]	; (80009bc <Seven_SEG_init+0x70>)
 80009ae:	f7ff fc43 	bl	8000238 <MCAL_GPIO_Init>

}
 80009b2:	bf00      	nop
 80009b4:	3708      	adds	r7, #8
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	40010c00 	.word	0x40010c00

080009c0 <main>:



int main(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
	clock_init();
 80009c6:	f7ff ffad 	bl	8000924 <clock_init>
	HAL_LCD_Init();
 80009ca:	f7ff fe67 	bl	800069c <HAL_LCD_Init>
	Seven_SEG_init();
 80009ce:	f7ff ffbd 	bl	800094c <Seven_SEG_init>

	uint8_t Key_pressed;

	HAL_LCD_Send_String("HEY");
 80009d2:	4821      	ldr	r0, [pc, #132]	; (8000a58 <main+0x98>)
 80009d4:	f7ff ff38 	bl	8000848 <HAL_LCD_Send_String>
	wait_ms(70);
 80009d8:	2046      	movs	r0, #70	; 0x46
 80009da:	f7ff ff87 	bl	80008ec <wait_ms>
	HAL_LCD_Clean_Screen();
 80009de:	f7ff ff7b 	bl	80008d8 <HAL_LCD_Clean_Screen>


	for(uint8_t i=0; i<11; i++)
 80009e2:	2300      	movs	r3, #0
 80009e4:	71fb      	strb	r3, [r7, #7]
 80009e6:	e015      	b.n	8000a14 <main+0x54>
	{
		HAL_LCD_Send_Char(LCD_Display[i]);
 80009e8:	79fb      	ldrb	r3, [r7, #7]
 80009ea:	4a1c      	ldr	r2, [pc, #112]	; (8000a5c <main+0x9c>)
 80009ec:	5cd3      	ldrb	r3, [r2, r3]
 80009ee:	4618      	mov	r0, r3
 80009f0:	f7ff fed4 	bl	800079c <HAL_LCD_Send_Char>
		MCAL_GPIO_WritePort(GPIOB, (Seven_SEG[i]<<12) );
 80009f4:	79fb      	ldrb	r3, [r7, #7]
 80009f6:	4a1a      	ldr	r2, [pc, #104]	; (8000a60 <main+0xa0>)
 80009f8:	5cd3      	ldrb	r3, [r2, r3]
 80009fa:	b29b      	uxth	r3, r3
 80009fc:	031b      	lsls	r3, r3, #12
 80009fe:	b29b      	uxth	r3, r3
 8000a00:	4619      	mov	r1, r3
 8000a02:	4818      	ldr	r0, [pc, #96]	; (8000a64 <main+0xa4>)
 8000a04:	f7ff fcc4 	bl	8000390 <MCAL_GPIO_WritePort>
		wait_ms(100);
 8000a08:	2064      	movs	r0, #100	; 0x64
 8000a0a:	f7ff ff6f 	bl	80008ec <wait_ms>
	for(uint8_t i=0; i<11; i++)
 8000a0e:	79fb      	ldrb	r3, [r7, #7]
 8000a10:	3301      	adds	r3, #1
 8000a12:	71fb      	strb	r3, [r7, #7]
 8000a14:	79fb      	ldrb	r3, [r7, #7]
 8000a16:	2b0a      	cmp	r3, #10
 8000a18:	d9e6      	bls.n	80009e8 <main+0x28>

	}


	HAL_LCD_Clean_Screen();
 8000a1a:	f7ff ff5d 	bl	80008d8 <HAL_LCD_Clean_Screen>
	HAL_LCD_Send_String("KEYPAD IS READY!");
 8000a1e:	4812      	ldr	r0, [pc, #72]	; (8000a68 <main+0xa8>)
 8000a20:	f7ff ff12 	bl	8000848 <HAL_LCD_Send_String>
	wait_ms(50);
 8000a24:	2032      	movs	r0, #50	; 0x32
 8000a26:	f7ff ff61 	bl	80008ec <wait_ms>
	HAL_LCD_Clean_Screen();
 8000a2a:	f7ff ff55 	bl	80008d8 <HAL_LCD_Clean_Screen>


	while (1)
	{
		Key_pressed = KPD_GetKeyState();
 8000a2e:	f7ff fd2b 	bl	8000488 <KPD_GetKeyState>
 8000a32:	4603      	mov	r3, r0
 8000a34:	71bb      	strb	r3, [r7, #6]

		switch (Key_pressed)
 8000a36:	79bb      	ldrb	r3, [r7, #6]
 8000a38:	2b3f      	cmp	r3, #63	; 0x3f
 8000a3a:	d002      	beq.n	8000a42 <main+0x82>
 8000a3c:	2b41      	cmp	r3, #65	; 0x41
 8000a3e:	d008      	beq.n	8000a52 <main+0x92>
 8000a40:	e002      	b.n	8000a48 <main+0x88>
		{
		case 'A':
			break;

		case '?':
			HAL_LCD_Clean_Screen();
 8000a42:	f7ff ff49 	bl	80008d8 <HAL_LCD_Clean_Screen>
			break;
 8000a46:	e005      	b.n	8000a54 <main+0x94>

		default:
			HAL_LCD_Send_Char(Key_pressed);
 8000a48:	79bb      	ldrb	r3, [r7, #6]
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f7ff fea6 	bl	800079c <HAL_LCD_Send_Char>
			break;
 8000a50:	e000      	b.n	8000a54 <main+0x94>
			break;
 8000a52:	bf00      	nop
		Key_pressed = KPD_GetKeyState();
 8000a54:	e7eb      	b.n	8000a2e <main+0x6e>
 8000a56:	bf00      	nop
 8000a58:	08000b20 	.word	0x08000b20
 8000a5c:	2000003c 	.word	0x2000003c
 8000a60:	20000030 	.word	0x20000030
 8000a64:	40010c00 	.word	0x40010c00
 8000a68:	08000b24 	.word	0x08000b24

08000a6c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a6c:	480d      	ldr	r0, [pc, #52]	; (8000aa4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a6e:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000a70:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a74:	480c      	ldr	r0, [pc, #48]	; (8000aa8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a76:	490d      	ldr	r1, [pc, #52]	; (8000aac <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a78:	4a0d      	ldr	r2, [pc, #52]	; (8000ab0 <LoopForever+0xe>)
  movs r3, #0
 8000a7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a7c:	e002      	b.n	8000a84 <LoopCopyDataInit>

08000a7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a82:	3304      	adds	r3, #4

08000a84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a88:	d3f9      	bcc.n	8000a7e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a8a:	4a0a      	ldr	r2, [pc, #40]	; (8000ab4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a8c:	4c0a      	ldr	r4, [pc, #40]	; (8000ab8 <LoopForever+0x16>)
  movs r3, #0
 8000a8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a90:	e001      	b.n	8000a96 <LoopFillZerobss>

08000a92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a94:	3204      	adds	r2, #4

08000a96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a98:	d3fb      	bcc.n	8000a92 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000a9a:	f000 f811 	bl	8000ac0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a9e:	f7ff ff8f 	bl	80009c0 <main>

08000aa2 <LoopForever>:

LoopForever:
    b LoopForever
 8000aa2:	e7fe      	b.n	8000aa2 <LoopForever>
  ldr   r0, =_estack
 8000aa4:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000aa8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000aac:	20000048 	.word	0x20000048
  ldr r2, =_sidata
 8000ab0:	08000b40 	.word	0x08000b40
  ldr r2, =_sbss
 8000ab4:	20000048 	.word	0x20000048
  ldr r4, =_ebss
 8000ab8:	20000064 	.word	0x20000064

08000abc <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000abc:	e7fe      	b.n	8000abc <ADC1_2_IRQHandler>
	...

08000ac0 <__libc_init_array>:
 8000ac0:	b570      	push	{r4, r5, r6, lr}
 8000ac2:	2500      	movs	r5, #0
 8000ac4:	4e0c      	ldr	r6, [pc, #48]	; (8000af8 <__libc_init_array+0x38>)
 8000ac6:	4c0d      	ldr	r4, [pc, #52]	; (8000afc <__libc_init_array+0x3c>)
 8000ac8:	1ba4      	subs	r4, r4, r6
 8000aca:	10a4      	asrs	r4, r4, #2
 8000acc:	42a5      	cmp	r5, r4
 8000ace:	d109      	bne.n	8000ae4 <__libc_init_array+0x24>
 8000ad0:	f000 f81a 	bl	8000b08 <_init>
 8000ad4:	2500      	movs	r5, #0
 8000ad6:	4e0a      	ldr	r6, [pc, #40]	; (8000b00 <__libc_init_array+0x40>)
 8000ad8:	4c0a      	ldr	r4, [pc, #40]	; (8000b04 <__libc_init_array+0x44>)
 8000ada:	1ba4      	subs	r4, r4, r6
 8000adc:	10a4      	asrs	r4, r4, #2
 8000ade:	42a5      	cmp	r5, r4
 8000ae0:	d105      	bne.n	8000aee <__libc_init_array+0x2e>
 8000ae2:	bd70      	pop	{r4, r5, r6, pc}
 8000ae4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000ae8:	4798      	blx	r3
 8000aea:	3501      	adds	r5, #1
 8000aec:	e7ee      	b.n	8000acc <__libc_init_array+0xc>
 8000aee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000af2:	4798      	blx	r3
 8000af4:	3501      	adds	r5, #1
 8000af6:	e7f2      	b.n	8000ade <__libc_init_array+0x1e>
 8000af8:	08000b38 	.word	0x08000b38
 8000afc:	08000b38 	.word	0x08000b38
 8000b00:	08000b38 	.word	0x08000b38
 8000b04:	08000b3c 	.word	0x08000b3c

08000b08 <_init>:
 8000b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b0a:	bf00      	nop
 8000b0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b0e:	bc08      	pop	{r3}
 8000b10:	469e      	mov	lr, r3
 8000b12:	4770      	bx	lr

08000b14 <_fini>:
 8000b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b16:	bf00      	nop
 8000b18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b1a:	bc08      	pop	{r3}
 8000b1c:	469e      	mov	lr, r3
 8000b1e:	4770      	bx	lr
